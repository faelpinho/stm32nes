
STM32NES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08004d74  08004d74  00014d74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800520c  0800520c  0001520c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005218  08005218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000000  0800521c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
  8 .bss          000011a4  20000088  20000088  00020088  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000122c  2000122c  00020088  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001ef52  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003e4b  00000000  00000000  0003f00a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000b428  00000000  00000000  00042e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d30  00000000  00000000  0004e280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001550  00000000  00000000  0004efb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007a90  00000000  00000000  00050500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000335b  00000000  00000000  00057f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005b2eb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002b48  00000000  00000000  0005b368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000088 	.word	0x20000088
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004d5c 	.word	0x08004d5c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000008c 	.word	0x2000008c
 80001e8:	08004d5c 	.word	0x08004d5c

080001ec <strcmp>:
 80001ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f4:	2a01      	cmp	r2, #1
 80001f6:	bf28      	it	cs
 80001f8:	429a      	cmpcs	r2, r3
 80001fa:	d0f7      	beq.n	80001ec <strcmp>
 80001fc:	1ad0      	subs	r0, r2, r3
 80001fe:	4770      	bx	lr

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b97a 	b.w	800051c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	468c      	mov	ip, r1
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	9e08      	ldr	r6, [sp, #32]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d151      	bne.n	80002f4 <__udivmoddi4+0xb4>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d96d      	bls.n	8000332 <__udivmoddi4+0xf2>
 8000256:	fab2 fe82 	clz	lr, r2
 800025a:	f1be 0f00 	cmp.w	lr, #0
 800025e:	d00b      	beq.n	8000278 <__udivmoddi4+0x38>
 8000260:	f1ce 0c20 	rsb	ip, lr, #32
 8000264:	fa01 f50e 	lsl.w	r5, r1, lr
 8000268:	fa20 fc0c 	lsr.w	ip, r0, ip
 800026c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000270:	ea4c 0c05 	orr.w	ip, ip, r5
 8000274:	fa00 f40e 	lsl.w	r4, r0, lr
 8000278:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800027c:	0c25      	lsrs	r5, r4, #16
 800027e:	fbbc f8fa 	udiv	r8, ip, sl
 8000282:	fa1f f987 	uxth.w	r9, r7
 8000286:	fb0a cc18 	mls	ip, sl, r8, ip
 800028a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800028e:	fb08 f309 	mul.w	r3, r8, r9
 8000292:	42ab      	cmp	r3, r5
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x6c>
 8000296:	19ed      	adds	r5, r5, r7
 8000298:	f108 32ff 	add.w	r2, r8, #4294967295
 800029c:	f080 8123 	bcs.w	80004e6 <__udivmoddi4+0x2a6>
 80002a0:	42ab      	cmp	r3, r5
 80002a2:	f240 8120 	bls.w	80004e6 <__udivmoddi4+0x2a6>
 80002a6:	f1a8 0802 	sub.w	r8, r8, #2
 80002aa:	443d      	add	r5, r7
 80002ac:	1aed      	subs	r5, r5, r3
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002bc:	fb00 f909 	mul.w	r9, r0, r9
 80002c0:	45a1      	cmp	r9, r4
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x98>
 80002c4:	19e4      	adds	r4, r4, r7
 80002c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ca:	f080 810a 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80002ce:	45a1      	cmp	r9, r4
 80002d0:	f240 8107 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80002d4:	3802      	subs	r0, #2
 80002d6:	443c      	add	r4, r7
 80002d8:	eba4 0409 	sub.w	r4, r4, r9
 80002dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002e0:	2100      	movs	r1, #0
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d061      	beq.n	80003aa <__udivmoddi4+0x16a>
 80002e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ea:	2300      	movs	r3, #0
 80002ec:	6034      	str	r4, [r6, #0]
 80002ee:	6073      	str	r3, [r6, #4]
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0xc8>
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d054      	beq.n	80003a6 <__udivmoddi4+0x166>
 80002fc:	2100      	movs	r1, #0
 80002fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000302:	4608      	mov	r0, r1
 8000304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000308:	fab3 f183 	clz	r1, r3
 800030c:	2900      	cmp	r1, #0
 800030e:	f040 808e 	bne.w	800042e <__udivmoddi4+0x1ee>
 8000312:	42ab      	cmp	r3, r5
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xdc>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80fa 	bhi.w	8000510 <__udivmoddi4+0x2d0>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb65 0503 	sbc.w	r5, r5, r3
 8000322:	2001      	movs	r0, #1
 8000324:	46ac      	mov	ip, r5
 8000326:	2e00      	cmp	r6, #0
 8000328:	d03f      	beq.n	80003aa <__udivmoddi4+0x16a>
 800032a:	e886 1010 	stmia.w	r6, {r4, ip}
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	b912      	cbnz	r2, 800033a <__udivmoddi4+0xfa>
 8000334:	2701      	movs	r7, #1
 8000336:	fbb7 f7f2 	udiv	r7, r7, r2
 800033a:	fab7 fe87 	clz	lr, r7
 800033e:	f1be 0f00 	cmp.w	lr, #0
 8000342:	d134      	bne.n	80003ae <__udivmoddi4+0x16e>
 8000344:	1beb      	subs	r3, r5, r7
 8000346:	0c3a      	lsrs	r2, r7, #16
 8000348:	fa1f fc87 	uxth.w	ip, r7
 800034c:	2101      	movs	r1, #1
 800034e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000352:	0c25      	lsrs	r5, r4, #16
 8000354:	fb02 3318 	mls	r3, r2, r8, r3
 8000358:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800035c:	fb0c f308 	mul.w	r3, ip, r8
 8000360:	42ab      	cmp	r3, r5
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x134>
 8000364:	19ed      	adds	r5, r5, r7
 8000366:	f108 30ff 	add.w	r0, r8, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x132>
 800036c:	42ab      	cmp	r3, r5
 800036e:	f200 80d1 	bhi.w	8000514 <__udivmoddi4+0x2d4>
 8000372:	4680      	mov	r8, r0
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb5 f0f2 	udiv	r0, r5, r2
 800037c:	fb02 5510 	mls	r5, r2, r0, r5
 8000380:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000384:	fb0c fc00 	mul.w	ip, ip, r0
 8000388:	45a4      	cmp	ip, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x15c>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x15a>
 8000394:	45a4      	cmp	ip, r4
 8000396:	f200 80b8 	bhi.w	800050a <__udivmoddi4+0x2ca>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 040c 	sub.w	r4, r4, ip
 80003a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a4:	e79d      	b.n	80002e2 <__udivmoddi4+0xa2>
 80003a6:	4631      	mov	r1, r6
 80003a8:	4630      	mov	r0, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	f1ce 0420 	rsb	r4, lr, #32
 80003b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ba:	fa20 f804 	lsr.w	r8, r0, r4
 80003be:	0c3a      	lsrs	r2, r7, #16
 80003c0:	fa25 f404 	lsr.w	r4, r5, r4
 80003c4:	ea48 0803 	orr.w	r8, r8, r3
 80003c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003d0:	fb02 4411 	mls	r4, r2, r1, r4
 80003d4:	fa1f fc87 	uxth.w	ip, r7
 80003d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003dc:	fb01 f30c 	mul.w	r3, r1, ip
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x1bc>
 80003e8:	19ed      	adds	r5, r5, r7
 80003ea:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ee:	f080 808a 	bcs.w	8000506 <__udivmoddi4+0x2c6>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	f240 8087 	bls.w	8000506 <__udivmoddi4+0x2c6>
 80003f8:	3902      	subs	r1, #2
 80003fa:	443d      	add	r5, r7
 80003fc:	1aeb      	subs	r3, r5, r3
 80003fe:	fa1f f588 	uxth.w	r5, r8
 8000402:	fbb3 f0f2 	udiv	r0, r3, r2
 8000406:	fb02 3310 	mls	r3, r2, r0, r3
 800040a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040e:	fb00 f30c 	mul.w	r3, r0, ip
 8000412:	42ab      	cmp	r3, r5
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x1e6>
 8000416:	19ed      	adds	r5, r5, r7
 8000418:	f100 38ff 	add.w	r8, r0, #4294967295
 800041c:	d26f      	bcs.n	80004fe <__udivmoddi4+0x2be>
 800041e:	42ab      	cmp	r3, r5
 8000420:	d96d      	bls.n	80004fe <__udivmoddi4+0x2be>
 8000422:	3802      	subs	r0, #2
 8000424:	443d      	add	r5, r7
 8000426:	1aeb      	subs	r3, r5, r3
 8000428:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042c:	e78f      	b.n	800034e <__udivmoddi4+0x10e>
 800042e:	f1c1 0720 	rsb	r7, r1, #32
 8000432:	fa22 f807 	lsr.w	r8, r2, r7
 8000436:	408b      	lsls	r3, r1
 8000438:	fa05 f401 	lsl.w	r4, r5, r1
 800043c:	ea48 0303 	orr.w	r3, r8, r3
 8000440:	fa20 fe07 	lsr.w	lr, r0, r7
 8000444:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000448:	40fd      	lsrs	r5, r7
 800044a:	ea4e 0e04 	orr.w	lr, lr, r4
 800044e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000452:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000456:	fb0c 5519 	mls	r5, ip, r9, r5
 800045a:	fa1f f883 	uxth.w	r8, r3
 800045e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000462:	fb09 f408 	mul.w	r4, r9, r8
 8000466:	42ac      	cmp	r4, r5
 8000468:	fa02 f201 	lsl.w	r2, r2, r1
 800046c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x244>
 8000472:	18ed      	adds	r5, r5, r3
 8000474:	f109 30ff 	add.w	r0, r9, #4294967295
 8000478:	d243      	bcs.n	8000502 <__udivmoddi4+0x2c2>
 800047a:	42ac      	cmp	r4, r5
 800047c:	d941      	bls.n	8000502 <__udivmoddi4+0x2c2>
 800047e:	f1a9 0902 	sub.w	r9, r9, #2
 8000482:	441d      	add	r5, r3
 8000484:	1b2d      	subs	r5, r5, r4
 8000486:	fa1f fe8e 	uxth.w	lr, lr
 800048a:	fbb5 f0fc 	udiv	r0, r5, ip
 800048e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000492:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000496:	fb00 f808 	mul.w	r8, r0, r8
 800049a:	45a0      	cmp	r8, r4
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x26e>
 800049e:	18e4      	adds	r4, r4, r3
 80004a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004a4:	d229      	bcs.n	80004fa <__udivmoddi4+0x2ba>
 80004a6:	45a0      	cmp	r8, r4
 80004a8:	d927      	bls.n	80004fa <__udivmoddi4+0x2ba>
 80004aa:	3802      	subs	r0, #2
 80004ac:	441c      	add	r4, r3
 80004ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b2:	eba4 0408 	sub.w	r4, r4, r8
 80004b6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ba:	454c      	cmp	r4, r9
 80004bc:	46c6      	mov	lr, r8
 80004be:	464d      	mov	r5, r9
 80004c0:	d315      	bcc.n	80004ee <__udivmoddi4+0x2ae>
 80004c2:	d012      	beq.n	80004ea <__udivmoddi4+0x2aa>
 80004c4:	b156      	cbz	r6, 80004dc <__udivmoddi4+0x29c>
 80004c6:	ebba 030e 	subs.w	r3, sl, lr
 80004ca:	eb64 0405 	sbc.w	r4, r4, r5
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	40cb      	lsrs	r3, r1
 80004d4:	431f      	orrs	r7, r3
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	6037      	str	r7, [r6, #0]
 80004da:	6074      	str	r4, [r6, #4]
 80004dc:	2100      	movs	r1, #0
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	4618      	mov	r0, r3
 80004e4:	e6f8      	b.n	80002d8 <__udivmoddi4+0x98>
 80004e6:	4690      	mov	r8, r2
 80004e8:	e6e0      	b.n	80002ac <__udivmoddi4+0x6c>
 80004ea:	45c2      	cmp	sl, r8
 80004ec:	d2ea      	bcs.n	80004c4 <__udivmoddi4+0x284>
 80004ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f2:	eb69 0503 	sbc.w	r5, r9, r3
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7e4      	b.n	80004c4 <__udivmoddi4+0x284>
 80004fa:	4628      	mov	r0, r5
 80004fc:	e7d7      	b.n	80004ae <__udivmoddi4+0x26e>
 80004fe:	4640      	mov	r0, r8
 8000500:	e791      	b.n	8000426 <__udivmoddi4+0x1e6>
 8000502:	4681      	mov	r9, r0
 8000504:	e7be      	b.n	8000484 <__udivmoddi4+0x244>
 8000506:	4601      	mov	r1, r0
 8000508:	e778      	b.n	80003fc <__udivmoddi4+0x1bc>
 800050a:	3802      	subs	r0, #2
 800050c:	443c      	add	r4, r7
 800050e:	e745      	b.n	800039c <__udivmoddi4+0x15c>
 8000510:	4608      	mov	r0, r1
 8000512:	e708      	b.n	8000326 <__udivmoddi4+0xe6>
 8000514:	f1a8 0802 	sub.w	r8, r8, #2
 8000518:	443d      	add	r5, r7
 800051a:	e72b      	b.n	8000374 <__udivmoddi4+0x134>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000520:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000522:	4a0e      	ldr	r2, [pc, #56]	; (800055c <HAL_InitTick+0x3c>)
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HAL_InitTick+0x40>)
{
 8000526:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000528:	7818      	ldrb	r0, [r3, #0]
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000532:	6810      	ldr	r0, [r2, #0]
 8000534:	fbb0 f0f3 	udiv	r0, r0, r3
 8000538:	f000 f888 	bl	800064c <HAL_SYSTICK_Config>
 800053c:	4604      	mov	r4, r0
 800053e:	b958      	cbnz	r0, 8000558 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000540:	2d0f      	cmp	r5, #15
 8000542:	d809      	bhi.n	8000558 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000544:	4602      	mov	r2, r0
 8000546:	4629      	mov	r1, r5
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	f000 f84a 	bl	80005e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <HAL_InitTick+0x44>)
 8000552:	4620      	mov	r0, r4
 8000554:	601d      	str	r5, [r3, #0]
 8000556:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000558:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800055a:	bd38      	pop	{r3, r4, r5, pc}
 800055c:	20000008 	.word	0x20000008
 8000560:	20000000 	.word	0x20000000
 8000564:	20000004 	.word	0x20000004

08000568 <HAL_Init>:
{
 8000568:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <HAL_Init+0x30>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000572:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800057a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000582:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000584:	2003      	movs	r0, #3
 8000586:	f000 f81b 	bl	80005c0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800058a:	2000      	movs	r0, #0
 800058c:	f7ff ffc8 	bl	8000520 <HAL_InitTick>
  HAL_MspInit();
 8000590:	f003 ff2e 	bl	80043f0 <HAL_MspInit>
}
 8000594:	2000      	movs	r0, #0
 8000596:	bd08      	pop	{r3, pc}
 8000598:	40023c00 	.word	0x40023c00

0800059c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800059c:	4a03      	ldr	r2, [pc, #12]	; (80005ac <HAL_IncTick+0x10>)
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <HAL_IncTick+0x14>)
 80005a0:	6811      	ldr	r1, [r2, #0]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	440b      	add	r3, r1
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000b24 	.word	0x20000b24
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005b4:	4b01      	ldr	r3, [pc, #4]	; (80005bc <HAL_GetTick+0x8>)
 80005b6:	6818      	ldr	r0, [r3, #0]
}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000b24 	.word	0x20000b24

080005c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005c2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005c8:	041b      	lsls	r3, r3, #16
 80005ca:	0c1b      	lsrs	r3, r3, #16
 80005cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005d0:	0200      	lsls	r0, r0, #8
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005da:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005dc:	60d3      	str	r3, [r2, #12]
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e4:	4b17      	ldr	r3, [pc, #92]	; (8000644 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005e6:	b530      	push	{r4, r5, lr}
 80005e8:	68dc      	ldr	r4, [r3, #12]
 80005ea:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ee:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	bf28      	it	cs
 80005f8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	f04f 0501 	mov.w	r5, #1
 8000600:	fa05 f303 	lsl.w	r3, r5, r3
 8000604:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000608:	bf8c      	ite	hi
 800060a:	3c03      	subhi	r4, #3
 800060c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060e:	4019      	ands	r1, r3
 8000610:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000612:	fa05 f404 	lsl.w	r4, r5, r4
 8000616:	3c01      	subs	r4, #1
 8000618:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800061a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061c:	ea42 0201 	orr.w	r2, r2, r1
 8000620:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	bfaf      	iteee	ge
 8000626:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	f000 000f 	andlt.w	r0, r0, #15
 800062e:	4b06      	ldrlt	r3, [pc, #24]	; (8000648 <HAL_NVIC_SetPriority+0x64>)
 8000630:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	bfa5      	ittet	ge
 8000634:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000638:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop
 8000644:	e000ed00 	.word	0xe000ed00
 8000648:	e000ed14 	.word	0xe000ed14

0800064c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800064c:	3801      	subs	r0, #1
 800064e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000652:	d20a      	bcs.n	800066a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	4a07      	ldr	r2, [pc, #28]	; (8000674 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000658:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	21f0      	movs	r1, #240	; 0xf0
 800065c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000660:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000662:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000664:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800066a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000e010 	.word	0xe000e010
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800067c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800067e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000680:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000848 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000684:	4a6e      	ldr	r2, [pc, #440]	; (8000840 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000686:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800084c <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800068a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800068c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800068e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000692:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000694:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000698:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800069c:	45b6      	cmp	lr, r6
 800069e:	f040 80b6 	bne.w	800080e <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006a2:	684c      	ldr	r4, [r1, #4]
 80006a4:	f024 0710 	bic.w	r7, r4, #16
 80006a8:	2f02      	cmp	r7, #2
 80006aa:	d116      	bne.n	80006da <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006ac:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006b0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006b4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006b8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006bc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006c0:	f04f 0c0f 	mov.w	ip, #15
 80006c4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006c8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006cc:	690d      	ldr	r5, [r1, #16]
 80006ce:	fa05 f50b 	lsl.w	r5, r5, fp
 80006d2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006d6:	f8ca 5020 	str.w	r5, [sl, #32]
 80006da:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006de:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006e0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006e4:	fa05 f50a 	lsl.w	r5, r5, sl
 80006e8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006ea:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006ee:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006f2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006f8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006fc:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006fe:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000702:	d811      	bhi.n	8000728 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000704:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000706:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800070a:	68cf      	ldr	r7, [r1, #12]
 800070c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000710:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000714:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000716:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000718:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800071c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000720:	409f      	lsls	r7, r3
 8000722:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000726:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000728:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800072a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800072c:	688f      	ldr	r7, [r1, #8]
 800072e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000732:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000734:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000736:	00e5      	lsls	r5, r4, #3
 8000738:	d569      	bpl.n	800080e <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	f04f 0b00 	mov.w	fp, #0
 800073e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000742:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000746:	4d3f      	ldr	r5, [pc, #252]	; (8000844 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000748:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800074c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000750:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000754:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000758:	9703      	str	r7, [sp, #12]
 800075a:	9f03      	ldr	r7, [sp, #12]
 800075c:	f023 0703 	bic.w	r7, r3, #3
 8000760:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000764:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000768:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800076c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000770:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000774:	f04f 0e0f 	mov.w	lr, #15
 8000778:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800077c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800077e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000782:	d04b      	beq.n	800081c <HAL_GPIO_Init+0x1a4>
 8000784:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000788:	42a8      	cmp	r0, r5
 800078a:	d049      	beq.n	8000820 <HAL_GPIO_Init+0x1a8>
 800078c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000790:	42a8      	cmp	r0, r5
 8000792:	d047      	beq.n	8000824 <HAL_GPIO_Init+0x1ac>
 8000794:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000798:	42a8      	cmp	r0, r5
 800079a:	d045      	beq.n	8000828 <HAL_GPIO_Init+0x1b0>
 800079c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a0:	42a8      	cmp	r0, r5
 80007a2:	d043      	beq.n	800082c <HAL_GPIO_Init+0x1b4>
 80007a4:	4548      	cmp	r0, r9
 80007a6:	d043      	beq.n	8000830 <HAL_GPIO_Init+0x1b8>
 80007a8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007ac:	42a8      	cmp	r0, r5
 80007ae:	d041      	beq.n	8000834 <HAL_GPIO_Init+0x1bc>
 80007b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b4:	42a8      	cmp	r0, r5
 80007b6:	d03f      	beq.n	8000838 <HAL_GPIO_Init+0x1c0>
 80007b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007bc:	42a8      	cmp	r0, r5
 80007be:	d03d      	beq.n	800083c <HAL_GPIO_Init+0x1c4>
 80007c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c4:	42a8      	cmp	r0, r5
 80007c6:	bf14      	ite	ne
 80007c8:	250a      	movne	r5, #10
 80007ca:	2509      	moveq	r5, #9
 80007cc:	fa05 f50c 	lsl.w	r5, r5, ip
 80007d0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007d4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007d6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007d8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007da:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007de:	bf0c      	ite	eq
 80007e0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007e2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007e4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007e6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007e8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007ec:	bf0c      	ite	eq
 80007ee:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007f0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007f2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007f4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007f6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007fa:	bf0c      	ite	eq
 80007fc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007fe:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000800:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000802:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000804:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000806:	bf54      	ite	pl
 8000808:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800080a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800080c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800080e:	3301      	adds	r3, #1
 8000810:	2b10      	cmp	r3, #16
 8000812:	f47f af3c 	bne.w	800068e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000816:	b005      	add	sp, #20
 8000818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800081c:	465d      	mov	r5, fp
 800081e:	e7d5      	b.n	80007cc <HAL_GPIO_Init+0x154>
 8000820:	2501      	movs	r5, #1
 8000822:	e7d3      	b.n	80007cc <HAL_GPIO_Init+0x154>
 8000824:	2502      	movs	r5, #2
 8000826:	e7d1      	b.n	80007cc <HAL_GPIO_Init+0x154>
 8000828:	2503      	movs	r5, #3
 800082a:	e7cf      	b.n	80007cc <HAL_GPIO_Init+0x154>
 800082c:	2504      	movs	r5, #4
 800082e:	e7cd      	b.n	80007cc <HAL_GPIO_Init+0x154>
 8000830:	2505      	movs	r5, #5
 8000832:	e7cb      	b.n	80007cc <HAL_GPIO_Init+0x154>
 8000834:	2506      	movs	r5, #6
 8000836:	e7c9      	b.n	80007cc <HAL_GPIO_Init+0x154>
 8000838:	2507      	movs	r5, #7
 800083a:	e7c7      	b.n	80007cc <HAL_GPIO_Init+0x154>
 800083c:	2508      	movs	r5, #8
 800083e:	e7c5      	b.n	80007cc <HAL_GPIO_Init+0x154>
 8000840:	40013c00 	.word	0x40013c00
 8000844:	40020000 	.word	0x40020000
 8000848:	40023800 	.word	0x40023800
 800084c:	40021400 	.word	0x40021400

08000850 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000850:	b10a      	cbz	r2, 8000856 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000852:	6181      	str	r1, [r0, #24]
 8000854:	4770      	bx	lr
 8000856:	0409      	lsls	r1, r1, #16
 8000858:	e7fb      	b.n	8000852 <HAL_GPIO_WritePin+0x2>
	...

0800085c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800085c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000864:	4c18      	ldr	r4, [pc, #96]	; (80008c8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000868:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800086c:	641a      	str	r2, [r3, #64]	; 0x40
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <HAL_PWREx_EnableOverDrive+0x70>)
 800087a:	2201      	movs	r2, #1
 800087c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800087e:	f7ff fe99 	bl	80005b4 <HAL_GetTick>
 8000882:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000884:	6863      	ldr	r3, [r4, #4]
 8000886:	03da      	lsls	r2, r3, #15
 8000888:	d50b      	bpl.n	80008a2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800088c:	4c0e      	ldr	r4, [pc, #56]	; (80008c8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800088e:	2201      	movs	r2, #1
 8000890:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000892:	f7ff fe8f 	bl	80005b4 <HAL_GetTick>
 8000896:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000898:	6863      	ldr	r3, [r4, #4]
 800089a:	039b      	lsls	r3, r3, #14
 800089c:	d50a      	bpl.n	80008b4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800089e:	2000      	movs	r0, #0
 80008a0:	e006      	b.n	80008b0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008a2:	f7ff fe87 	bl	80005b4 <HAL_GetTick>
 80008a6:	1b40      	subs	r0, r0, r5
 80008a8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008ac:	d9ea      	bls.n	8000884 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80008ae:	2003      	movs	r0, #3
}
 80008b0:	b003      	add	sp, #12
 80008b2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008b4:	f7ff fe7e 	bl	80005b4 <HAL_GetTick>
 80008b8:	1b40      	subs	r0, r0, r5
 80008ba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008be:	d9eb      	bls.n	8000898 <HAL_PWREx_EnableOverDrive+0x3c>
 80008c0:	e7f5      	b.n	80008ae <HAL_PWREx_EnableOverDrive+0x52>
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40007000 	.word	0x40007000
 80008cc:	420e0040 	.word	0x420e0040
 80008d0:	420e0044 	.word	0x420e0044

080008d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008d8:	4604      	mov	r4, r0
 80008da:	b918      	cbnz	r0, 80008e4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80008dc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008de:	b002      	add	sp, #8
 80008e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008e4:	6803      	ldr	r3, [r0, #0]
 80008e6:	07dd      	lsls	r5, r3, #31
 80008e8:	d410      	bmi.n	800090c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	0798      	lsls	r0, r3, #30
 80008ee:	d458      	bmi.n	80009a2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008f0:	6823      	ldr	r3, [r4, #0]
 80008f2:	071a      	lsls	r2, r3, #28
 80008f4:	f100 809a 	bmi.w	8000a2c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008f8:	6823      	ldr	r3, [r4, #0]
 80008fa:	075b      	lsls	r3, r3, #29
 80008fc:	f100 80b8 	bmi.w	8000a70 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000900:	69a2      	ldr	r2, [r4, #24]
 8000902:	2a00      	cmp	r2, #0
 8000904:	f040 8119 	bne.w	8000b3a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000908:	2000      	movs	r0, #0
 800090a:	e7e8      	b.n	80008de <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800090c:	4ba6      	ldr	r3, [pc, #664]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	f002 020c 	and.w	r2, r2, #12
 8000914:	2a04      	cmp	r2, #4
 8000916:	d007      	beq.n	8000928 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800091e:	2a08      	cmp	r2, #8
 8000920:	d10a      	bne.n	8000938 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	0259      	lsls	r1, r3, #9
 8000926:	d507      	bpl.n	8000938 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000928:	4b9f      	ldr	r3, [pc, #636]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	039a      	lsls	r2, r3, #14
 800092e:	d5dc      	bpl.n	80008ea <HAL_RCC_OscConfig+0x16>
 8000930:	6863      	ldr	r3, [r4, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1d9      	bne.n	80008ea <HAL_RCC_OscConfig+0x16>
 8000936:	e7d1      	b.n	80008dc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000938:	6863      	ldr	r3, [r4, #4]
 800093a:	4d9b      	ldr	r5, [pc, #620]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 800093c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000940:	d111      	bne.n	8000966 <HAL_RCC_OscConfig+0x92>
 8000942:	682b      	ldr	r3, [r5, #0]
 8000944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000948:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800094a:	f7ff fe33 	bl	80005b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800094e:	4d96      	ldr	r5, [pc, #600]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000950:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000952:	682b      	ldr	r3, [r5, #0]
 8000954:	039b      	lsls	r3, r3, #14
 8000956:	d4c8      	bmi.n	80008ea <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000958:	f7ff fe2c 	bl	80005b4 <HAL_GetTick>
 800095c:	1b80      	subs	r0, r0, r6
 800095e:	2864      	cmp	r0, #100	; 0x64
 8000960:	d9f7      	bls.n	8000952 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000962:	2003      	movs	r0, #3
 8000964:	e7bb      	b.n	80008de <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000966:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800096a:	d104      	bne.n	8000976 <HAL_RCC_OscConfig+0xa2>
 800096c:	682b      	ldr	r3, [r5, #0]
 800096e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000972:	602b      	str	r3, [r5, #0]
 8000974:	e7e5      	b.n	8000942 <HAL_RCC_OscConfig+0x6e>
 8000976:	682a      	ldr	r2, [r5, #0]
 8000978:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800097c:	602a      	str	r2, [r5, #0]
 800097e:	682a      	ldr	r2, [r5, #0]
 8000980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000984:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1df      	bne.n	800094a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800098a:	f7ff fe13 	bl	80005b4 <HAL_GetTick>
 800098e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	039f      	lsls	r7, r3, #14
 8000994:	d5a9      	bpl.n	80008ea <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000996:	f7ff fe0d 	bl	80005b4 <HAL_GetTick>
 800099a:	1b80      	subs	r0, r0, r6
 800099c:	2864      	cmp	r0, #100	; 0x64
 800099e:	d9f7      	bls.n	8000990 <HAL_RCC_OscConfig+0xbc>
 80009a0:	e7df      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009a2:	4b81      	ldr	r3, [pc, #516]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	f012 0f0c 	tst.w	r2, #12
 80009aa:	d007      	beq.n	80009bc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009b2:	2a08      	cmp	r2, #8
 80009b4:	d111      	bne.n	80009da <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	025e      	lsls	r6, r3, #9
 80009ba:	d40e      	bmi.n	80009da <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009bc:	4b7a      	ldr	r3, [pc, #488]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	0795      	lsls	r5, r2, #30
 80009c2:	d502      	bpl.n	80009ca <HAL_RCC_OscConfig+0xf6>
 80009c4:	68e2      	ldr	r2, [r4, #12]
 80009c6:	2a01      	cmp	r2, #1
 80009c8:	d188      	bne.n	80008dc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	6921      	ldr	r1, [r4, #16]
 80009ce:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009d2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009d6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009d8:	e78a      	b.n	80008f0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009da:	68e2      	ldr	r2, [r4, #12]
 80009dc:	4b73      	ldr	r3, [pc, #460]	; (8000bac <HAL_RCC_OscConfig+0x2d8>)
 80009de:	b1b2      	cbz	r2, 8000a0e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009e4:	f7ff fde6 	bl	80005b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e8:	4d6f      	ldr	r5, [pc, #444]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ec:	682b      	ldr	r3, [r5, #0]
 80009ee:	0798      	lsls	r0, r3, #30
 80009f0:	d507      	bpl.n	8000a02 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f2:	682b      	ldr	r3, [r5, #0]
 80009f4:	6922      	ldr	r2, [r4, #16]
 80009f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009fa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009fe:	602b      	str	r3, [r5, #0]
 8000a00:	e776      	b.n	80008f0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a02:	f7ff fdd7 	bl	80005b4 <HAL_GetTick>
 8000a06:	1b80      	subs	r0, r0, r6
 8000a08:	2802      	cmp	r0, #2
 8000a0a:	d9ef      	bls.n	80009ec <HAL_RCC_OscConfig+0x118>
 8000a0c:	e7a9      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a10:	f7ff fdd0 	bl	80005b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a14:	4d64      	ldr	r5, [pc, #400]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a18:	682b      	ldr	r3, [r5, #0]
 8000a1a:	0799      	lsls	r1, r3, #30
 8000a1c:	f57f af68 	bpl.w	80008f0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a20:	f7ff fdc8 	bl	80005b4 <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	2802      	cmp	r0, #2
 8000a28:	d9f6      	bls.n	8000a18 <HAL_RCC_OscConfig+0x144>
 8000a2a:	e79a      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a2c:	6962      	ldr	r2, [r4, #20]
 8000a2e:	4b60      	ldr	r3, [pc, #384]	; (8000bb0 <HAL_RCC_OscConfig+0x2dc>)
 8000a30:	b17a      	cbz	r2, 8000a52 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a36:	f7ff fdbd 	bl	80005b4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3a:	4d5b      	ldr	r5, [pc, #364]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a3c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a40:	079f      	lsls	r7, r3, #30
 8000a42:	f53f af59 	bmi.w	80008f8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a46:	f7ff fdb5 	bl	80005b4 <HAL_GetTick>
 8000a4a:	1b80      	subs	r0, r0, r6
 8000a4c:	2802      	cmp	r0, #2
 8000a4e:	d9f6      	bls.n	8000a3e <HAL_RCC_OscConfig+0x16a>
 8000a50:	e787      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a52:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a54:	f7ff fdae 	bl	80005b4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a58:	4d53      	ldr	r5, [pc, #332]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a5a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a5c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a5e:	0798      	lsls	r0, r3, #30
 8000a60:	f57f af4a 	bpl.w	80008f8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a64:	f7ff fda6 	bl	80005b4 <HAL_GetTick>
 8000a68:	1b80      	subs	r0, r0, r6
 8000a6a:	2802      	cmp	r0, #2
 8000a6c:	d9f6      	bls.n	8000a5c <HAL_RCC_OscConfig+0x188>
 8000a6e:	e778      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a70:	4b4d      	ldr	r3, [pc, #308]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 8000a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a74:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a78:	d128      	bne.n	8000acc <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	9201      	str	r2, [sp, #4]
 8000a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a82:	641a      	str	r2, [r3, #64]	; 0x40
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a8e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a90:	4d48      	ldr	r5, [pc, #288]	; (8000bb4 <HAL_RCC_OscConfig+0x2e0>)
 8000a92:	682b      	ldr	r3, [r5, #0]
 8000a94:	05d9      	lsls	r1, r3, #23
 8000a96:	d51b      	bpl.n	8000ad0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a98:	68a3      	ldr	r3, [r4, #8]
 8000a9a:	4d43      	ldr	r5, [pc, #268]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d127      	bne.n	8000af0 <HAL_RCC_OscConfig+0x21c>
 8000aa0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000aa8:	f7ff fd84 	bl	80005b4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aac:	4d3e      	ldr	r5, [pc, #248]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000aae:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ab6:	079b      	lsls	r3, r3, #30
 8000ab8:	d539      	bpl.n	8000b2e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	f43f af20 	beq.w	8000900 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ac0:	4a39      	ldr	r2, [pc, #228]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 8000ac2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	e719      	b.n	8000900 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000acc:	2600      	movs	r6, #0
 8000ace:	e7df      	b.n	8000a90 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ad0:	682b      	ldr	r3, [r5, #0]
 8000ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ad8:	f7ff fd6c 	bl	80005b4 <HAL_GetTick>
 8000adc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ade:	682b      	ldr	r3, [r5, #0]
 8000ae0:	05da      	lsls	r2, r3, #23
 8000ae2:	d4d9      	bmi.n	8000a98 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ae4:	f7ff fd66 	bl	80005b4 <HAL_GetTick>
 8000ae8:	1bc0      	subs	r0, r0, r7
 8000aea:	2802      	cmp	r0, #2
 8000aec:	d9f7      	bls.n	8000ade <HAL_RCC_OscConfig+0x20a>
 8000aee:	e738      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af0:	2b05      	cmp	r3, #5
 8000af2:	d104      	bne.n	8000afe <HAL_RCC_OscConfig+0x22a>
 8000af4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	672b      	str	r3, [r5, #112]	; 0x70
 8000afc:	e7d0      	b.n	8000aa0 <HAL_RCC_OscConfig+0x1cc>
 8000afe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b00:	f022 0201 	bic.w	r2, r2, #1
 8000b04:	672a      	str	r2, [r5, #112]	; 0x70
 8000b06:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b08:	f022 0204 	bic.w	r2, r2, #4
 8000b0c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1ca      	bne.n	8000aa8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b12:	f7ff fd4f 	bl	80005b4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b16:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b1a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b1e:	0798      	lsls	r0, r3, #30
 8000b20:	d5cb      	bpl.n	8000aba <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b22:	f7ff fd47 	bl	80005b4 <HAL_GetTick>
 8000b26:	1bc0      	subs	r0, r0, r7
 8000b28:	4540      	cmp	r0, r8
 8000b2a:	d9f7      	bls.n	8000b1c <HAL_RCC_OscConfig+0x248>
 8000b2c:	e719      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fd41 	bl	80005b4 <HAL_GetTick>
 8000b32:	1bc0      	subs	r0, r0, r7
 8000b34:	4540      	cmp	r0, r8
 8000b36:	d9bd      	bls.n	8000ab4 <HAL_RCC_OscConfig+0x1e0>
 8000b38:	e713      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b3a:	4d1b      	ldr	r5, [pc, #108]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 8000b3c:	68ab      	ldr	r3, [r5, #8]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	f43f aeca 	beq.w	80008dc <HAL_RCC_OscConfig+0x8>
 8000b48:	4e1b      	ldr	r6, [pc, #108]	; (8000bb8 <HAL_RCC_OscConfig+0x2e4>)
 8000b4a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b4c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b4e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b50:	d134      	bne.n	8000bbc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b52:	f7ff fd2f 	bl	80005b4 <HAL_GetTick>
 8000b56:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b58:	682b      	ldr	r3, [r5, #0]
 8000b5a:	0199      	lsls	r1, r3, #6
 8000b5c:	d41e      	bmi.n	8000b9c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b5e:	6a22      	ldr	r2, [r4, #32]
 8000b60:	69e3      	ldr	r3, [r4, #28]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b66:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b70:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b72:	4c0d      	ldr	r4, [pc, #52]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b74:	0852      	lsrs	r2, r2, #1
 8000b76:	3a01      	subs	r2, #1
 8000b78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b7e:	2301      	movs	r3, #1
 8000b80:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b82:	f7ff fd17 	bl	80005b4 <HAL_GetTick>
 8000b86:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b88:	6823      	ldr	r3, [r4, #0]
 8000b8a:	019a      	lsls	r2, r3, #6
 8000b8c:	f53f aebc 	bmi.w	8000908 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b90:	f7ff fd10 	bl	80005b4 <HAL_GetTick>
 8000b94:	1b40      	subs	r0, r0, r5
 8000b96:	2802      	cmp	r0, #2
 8000b98:	d9f6      	bls.n	8000b88 <HAL_RCC_OscConfig+0x2b4>
 8000b9a:	e6e2      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b9c:	f7ff fd0a 	bl	80005b4 <HAL_GetTick>
 8000ba0:	1bc0      	subs	r0, r0, r7
 8000ba2:	2802      	cmp	r0, #2
 8000ba4:	d9d8      	bls.n	8000b58 <HAL_RCC_OscConfig+0x284>
 8000ba6:	e6dc      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	42470000 	.word	0x42470000
 8000bb0:	42470e80 	.word	0x42470e80
 8000bb4:	40007000 	.word	0x40007000
 8000bb8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000bbc:	f7ff fcfa 	bl	80005b4 <HAL_GetTick>
 8000bc0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	f57f ae9f 	bpl.w	8000908 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bca:	f7ff fcf3 	bl	80005b4 <HAL_GetTick>
 8000bce:	1b00      	subs	r0, r0, r4
 8000bd0:	2802      	cmp	r0, #2
 8000bd2:	d9f6      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x2ee>
 8000bd4:	e6c5      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
 8000bd6:	bf00      	nop

08000bd8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bd8:	4913      	ldr	r1, [pc, #76]	; (8000c28 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bda:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bdc:	688b      	ldr	r3, [r1, #8]
 8000bde:	f003 030c 	and.w	r3, r3, #12
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	d003      	beq.n	8000bee <HAL_RCC_GetSysClockFreq+0x16>
 8000be6:	2b08      	cmp	r3, #8
 8000be8:	d003      	beq.n	8000bf2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bea:	4810      	ldr	r0, [pc, #64]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bec:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bee:	4810      	ldr	r0, [pc, #64]	; (8000c30 <HAL_RCC_GetSysClockFreq+0x58>)
 8000bf0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bf2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bf6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bfc:	bf14      	ite	ne
 8000bfe:	480c      	ldrne	r0, [pc, #48]	; (8000c30 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c00:	480a      	ldreq	r0, [pc, #40]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c02:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c06:	bf18      	it	ne
 8000c08:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c0e:	fba1 0100 	umull	r0, r1, r1, r0
 8000c12:	f7ff fafd 	bl	8000210 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c1e:	3301      	adds	r3, #1
 8000c20:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c22:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c26:	bd08      	pop	{r3, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	00f42400 	.word	0x00f42400
 8000c30:	017d7840 	.word	0x017d7840

08000c34 <HAL_RCC_ClockConfig>:
{
 8000c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c38:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	b910      	cbnz	r0, 8000c44 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c3e:	2001      	movs	r0, #1
 8000c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c44:	4b44      	ldr	r3, [pc, #272]	; (8000d58 <HAL_RCC_ClockConfig+0x124>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	f002 020f 	and.w	r2, r2, #15
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	d328      	bcc.n	8000ca2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c50:	6821      	ldr	r1, [r4, #0]
 8000c52:	078f      	lsls	r7, r1, #30
 8000c54:	d42d      	bmi.n	8000cb2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c56:	07c8      	lsls	r0, r1, #31
 8000c58:	d440      	bmi.n	8000cdc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c5a:	4b3f      	ldr	r3, [pc, #252]	; (8000d58 <HAL_RCC_ClockConfig+0x124>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	f002 020f 	and.w	r2, r2, #15
 8000c62:	4295      	cmp	r5, r2
 8000c64:	d366      	bcc.n	8000d34 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c66:	6822      	ldr	r2, [r4, #0]
 8000c68:	0751      	lsls	r1, r2, #29
 8000c6a:	d46c      	bmi.n	8000d46 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c6c:	0713      	lsls	r3, r2, #28
 8000c6e:	d507      	bpl.n	8000c80 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c70:	4a3a      	ldr	r2, [pc, #232]	; (8000d5c <HAL_RCC_ClockConfig+0x128>)
 8000c72:	6921      	ldr	r1, [r4, #16]
 8000c74:	6893      	ldr	r3, [r2, #8]
 8000c76:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c7e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c80:	f7ff ffaa 	bl	8000bd8 <HAL_RCC_GetSysClockFreq>
 8000c84:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <HAL_RCC_ClockConfig+0x128>)
 8000c86:	4a36      	ldr	r2, [pc, #216]	; (8000d60 <HAL_RCC_ClockConfig+0x12c>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c8e:	5cd3      	ldrb	r3, [r2, r3]
 8000c90:	40d8      	lsrs	r0, r3
 8000c92:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <HAL_RCC_ClockConfig+0x130>)
 8000c94:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff fc42 	bl	8000520 <HAL_InitTick>
  return HAL_OK;
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ca2:	b2ca      	uxtb	r2, r1
 8000ca4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 030f 	and.w	r3, r3, #15
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d1c6      	bne.n	8000c3e <HAL_RCC_ClockConfig+0xa>
 8000cb0:	e7ce      	b.n	8000c50 <HAL_RCC_ClockConfig+0x1c>
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cb4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cb8:	bf1e      	ittt	ne
 8000cba:	689a      	ldrne	r2, [r3, #8]
 8000cbc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cc0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cc4:	bf42      	ittt	mi
 8000cc6:	689a      	ldrmi	r2, [r3, #8]
 8000cc8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000ccc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	68a0      	ldr	r0, [r4, #8]
 8000cd2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cd6:	4302      	orrs	r2, r0
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	e7bc      	b.n	8000c56 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cdc:	6862      	ldr	r2, [r4, #4]
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <HAL_RCC_ClockConfig+0x128>)
 8000ce0:	2a01      	cmp	r2, #1
 8000ce2:	d11d      	bne.n	8000d20 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cea:	d0a8      	beq.n	8000c3e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cec:	4e1b      	ldr	r6, [pc, #108]	; (8000d5c <HAL_RCC_ClockConfig+0x128>)
 8000cee:	68b3      	ldr	r3, [r6, #8]
 8000cf0:	f023 0303 	bic.w	r3, r3, #3
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cf8:	f7ff fc5c 	bl	80005b4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cfc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d00:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d02:	68b3      	ldr	r3, [r6, #8]
 8000d04:	6862      	ldr	r2, [r4, #4]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d0e:	d0a4      	beq.n	8000c5a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d10:	f7ff fc50 	bl	80005b4 <HAL_GetTick>
 8000d14:	1bc0      	subs	r0, r0, r7
 8000d16:	4540      	cmp	r0, r8
 8000d18:	d9f3      	bls.n	8000d02 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d1a:	2003      	movs	r0, #3
}
 8000d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d20:	1e91      	subs	r1, r2, #2
 8000d22:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d24:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d26:	d802      	bhi.n	8000d2e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d2c:	e7dd      	b.n	8000cea <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2e:	f013 0f02 	tst.w	r3, #2
 8000d32:	e7da      	b.n	8000cea <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d34:	b2ea      	uxtb	r2, r5
 8000d36:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	429d      	cmp	r5, r3
 8000d40:	f47f af7d 	bne.w	8000c3e <HAL_RCC_ClockConfig+0xa>
 8000d44:	e78f      	b.n	8000c66 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d46:	4905      	ldr	r1, [pc, #20]	; (8000d5c <HAL_RCC_ClockConfig+0x128>)
 8000d48:	68e0      	ldr	r0, [r4, #12]
 8000d4a:	688b      	ldr	r3, [r1, #8]
 8000d4c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d50:	4303      	orrs	r3, r0
 8000d52:	608b      	str	r3, [r1, #8]
 8000d54:	e78a      	b.n	8000c6c <HAL_RCC_ClockConfig+0x38>
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	080051f8 	.word	0x080051f8
 8000d64:	20000008 	.word	0x20000008

08000d68 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d6c:	9e06      	ldr	r6, [sp, #24]
 8000d6e:	4604      	mov	r4, r0
 8000d70:	4688      	mov	r8, r1
 8000d72:	4617      	mov	r7, r2
 8000d74:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000d76:	6822      	ldr	r2, [r4, #0]
 8000d78:	6893      	ldr	r3, [r2, #8]
 8000d7a:	ea38 0303 	bics.w	r3, r8, r3
 8000d7e:	bf0c      	ite	eq
 8000d80:	2301      	moveq	r3, #1
 8000d82:	2300      	movne	r3, #0
 8000d84:	429f      	cmp	r7, r3
 8000d86:	d102      	bne.n	8000d8e <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000d88:	2000      	movs	r0, #0
}
 8000d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000d8e:	1c6b      	adds	r3, r5, #1
 8000d90:	d0f2      	beq.n	8000d78 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000d92:	bb55      	cbnz	r5, 8000dea <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000d94:	6823      	ldr	r3, [r4, #0]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000d9c:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000d9e:	6862      	ldr	r2, [r4, #4]
 8000da0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000da4:	d10a      	bne.n	8000dbc <SPI_WaitFlagStateUntilTimeout+0x54>
 8000da6:	68a2      	ldr	r2, [r4, #8]
 8000da8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000dac:	d002      	beq.n	8000db4 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000dae:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000db2:	d103      	bne.n	8000dbc <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dba:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000dbc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dbe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000dc2:	d109      	bne.n	8000dd8 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000dca:	0412      	lsls	r2, r2, #16
 8000dcc:	0c12      	lsrs	r2, r2, #16
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000dd6:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000dde:	2300      	movs	r3, #0
 8000de0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000de4:	2003      	movs	r0, #3
 8000de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000dea:	f7ff fbe3 	bl	80005b4 <HAL_GetTick>
 8000dee:	1b80      	subs	r0, r0, r6
 8000df0:	4285      	cmp	r5, r0
 8000df2:	d8c0      	bhi.n	8000d76 <SPI_WaitFlagStateUntilTimeout+0xe>
 8000df4:	e7ce      	b.n	8000d94 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000df6 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000df6:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000df8:	460b      	mov	r3, r1
 8000dfa:	9200      	str	r2, [sp, #0]
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	2200      	movs	r2, #0
{
 8000e00:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e02:	f7ff ffb1 	bl	8000d68 <SPI_WaitFlagStateUntilTimeout>
 8000e06:	b120      	cbz	r0, 8000e12 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e08:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e0a:	f043 0320 	orr.w	r3, r3, #32
 8000e0e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000e10:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8000e12:	b002      	add	sp, #8
 8000e14:	bd10      	pop	{r4, pc}

08000e16 <HAL_SPI_Init>:
{
 8000e16:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8000e18:	4604      	mov	r4, r0
 8000e1a:	2800      	cmp	r0, #0
 8000e1c:	d036      	beq.n	8000e8c <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8000e22:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000e26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e2a:	b91b      	cbnz	r3, 8000e34 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000e2c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000e30:	f003 fafa 	bl	8004428 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000e34:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e36:	68a0      	ldr	r0, [r4, #8]
 8000e38:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000e40:	680b      	ldr	r3, [r1, #0]
 8000e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e46:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e48:	6863      	ldr	r3, [r4, #4]
 8000e4a:	4303      	orrs	r3, r0
 8000e4c:	68e0      	ldr	r0, [r4, #12]
 8000e4e:	4303      	orrs	r3, r0
 8000e50:	6920      	ldr	r0, [r4, #16]
 8000e52:	4303      	orrs	r3, r0
 8000e54:	6960      	ldr	r0, [r4, #20]
 8000e56:	4303      	orrs	r3, r0
 8000e58:	69e0      	ldr	r0, [r4, #28]
 8000e5a:	4303      	orrs	r3, r0
 8000e5c:	6a20      	ldr	r0, [r4, #32]
 8000e5e:	4303      	orrs	r3, r0
 8000e60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000e62:	4303      	orrs	r3, r0
 8000e64:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000e68:	4303      	orrs	r3, r0
 8000e6a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e6c:	0c12      	lsrs	r2, r2, #16
 8000e6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e70:	f002 0204 	and.w	r2, r2, #4
 8000e74:	431a      	orrs	r2, r3
 8000e76:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e78:	69cb      	ldr	r3, [r1, #28]
 8000e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e7e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e80:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000e82:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e84:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000e86:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000e8a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e8c:	2001      	movs	r0, #1
}
 8000e8e:	bd10      	pop	{r4, pc}

08000e90 <HAL_SPI_TransmitReceive>:
{
 8000e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e94:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8000e96:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000e9a:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8000e9c:	2b01      	cmp	r3, #1
{
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	460d      	mov	r5, r1
 8000ea2:	4616      	mov	r6, r2
 8000ea4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8000ea6:	f000 80ed 	beq.w	8001084 <HAL_SPI_TransmitReceive+0x1f4>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000eb0:	f7ff fb80 	bl	80005b4 <HAL_GetTick>
  tmp  = hspi->State;
 8000eb4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8000eb8:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8000eba:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000ebc:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000ebe:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000ec0:	d00a      	beq.n	8000ed8 <HAL_SPI_TransmitReceive+0x48>
 8000ec2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000ec6:	f040 80db 	bne.w	8001080 <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000eca:	68a2      	ldr	r2, [r4, #8]
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f040 80d7 	bne.w	8001080 <HAL_SPI_TransmitReceive+0x1f0>
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	f040 80d4 	bne.w	8001080 <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d04e      	beq.n	8000f7a <HAL_SPI_TransmitReceive+0xea>
 8000edc:	2e00      	cmp	r6, #0
 8000ede:	d04c      	beq.n	8000f7a <HAL_SPI_TransmitReceive+0xea>
 8000ee0:	f1b9 0f00 	cmp.w	r9, #0
 8000ee4:	d049      	beq.n	8000f7a <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8000ee6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000eea:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8000eec:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000eee:	bf04      	itt	eq
 8000ef0:	2305      	moveq	r3, #5
 8000ef2:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000efa:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000efc:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000efe:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000f00:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000f04:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f08:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000f0a:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f0e:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000f10:	bf58      	it	pl
 8000f12:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000f14:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000f16:	bf58      	it	pl
 8000f18:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000f1c:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000f20:	bf58      	it	pl
 8000f22:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000f24:	68e2      	ldr	r2, [r4, #12]
 8000f26:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000f2a:	d15d      	bne.n	8000fe8 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000f2c:	b119      	cbz	r1, 8000f36 <HAL_SPI_TransmitReceive+0xa6>
 8000f2e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000f30:	b292      	uxth	r2, r2
 8000f32:	2a01      	cmp	r2, #1
 8000f34:	d106      	bne.n	8000f44 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000f36:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000f3a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000f3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000f44:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000f48:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	b9bb      	cbnz	r3, 8000f7e <HAL_SPI_TransmitReceive+0xee>
 8000f4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	b9a3      	cbnz	r3, 8000f7e <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000f54:	f8cd 8000 	str.w	r8, [sp]
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f7ff ff02 	bl	8000d68 <SPI_WaitFlagStateUntilTimeout>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d135      	bne.n	8000fd4 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000f68:	4642      	mov	r2, r8
 8000f6a:	4639      	mov	r1, r7
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff ff42 	bl	8000df6 <SPI_CheckFlag_BSY>
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d079      	beq.n	800106a <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f76:	2320      	movs	r3, #32
 8000f78:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	e02b      	b.n	8000fd6 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000f7e:	f1b9 0f00 	cmp.w	r9, #0
 8000f82:	d00f      	beq.n	8000fa4 <HAL_SPI_TransmitReceive+0x114>
 8000f84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	b163      	cbz	r3, 8000fa4 <HAL_SPI_TransmitReceive+0x114>
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	0791      	lsls	r1, r2, #30
 8000f90:	d508      	bpl.n	8000fa4 <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000f92:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000f96:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000f98:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8000fa0:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000fa4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	b163      	cbz	r3, 8000fc4 <HAL_SPI_TransmitReceive+0x134>
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	07d2      	lsls	r2, r2, #31
 8000fb0:	d508      	bpl.n	8000fc4 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8000fb8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8000fc0:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000fc4:	1c78      	adds	r0, r7, #1
 8000fc6:	d0bf      	beq.n	8000f48 <HAL_SPI_TransmitReceive+0xb8>
 8000fc8:	f7ff faf4 	bl	80005b4 <HAL_GetTick>
 8000fcc:	eba0 0008 	sub.w	r0, r0, r8
 8000fd0:	4287      	cmp	r7, r0
 8000fd2:	d8b9      	bhi.n	8000f48 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8000fd4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000fe2:	b005      	add	sp, #20
 8000fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000fe8:	b119      	cbz	r1, 8000ff2 <HAL_SPI_TransmitReceive+0x162>
 8000fea:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000fec:	b292      	uxth	r2, r2
 8000fee:	2a01      	cmp	r2, #1
 8000ff0:	d106      	bne.n	8001000 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8000ff2:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000ff6:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8000ff8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001000:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001004:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001006:	b29b      	uxth	r3, r3
 8001008:	b91b      	cbnz	r3, 8001012 <HAL_SPI_TransmitReceive+0x182>
 800100a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800100c:	b29b      	uxth	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0a0      	beq.n	8000f54 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001012:	f1b9 0f00 	cmp.w	r9, #0
 8001016:	d00f      	beq.n	8001038 <HAL_SPI_TransmitReceive+0x1a8>
 8001018:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800101a:	b29b      	uxth	r3, r3
 800101c:	b163      	cbz	r3, 8001038 <HAL_SPI_TransmitReceive+0x1a8>
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	0791      	lsls	r1, r2, #30
 8001024:	d508      	bpl.n	8001038 <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001026:	782a      	ldrb	r2, [r5, #0]
 8001028:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800102a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800102c:	3b01      	subs	r3, #1
 800102e:	b29b      	uxth	r3, r3
 8001030:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001032:	3501      	adds	r5, #1
        txallowed = 0U;
 8001034:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001038:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800103a:	b29b      	uxth	r3, r3
 800103c:	b163      	cbz	r3, 8001058 <HAL_SPI_TransmitReceive+0x1c8>
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	07d2      	lsls	r2, r2, #31
 8001044:	d508      	bpl.n	8001058 <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 800104a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800104c:	3b01      	subs	r3, #1
 800104e:	b29b      	uxth	r3, r3
 8001050:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001052:	3601      	adds	r6, #1
        txallowed = 1U;
 8001054:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001058:	1c7b      	adds	r3, r7, #1
 800105a:	d0d3      	beq.n	8001004 <HAL_SPI_TransmitReceive+0x174>
 800105c:	f7ff faaa 	bl	80005b4 <HAL_GetTick>
 8001060:	eba0 0008 	sub.w	r0, r0, r8
 8001064:	4287      	cmp	r7, r0
 8001066:	d8cd      	bhi.n	8001004 <HAL_SPI_TransmitReceive+0x174>
 8001068:	e7b4      	b.n	8000fd4 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800106a:	68a3      	ldr	r3, [r4, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1b2      	bne.n	8000fd6 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	9003      	str	r0, [sp, #12]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	9203      	str	r2, [sp, #12]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	9303      	str	r3, [sp, #12]
 800107c:	9b03      	ldr	r3, [sp, #12]
 800107e:	e7aa      	b.n	8000fd6 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8001080:	2002      	movs	r0, #2
 8001082:	e7a8      	b.n	8000fd6 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8001084:	2002      	movs	r0, #2
 8001086:	e7ac      	b.n	8000fe2 <HAL_SPI_TransmitReceive+0x152>

08001088 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <disk_status+0x10>)
 800108a:	181a      	adds	r2, r3, r0
 800108c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001090:	7a10      	ldrb	r0, [r2, #8]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4718      	bx	r3
 8001098:	200002cc 	.word	0x200002cc

0800109c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <disk_initialize+0x1c>)
 800109e:	5c1a      	ldrb	r2, [r3, r0]
 80010a0:	b942      	cbnz	r2, 80010b4 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 80010a2:	2201      	movs	r2, #1
 80010a4:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80010a6:	181a      	adds	r2, r3, r0
 80010a8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80010ac:	7a10      	ldrb	r0, [r2, #8]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4718      	bx	r3
  }
  return stat;
}
 80010b4:	2000      	movs	r0, #0
 80010b6:	4770      	bx	lr
 80010b8:	200002cc 	.word	0x200002cc

080010bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80010bc:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80010be:	4c05      	ldr	r4, [pc, #20]	; (80010d4 <disk_read+0x18>)
 80010c0:	1825      	adds	r5, r4, r0
 80010c2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80010c6:	6860      	ldr	r0, [r4, #4]
 80010c8:	6884      	ldr	r4, [r0, #8]
 80010ca:	7a28      	ldrb	r0, [r5, #8]
 80010cc:	46a4      	mov	ip, r4
  return res;
}
 80010ce:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80010d0:	4760      	bx	ip
 80010d2:	bf00      	nop
 80010d4:	200002cc 	.word	0x200002cc

080010d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80010d8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80010da:	4c05      	ldr	r4, [pc, #20]	; (80010f0 <disk_write+0x18>)
 80010dc:	1825      	adds	r5, r4, r0
 80010de:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80010e2:	6860      	ldr	r0, [r4, #4]
 80010e4:	68c4      	ldr	r4, [r0, #12]
 80010e6:	7a28      	ldrb	r0, [r5, #8]
 80010e8:	46a4      	mov	ip, r4
  return res;
}
 80010ea:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80010ec:	4760      	bx	ip
 80010ee:	bf00      	nop
 80010f0:	200002cc 	.word	0x200002cc

080010f4 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <disk_ioctl+0x18>)
{
 80010f6:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80010f8:	181c      	adds	r4, r3, r0
 80010fa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80010fe:	7a20      	ldrb	r0, [r4, #8]
 8001100:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8001102:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	4718      	bx	r3
 800110a:	bf00      	nop
 800110c:	200002cc 	.word	0x200002cc

08001110 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8001110:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8001112:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8001114:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8001116:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 800111a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800111e:	4770      	bx	lr

08001120 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8001120:	0a0b      	lsrs	r3, r1, #8
 8001122:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001124:	7043      	strb	r3, [r0, #1]
 8001126:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8001128:	0e09      	lsrs	r1, r1, #24
 800112a:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800112c:	70c1      	strb	r1, [r0, #3]
 800112e:	4770      	bx	lr

08001130 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8001130:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8001132:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8001136:	4290      	cmp	r0, r2
 8001138:	d1fb      	bne.n	8001132 <mem_set+0x2>
}
 800113a:	4770      	bx	lr

0800113c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <chk_lock+0x58>)
 800113e:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001140:	2500      	movs	r5, #0
 8001142:	462a      	mov	r2, r5
 8001144:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 8001146:	681e      	ldr	r6, [r3, #0]
 8001148:	b1a6      	cbz	r6, 8001174 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800114a:	6807      	ldr	r7, [r0, #0]
 800114c:	42be      	cmp	r6, r7
 800114e:	d112      	bne.n	8001176 <chk_lock+0x3a>
 8001150:	685f      	ldr	r7, [r3, #4]
 8001152:	6886      	ldr	r6, [r0, #8]
 8001154:	42b7      	cmp	r7, r6
 8001156:	d10e      	bne.n	8001176 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 8001158:	689f      	ldr	r7, [r3, #8]
 800115a:	6946      	ldr	r6, [r0, #20]
 800115c:	42b7      	cmp	r7, r6
 800115e:	d10a      	bne.n	8001176 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001160:	b9b1      	cbnz	r1, 8001190 <chk_lock+0x54>
 8001162:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8001166:	8993      	ldrh	r3, [r2, #12]
 8001168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800116c:	bf14      	ite	ne
 800116e:	2000      	movne	r0, #0
 8001170:	2010      	moveq	r0, #16
 8001172:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8001174:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001176:	3201      	adds	r2, #1
 8001178:	2a02      	cmp	r2, #2
 800117a:	f103 0310 	add.w	r3, r3, #16
 800117e:	d1e2      	bne.n	8001146 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8001180:	b10d      	cbz	r5, 8001186 <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001182:	2000      	movs	r0, #0
 8001184:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8001186:	2902      	cmp	r1, #2
 8001188:	bf0c      	ite	eq
 800118a:	2000      	moveq	r0, #0
 800118c:	2012      	movne	r0, #18
 800118e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001190:	2010      	movs	r0, #16
 8001192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001194:	200000a8 	.word	0x200000a8

08001198 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001198:	4a1c      	ldr	r2, [pc, #112]	; (800120c <inc_lock+0x74>)
 800119a:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800119c:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800119e:	2300      	movs	r3, #0
 80011a0:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 80011a2:	6814      	ldr	r4, [r2, #0]
 80011a4:	42ac      	cmp	r4, r5
 80011a6:	d107      	bne.n	80011b8 <inc_lock+0x20>
 80011a8:	6857      	ldr	r7, [r2, #4]
 80011aa:	6884      	ldr	r4, [r0, #8]
 80011ac:	42a7      	cmp	r7, r4
 80011ae:	d103      	bne.n	80011b8 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 80011b0:	6897      	ldr	r7, [r2, #8]
 80011b2:	6944      	ldr	r4, [r0, #20]
 80011b4:	42a7      	cmp	r7, r4
 80011b6:	d01d      	beq.n	80011f4 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80011b8:	3301      	adds	r3, #1
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	f102 0210 	add.w	r2, r2, #16
 80011c0:	d1ef      	bne.n	80011a2 <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80011c2:	6833      	ldr	r3, [r6, #0]
 80011c4:	b113      	cbz	r3, 80011cc <inc_lock+0x34>
 80011c6:	6933      	ldr	r3, [r6, #16]
 80011c8:	b9eb      	cbnz	r3, 8001206 <inc_lock+0x6e>
 80011ca:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 80011cc:	011c      	lsls	r4, r3, #4
 80011ce:	1932      	adds	r2, r6, r4
 80011d0:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 80011d2:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 80011d4:	6940      	ldr	r0, [r0, #20]
 80011d6:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 80011d8:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 80011da:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 80011dc:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80011de:	b979      	cbnz	r1, 8001200 <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80011e0:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 80011e4:	8992      	ldrh	r2, [r2, #12]
 80011e6:	3201      	adds	r2, #1
 80011e8:	b292      	uxth	r2, r2
 80011ea:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 80011ee:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80011f0:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 80011f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80011f4:	2900      	cmp	r1, #0
 80011f6:	d0f3      	beq.n	80011e0 <inc_lock+0x48>
 80011f8:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 80011fc:	8992      	ldrh	r2, [r2, #12]
 80011fe:	b912      	cbnz	r2, 8001206 <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8001200:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001204:	e7f1      	b.n	80011ea <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8001206:	2000      	movs	r0, #0
 8001208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800120a:	bf00      	nop
 800120c:	200000a8 	.word	0x200000a8

08001210 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8001210:	3801      	subs	r0, #1
 8001212:	2801      	cmp	r0, #1
 8001214:	d80e      	bhi.n	8001234 <dec_lock+0x24>
		n = Files[i].ctr;
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <dec_lock+0x2c>)
 8001218:	0103      	lsls	r3, r0, #4
 800121a:	18d1      	adds	r1, r2, r3
 800121c:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 800121e:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8001222:	b280      	uxth	r0, r0
 8001224:	b108      	cbz	r0, 800122a <dec_lock+0x1a>
 8001226:	1e48      	subs	r0, r1, #1
 8001228:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 800122a:	18d1      	adds	r1, r2, r3
 800122c:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800122e:	b918      	cbnz	r0, 8001238 <dec_lock+0x28>
 8001230:	50d0      	str	r0, [r2, r3]
 8001232:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8001234:	2002      	movs	r0, #2
 8001236:	4770      	bx	lr
		res = FR_OK;
 8001238:	2000      	movs	r0, #0
	}
	return res;
}
 800123a:	4770      	bx	lr
 800123c:	200000a8 	.word	0x200000a8

08001240 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001240:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 8001242:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001244:	3b02      	subs	r3, #2
 8001246:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8001248:	bf3d      	ittte	cc
 800124a:	8943      	ldrhcc	r3, [r0, #10]
 800124c:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
 800124e:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001252:	2000      	movcs	r0, #0
}
 8001254:	4770      	bx	lr

08001256 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8001256:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8001258:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800125a:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800125c:	0a49      	lsrs	r1, r1, #9
 800125e:	8952      	ldrh	r2, [r2, #10]
 8001260:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8001264:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8001266:	b130      	cbz	r0, 8001276 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8001268:	4281      	cmp	r1, r0
 800126a:	d302      	bcc.n	8001272 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 800126c:	1a09      	subs	r1, r1, r0
 800126e:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8001270:	e7f8      	b.n	8001264 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8001272:	6858      	ldr	r0, [r3, #4]
 8001274:	4408      	add	r0, r1
}
 8001276:	4770      	bx	lr

08001278 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8001278:	4602      	mov	r2, r0
 800127a:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 800127e:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8001280:	01c3      	lsls	r3, r0, #7
 8001282:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8001286:	f812 0b01 	ldrb.w	r0, [r2], #1
 800128a:	fa50 f383 	uxtab	r3, r0, r3
	} while (--n);
 800128e:	428a      	cmp	r2, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8001290:	b2d8      	uxtb	r0, r3
	} while (--n);
 8001292:	d1f5      	bne.n	8001280 <sum_sfn+0x8>
	return sum;
}
 8001294:	4770      	bx	lr

08001296 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8001296:	6802      	ldr	r2, [r0, #0]
{
 8001298:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 800129a:	b152      	cbz	r2, 80012b2 <get_ldnumber+0x1c>
 800129c:	4611      	mov	r1, r2
 800129e:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80012a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80012a4:	2c1f      	cmp	r4, #31
 80012a6:	d90c      	bls.n	80012c2 <get_ldnumber+0x2c>
 80012a8:	2c3a      	cmp	r4, #58	; 0x3a
 80012aa:	d1f8      	bne.n	800129e <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 80012ac:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80012ae:	428b      	cmp	r3, r1
 80012b0:	d002      	beq.n	80012b8 <get_ldnumber+0x22>
	int vol = -1;
 80012b2:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 80012b6:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	2a30      	cmp	r2, #48	; 0x30
 80012bc:	d1f9      	bne.n	80012b2 <get_ldnumber+0x1c>
					*path = ++tt;
 80012be:	3301      	adds	r3, #1
 80012c0:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 80012c2:	2000      	movs	r0, #0
 80012c4:	bd10      	pop	{r4, pc}

080012c6 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80012c6:	b538      	push	{r3, r4, r5, lr}
 80012c8:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 80012ca:	4604      	mov	r4, r0
 80012cc:	b918      	cbnz	r0, 80012d6 <validate+0x10>
		*fs = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 80012d2:	2009      	movs	r0, #9
 80012d4:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 80012d6:	6803      	ldr	r3, [r0, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f8      	beq.n	80012ce <validate+0x8>
 80012dc:	781a      	ldrb	r2, [r3, #0]
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d0f5      	beq.n	80012ce <validate+0x8>
 80012e2:	88d9      	ldrh	r1, [r3, #6]
 80012e4:	8882      	ldrh	r2, [r0, #4]
 80012e6:	4291      	cmp	r1, r2
 80012e8:	d1f1      	bne.n	80012ce <validate+0x8>
 80012ea:	7858      	ldrb	r0, [r3, #1]
 80012ec:	f7ff fecc 	bl	8001088 <disk_status>
 80012f0:	f010 0001 	ands.w	r0, r0, #1
 80012f4:	d1eb      	bne.n	80012ce <validate+0x8>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 80012f6:	6823      	ldr	r3, [r4, #0]
 80012f8:	602b      	str	r3, [r5, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 80012fa:	bd38      	pop	{r3, r4, r5, pc}

080012fc <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80012fc:	3801      	subs	r0, #1
 80012fe:	440a      	add	r2, r1
			*d++ = *s++;
 8001300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001304:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8001308:	4291      	cmp	r1, r2
 800130a:	d1f9      	bne.n	8001300 <mem_cpy.part.0+0x4>
}
 800130c:	4770      	bx	lr

0800130e <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 800130e:	7eca      	ldrb	r2, [r1, #27]
 8001310:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8001312:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8001314:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8001318:	bf01      	itttt	eq
 800131a:	7d48      	ldrbeq	r0, [r1, #21]
 800131c:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800131e:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8001322:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8001326:	4618      	mov	r0, r3
 8001328:	4770      	bx	lr

0800132a <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 800132a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800132e:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8001330:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8001332:	7803      	ldrb	r3, [r0, #0]
 8001334:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8001336:	bf01      	itttt	eq
 8001338:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800133a:	750a      	strbeq	r2, [r1, #20]
 800133c:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800133e:	754a      	strbeq	r2, [r1, #21]
 8001340:	4770      	bx	lr

08001342 <sync_window.part.3>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8001342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8001344:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8001346:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800134a:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800134c:	2301      	movs	r3, #1
 800134e:	462a      	mov	r2, r5
 8001350:	4639      	mov	r1, r7
 8001352:	7840      	ldrb	r0, [r0, #1]
 8001354:	f7ff fec0 	bl	80010d8 <disk_write>
 8001358:	b9a0      	cbnz	r0, 8001384 <sync_window.part.3+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800135a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800135c:	69e2      	ldr	r2, [r4, #28]
			fs->wflag = 0;
 800135e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8001360:	1aeb      	subs	r3, r5, r3
 8001362:	4293      	cmp	r3, r2
 8001364:	d301      	bcc.n	800136a <sync_window.part.3+0x28>
	FRESULT res = FR_OK;
 8001366:	2000      	movs	r0, #0
 8001368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800136a:	78a6      	ldrb	r6, [r4, #2]
 800136c:	2e01      	cmp	r6, #1
 800136e:	d9fa      	bls.n	8001366 <sync_window.part.3+0x24>
					wsect += fs->fsize;
 8001370:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8001372:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8001374:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8001376:	462a      	mov	r2, r5
 8001378:	2301      	movs	r3, #1
 800137a:	4639      	mov	r1, r7
 800137c:	f7ff feac 	bl	80010d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001380:	3e01      	subs	r6, #1
 8001382:	e7f3      	b.n	800136c <sync_window.part.3+0x2a>
			res = FR_DISK_ERR;
 8001384:	2001      	movs	r0, #1
}
 8001386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001388 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8001388:	78c3      	ldrb	r3, [r0, #3]
 800138a:	b10b      	cbz	r3, 8001390 <sync_window+0x8>
 800138c:	f7ff bfd9 	b.w	8001342 <sync_window.part.3>
}
 8001390:	4618      	mov	r0, r3
 8001392:	4770      	bx	lr

08001394 <sync_fs>:
{
 8001394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001396:	4604      	mov	r4, r0
	res = sync_window(fs);
 8001398:	f7ff fff6 	bl	8001388 <sync_window>
 800139c:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800139e:	2800      	cmp	r0, #0
 80013a0:	d142      	bne.n	8001428 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80013a2:	7823      	ldrb	r3, [r4, #0]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d137      	bne.n	8001418 <sync_fs+0x84>
 80013a8:	7927      	ldrb	r7, [r4, #4]
 80013aa:	2f01      	cmp	r7, #1
 80013ac:	d134      	bne.n	8001418 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 80013ae:	f104 0634 	add.w	r6, r4, #52	; 0x34
 80013b2:	4601      	mov	r1, r0
 80013b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b8:	4630      	mov	r0, r6
 80013ba:	f7ff feb9 	bl	8001130 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 80013be:	2355      	movs	r3, #85	; 0x55
 80013c0:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 80013c4:	23aa      	movs	r3, #170	; 0xaa
 80013c6:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 80013ca:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 80013cc:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 80013ce:	2172      	movs	r1, #114	; 0x72
 80013d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 80013d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 80013d8:	2361      	movs	r3, #97	; 0x61
 80013da:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 80013de:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 80013e2:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val;
 80013e6:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 80013ea:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 80013ee:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80013f2:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80013f6:	6961      	ldr	r1, [r4, #20]
 80013f8:	f7ff fe92 	bl	8001120 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80013fc:	6921      	ldr	r1, [r4, #16]
 80013fe:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8001402:	f7ff fe8d 	bl	8001120 <st_dword>
			fs->winsect = fs->volbase + 1;
 8001406:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8001408:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800140a:	3201      	adds	r2, #1
 800140c:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800140e:	463b      	mov	r3, r7
 8001410:	4631      	mov	r1, r6
 8001412:	f7ff fe61 	bl	80010d8 <disk_write>
			fs->fsi_flag = 0;
 8001416:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8001418:	2200      	movs	r2, #0
 800141a:	4611      	mov	r1, r2
 800141c:	7860      	ldrb	r0, [r4, #1]
 800141e:	f7ff fe69 	bl	80010f4 <disk_ioctl>
 8001422:	3000      	adds	r0, #0
 8001424:	bf18      	it	ne
 8001426:	2001      	movne	r0, #1
}
 8001428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800142a <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 800142a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800142c:	428b      	cmp	r3, r1
{
 800142e:	b570      	push	{r4, r5, r6, lr}
 8001430:	4606      	mov	r6, r0
 8001432:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8001434:	d012      	beq.n	800145c <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8001436:	f7ff ffa7 	bl	8001388 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800143a:	4604      	mov	r4, r0
 800143c:	b960      	cbnz	r0, 8001458 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800143e:	462a      	mov	r2, r5
 8001440:	2301      	movs	r3, #1
 8001442:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8001446:	7870      	ldrb	r0, [r6, #1]
 8001448:	f7ff fe38 	bl	80010bc <disk_read>
 800144c:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 800144e:	bf1c      	itt	ne
 8001450:	f04f 35ff 	movne.w	r5, #4294967295
 8001454:	2401      	movne	r4, #1
			fs->winsect = sector;
 8001456:	6335      	str	r5, [r6, #48]	; 0x30
}
 8001458:	4620      	mov	r0, r4
 800145a:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 800145c:	2400      	movs	r4, #0
 800145e:	e7fb      	b.n	8001458 <move_window+0x2e>

08001460 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8001460:	2300      	movs	r3, #0
{
 8001462:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8001464:	70c3      	strb	r3, [r0, #3]
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	6303      	str	r3, [r0, #48]	; 0x30
{
 800146c:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800146e:	f7ff ffdc 	bl	800142a <move_window>
 8001472:	bb30      	cbnz	r0, 80014c2 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8001474:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8001478:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 800147c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8001480:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8001484:	4293      	cmp	r3, r2
 8001486:	d11e      	bne.n	80014c6 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8001488:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800148c:	2be9      	cmp	r3, #233	; 0xe9
 800148e:	d005      	beq.n	800149c <check_fs+0x3c>
 8001490:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <check_fs+0x74>)
 8001494:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8001498:	4293      	cmp	r3, r2
 800149a:	d116      	bne.n	80014ca <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800149c:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 80014a0:	f7ff fe36 	bl	8001110 <ld_dword>
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <check_fs+0x78>)
 80014a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80014aa:	4298      	cmp	r0, r3
 80014ac:	d00f      	beq.n	80014ce <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80014ae:	f104 0086 	add.w	r0, r4, #134	; 0x86
 80014b2:	f7ff fe2d 	bl	8001110 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <check_fs+0x7c>)
 80014b8:	4298      	cmp	r0, r3
 80014ba:	bf14      	ite	ne
 80014bc:	2002      	movne	r0, #2
 80014be:	2000      	moveq	r0, #0
 80014c0:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80014c2:	2004      	movs	r0, #4
 80014c4:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80014c6:	2003      	movs	r0, #3
 80014c8:	bd10      	pop	{r4, pc}
	return 2;
 80014ca:	2002      	movs	r0, #2
 80014cc:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80014ce:	2000      	movs	r0, #0
}
 80014d0:	bd10      	pop	{r4, pc}
 80014d2:	bf00      	nop
 80014d4:	009000eb 	.word	0x009000eb
 80014d8:	00544146 	.word	0x00544146
 80014dc:	33544146 	.word	0x33544146

080014e0 <find_volume>:
{
 80014e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 80014e4:	2300      	movs	r3, #0
{
 80014e6:	b085      	sub	sp, #20
	*rfs = 0;
 80014e8:	600b      	str	r3, [r1, #0]
{
 80014ea:	460f      	mov	r7, r1
 80014ec:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80014ee:	f7ff fed2 	bl	8001296 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80014f2:	1e06      	subs	r6, r0, #0
 80014f4:	f2c0 8142 	blt.w	800177c <find_volume+0x29c>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80014f8:	4ba4      	ldr	r3, [pc, #656]	; (800178c <find_volume+0x2ac>)
 80014fa:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80014fe:	2c00      	cmp	r4, #0
 8001500:	f000 813e 	beq.w	8001780 <find_volume+0x2a0>
	*rfs = fs;							/* Return pointer to the file system object */
 8001504:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8001506:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8001508:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800150c:	b173      	cbz	r3, 800152c <find_volume+0x4c>
		stat = disk_status(fs->drv);
 800150e:	7860      	ldrb	r0, [r4, #1]
 8001510:	f7ff fdba 	bl	8001088 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8001514:	07c1      	lsls	r1, r0, #31
 8001516:	d409      	bmi.n	800152c <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8001518:	2d00      	cmp	r5, #0
 800151a:	f000 8133 	beq.w	8001784 <find_volume+0x2a4>
 800151e:	f010 0004 	ands.w	r0, r0, #4
 8001522:	d000      	beq.n	8001526 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8001524:	200a      	movs	r0, #10
}
 8001526:	b005      	add	sp, #20
 8001528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800152c:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800152e:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8001530:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8001532:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8001534:	f7ff fdb2 	bl	800109c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8001538:	07c2      	lsls	r2, r0, #31
 800153a:	f100 8125 	bmi.w	8001788 <find_volume+0x2a8>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800153e:	b10d      	cbz	r5, 8001544 <find_volume+0x64>
 8001540:	0743      	lsls	r3, r0, #29
 8001542:	d4ef      	bmi.n	8001524 <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8001544:	2100      	movs	r1, #0
 8001546:	4620      	mov	r0, r4
 8001548:	f7ff ff8a 	bl	8001460 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800154c:	2802      	cmp	r0, #2
 800154e:	f040 80f9 	bne.w	8001744 <find_volume+0x264>
 8001552:	f504 75fd 	add.w	r5, r4, #506	; 0x1fa
 8001556:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8001558:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 800155c:	b110      	cbz	r0, 8001564 <find_volume+0x84>
 800155e:	4628      	mov	r0, r5
 8001560:	f7ff fdd6 	bl	8001110 <ld_dword>
 8001564:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8001568:	3101      	adds	r1, #1
 800156a:	2904      	cmp	r1, #4
 800156c:	f105 0510 	add.w	r5, r5, #16
 8001570:	d1f2      	bne.n	8001558 <find_volume+0x78>
 8001572:	2500      	movs	r5, #0
			bsect = br[i];
 8001574:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8001578:	2e00      	cmp	r6, #0
 800157a:	f000 80da 	beq.w	8001732 <find_volume+0x252>
 800157e:	4631      	mov	r1, r6
 8001580:	4620      	mov	r0, r4
 8001582:	f7ff ff6d 	bl	8001460 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8001586:	2801      	cmp	r0, #1
 8001588:	f200 80d4 	bhi.w	8001734 <find_volume+0x254>
	rv = rv << 8 | ptr[0];
 800158c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8001590:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8001594:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8001598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800159c:	f040 80d6 	bne.w	800174c <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 80015a0:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80015a4:	f894 504a 	ldrb.w	r5, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80015a8:	ea55 2503 	orrs.w	r5, r5, r3, lsl #8
 80015ac:	d104      	bne.n	80015b8 <find_volume+0xd8>
 80015ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015b2:	f7ff fdad 	bl	8001110 <ld_dword>
 80015b6:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80015b8:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
		fs->fsize = fasize;
 80015bc:	61e5      	str	r5, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80015be:	f109 33ff 	add.w	r3, r9, #4294967295
 80015c2:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80015c4:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80015c8:	f200 80c0 	bhi.w	800174c <find_volume+0x26c>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80015cc:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
 80015d0:	b2bb      	uxth	r3, r7
 80015d2:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80b9 	beq.w	800174c <find_volume+0x26c>
 80015da:	1e7b      	subs	r3, r7, #1
 80015dc:	423b      	tst	r3, r7
 80015de:	f040 80b5 	bne.w	800174c <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 80015e2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80015e6:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 80015ea:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80015ee:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80015f2:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80015f6:	f040 80a9 	bne.w	800174c <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 80015fa:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 80015fe:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8001602:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8001606:	d103      	bne.n	8001610 <find_volume+0x130>
 8001608:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800160c:	f7ff fd80 	bl	8001110 <ld_dword>
	rv = rv << 8 | ptr[0];
 8001610:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001614:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8001618:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 800161c:	f000 8096 	beq.w	800174c <find_volume+0x26c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8001620:	fb05 f309 	mul.w	r3, r5, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8001624:	eb02 1e18 	add.w	lr, r2, r8, lsr #4
 8001628:	449e      	add	lr, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800162a:	4570      	cmp	r0, lr
 800162c:	f0c0 808e 	bcc.w	800174c <find_volume+0x26c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8001630:	eba0 010e 	sub.w	r1, r0, lr
 8001634:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8001638:	2900      	cmp	r1, #0
 800163a:	f000 8087 	beq.w	800174c <find_volume+0x26c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800163e:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8001642:	4281      	cmp	r1, r0
 8001644:	f200 8086 	bhi.w	8001754 <find_volume+0x274>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8001648:	f640 77f5 	movw	r7, #4085	; 0xff5
 800164c:	42b9      	cmp	r1, r7
 800164e:	bf8c      	ite	hi
 8001650:	2702      	movhi	r7, #2
 8001652:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8001654:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8001656:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8001658:	eb06 000e 	add.w	r0, r6, lr
		if (fmt == FS_FAT32) {
 800165c:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800165e:	61a1      	str	r1, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8001660:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8001662:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8001664:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8001666:	d177      	bne.n	8001758 <find_volume+0x278>
	rv = rv << 8 | ptr[0];
 8001668:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 800166c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8001670:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8001674:	d16a      	bne.n	800174c <find_volume+0x26c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8001676:	f1b8 0f00 	cmp.w	r8, #0
 800167a:	d167      	bne.n	800174c <find_volume+0x26c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800167c:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8001680:	f7ff fd46 	bl	8001110 <ld_dword>
 8001684:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8001686:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8001688:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 800168c:	ebb5 2f51 	cmp.w	r5, r1, lsr #9
 8001690:	d35c      	bcc.n	800174c <find_volume+0x26c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	6163      	str	r3, [r4, #20]
 8001698:	6123      	str	r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800169a:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 800169c:	f04f 0380 	mov.w	r3, #128	; 0x80
 80016a0:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80016a2:	d12f      	bne.n	8001704 <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 80016a4:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 80016a8:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 80016ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d127      	bne.n	8001704 <find_volume+0x224>
			&& move_window(fs, bsect + 1) == FR_OK)
 80016b4:	1c71      	adds	r1, r6, #1
 80016b6:	4620      	mov	r0, r4
 80016b8:	f7ff feb7 	bl	800142a <move_window>
 80016bc:	bb10      	cbnz	r0, 8001704 <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 80016be:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 80016c2:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 80016c6:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 80016c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80016cc:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d117      	bne.n	8001704 <find_volume+0x224>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80016d4:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80016d8:	f7ff fd1a 	bl	8001110 <ld_dword>
 80016dc:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <find_volume+0x2b0>)
 80016de:	4298      	cmp	r0, r3
 80016e0:	d110      	bne.n	8001704 <find_volume+0x224>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80016e2:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80016e6:	f7ff fd13 	bl	8001110 <ld_dword>
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <find_volume+0x2b4>)
 80016ec:	4298      	cmp	r0, r3
 80016ee:	d109      	bne.n	8001704 <find_volume+0x224>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80016f0:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80016f4:	f7ff fd0c 	bl	8001110 <ld_dword>
 80016f8:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80016fa:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80016fe:	f7ff fd07 	bl	8001110 <ld_dword>
 8001702:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8001704:	4a24      	ldr	r2, [pc, #144]	; (8001798 <find_volume+0x2b8>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8001706:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8001708:	8813      	ldrh	r3, [r2, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	b29b      	uxth	r3, r3
 800170e:	8013      	strh	r3, [r2, #0]
 8001710:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <find_volume+0x2bc>)
 8001714:	60e3      	str	r3, [r4, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8001716:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <find_volume+0x2c0>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4294      	cmp	r4, r2
 800171c:	bf04      	itt	eq
 800171e:	2200      	moveq	r2, #0
 8001720:	601a      	streq	r2, [r3, #0]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	4294      	cmp	r4, r2
 8001726:	f04f 0000 	mov.w	r0, #0
 800172a:	f47f aefc 	bne.w	8001526 <find_volume+0x46>
 800172e:	6118      	str	r0, [r3, #16]
 8001730:	e6f9      	b.n	8001526 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8001732:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8001734:	3501      	adds	r5, #1
 8001736:	2d04      	cmp	r5, #4
 8001738:	f47f af1c 	bne.w	8001574 <find_volume+0x94>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800173c:	2804      	cmp	r0, #4
 800173e:	d105      	bne.n	800174c <find_volume+0x26c>
 8001740:	2001      	movs	r0, #1
 8001742:	e6f0      	b.n	8001526 <find_volume+0x46>
 8001744:	2804      	cmp	r0, #4
 8001746:	d0fb      	beq.n	8001740 <find_volume+0x260>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8001748:	2801      	cmp	r0, #1
 800174a:	d901      	bls.n	8001750 <find_volume+0x270>
 800174c:	200d      	movs	r0, #13
 800174e:	e6ea      	b.n	8001526 <find_volume+0x46>
	bsect = 0;
 8001750:	2600      	movs	r6, #0
 8001752:	e71b      	b.n	800158c <find_volume+0xac>
		fmt = FS_FAT32;
 8001754:	2703      	movs	r7, #3
 8001756:	e77d      	b.n	8001654 <find_volume+0x174>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8001758:	f1b8 0f00 	cmp.w	r8, #0
 800175c:	d0f6      	beq.n	800174c <find_volume+0x26c>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800175e:	2f02      	cmp	r7, #2
 8001760:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8001764:	bf18      	it	ne
 8001766:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8001768:	4413      	add	r3, r2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800176a:	bf18      	it	ne
 800176c:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8001770:	62a3      	str	r3, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8001772:	bf0c      	ite	eq
 8001774:	4601      	moveq	r1, r0
 8001776:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 800177a:	e785      	b.n	8001688 <find_volume+0x1a8>
	if (vol < 0) return FR_INVALID_DRIVE;
 800177c:	200b      	movs	r0, #11
 800177e:	e6d2      	b.n	8001526 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8001780:	200c      	movs	r0, #12
 8001782:	e6d0      	b.n	8001526 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8001784:	4628      	mov	r0, r5
 8001786:	e6ce      	b.n	8001526 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8001788:	2003      	movs	r0, #3
 800178a:	e6cc      	b.n	8001526 <find_volume+0x46>
 800178c:	200000a4 	.word	0x200000a4
 8001790:	41615252 	.word	0x41615252
 8001794:	61417272 	.word	0x61417272
 8001798:	200000c8 	.word	0x200000c8
 800179c:	200000ca 	.word	0x200000ca
 80017a0:	200000a8 	.word	0x200000a8

080017a4 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80017a4:	2901      	cmp	r1, #1
{
 80017a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017aa:	4605      	mov	r5, r0
 80017ac:	460c      	mov	r4, r1
 80017ae:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80017b0:	d972      	bls.n	8001898 <put_fat+0xf4>
 80017b2:	6983      	ldr	r3, [r0, #24]
 80017b4:	4299      	cmp	r1, r3
 80017b6:	d26f      	bcs.n	8001898 <put_fat+0xf4>
		switch (fs->fs_type) {
 80017b8:	7803      	ldrb	r3, [r0, #0]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d03f      	beq.n	800183e <put_fat+0x9a>
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d050      	beq.n	8001864 <put_fat+0xc0>
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d168      	bne.n	8001898 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;
 80017c6:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80017ca:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80017cc:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80017d0:	f7ff fe2b 	bl	800142a <move_window>
 80017d4:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 80017d6:	bb38      	cbnz	r0, 8001828 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 80017d8:	f105 0934 	add.w	r9, r5, #52	; 0x34
 80017dc:	f108 0a01 	add.w	sl, r8, #1
 80017e0:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80017e4:	f014 0401 	ands.w	r4, r4, #1
 80017e8:	bf1f      	itttt	ne
 80017ea:	f819 3008 	ldrbne.w	r3, [r9, r8]
 80017ee:	f003 020f 	andne.w	r2, r3, #15
 80017f2:	013b      	lslne	r3, r7, #4
 80017f4:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80017f8:	bf14      	ite	ne
 80017fa:	4313      	orrne	r3, r2
 80017fc:	b2fb      	uxtbeq	r3, r7
 80017fe:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001802:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001808:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800180c:	4628      	mov	r0, r5
 800180e:	f7ff fe0c 	bl	800142a <move_window>
			if (res != FR_OK) break;
 8001812:	4606      	mov	r6, r0
 8001814:	b940      	cbnz	r0, 8001828 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 8001816:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800181a:	b144      	cbz	r4, 800182e <put_fat+0x8a>
 800181c:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8001820:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8001824:	2301      	movs	r3, #1
 8001826:	70eb      	strb	r3, [r5, #3]
}
 8001828:	4630      	mov	r0, r6
 800182a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800182e:	f819 300a 	ldrb.w	r3, [r9, sl]
 8001832:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8001836:	f023 030f 	bic.w	r3, r3, #15
 800183a:	431f      	orrs	r7, r3
 800183c:	e7f0      	b.n	8001820 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800183e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001840:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8001844:	f7ff fdf1 	bl	800142a <move_window>
			if (res != FR_OK) break;
 8001848:	4606      	mov	r6, r0
 800184a:	2800      	cmp	r0, #0
 800184c:	d1ec      	bne.n	8001828 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800184e:	0064      	lsls	r4, r4, #1
 8001850:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8001854:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8001858:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800185a:	551f      	strb	r7, [r3, r4]
 800185c:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8001860:	7057      	strb	r7, [r2, #1]
 8001862:	e7df      	b.n	8001824 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8001864:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001866:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800186a:	f7ff fdde 	bl	800142a <move_window>
			if (res != FR_OK) break;
 800186e:	4606      	mov	r6, r0
 8001870:	2800      	cmp	r0, #0
 8001872:	d1d9      	bne.n	8001828 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8001874:	00a4      	lsls	r4, r4, #2
 8001876:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800187a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800187e:	441c      	add	r4, r3
 8001880:	4620      	mov	r0, r4
 8001882:	f7ff fc45 	bl	8001110 <ld_dword>
 8001886:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 800188a:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800188e:	4339      	orrs	r1, r7
 8001890:	4620      	mov	r0, r4
 8001892:	f7ff fc45 	bl	8001120 <st_dword>
 8001896:	e7c5      	b.n	8001824 <put_fat+0x80>
	FRESULT res = FR_INT_ERR;
 8001898:	2602      	movs	r6, #2
 800189a:	e7c5      	b.n	8001828 <put_fat+0x84>

0800189c <get_fat.isra.7>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800189c:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800189e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a0:	4605      	mov	r5, r0
 80018a2:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80018a4:	d952      	bls.n	800194c <get_fat.isra.7+0xb0>
 80018a6:	6983      	ldr	r3, [r0, #24]
 80018a8:	4299      	cmp	r1, r3
 80018aa:	d24f      	bcs.n	800194c <get_fat.isra.7+0xb0>
		switch (fs->fs_type) {
 80018ac:	7803      	ldrb	r3, [r0, #0]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d029      	beq.n	8001906 <get_fat.isra.7+0x6a>
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d038      	beq.n	8001928 <get_fat.isra.7+0x8c>
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d148      	bne.n	800194c <get_fat.isra.7+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 80018ba:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80018be:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80018c0:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 80018c4:	f7ff fdb1 	bl	800142a <move_window>
 80018c8:	b110      	cbz	r0, 80018d0 <get_fat.isra.7+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80018ca:	f04f 30ff 	mov.w	r0, #4294967295
 80018ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80018d0:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80018d2:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 80018d4:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80018d8:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80018da:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80018de:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 80018e0:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80018e4:	f7ff fda1 	bl	800142a <move_window>
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d1ee      	bne.n	80018ca <get_fat.isra.7+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80018ec:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80018f0:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80018f2:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80018f4:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 80018f8:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80018fc:	bf4c      	ite	mi
 80018fe:	0900      	lsrmi	r0, r0, #4
 8001900:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8001904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001906:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001908:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800190c:	f7ff fd8d 	bl	800142a <move_window>
 8001910:	2800      	cmp	r0, #0
 8001912:	d1da      	bne.n	80018ca <get_fat.isra.7+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8001914:	0064      	lsls	r4, r4, #1
 8001916:	3534      	adds	r5, #52	; 0x34
 8001918:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800191c:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 800191e:	5d28      	ldrb	r0, [r5, r4]
 8001920:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8001922:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001928:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800192a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800192e:	f7ff fd7c 	bl	800142a <move_window>
 8001932:	2800      	cmp	r0, #0
 8001934:	d1c9      	bne.n	80018ca <get_fat.isra.7+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8001936:	00a4      	lsls	r4, r4, #2
 8001938:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800193c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8001940:	4420      	add	r0, r4
 8001942:	f7ff fbe5 	bl	8001110 <ld_dword>
 8001946:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800194a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 800194c:	2001      	movs	r0, #1
}
 800194e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001950 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8001950:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 8001954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001956:	4606      	mov	r6, r0
 8001958:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800195a:	d301      	bcc.n	8001960 <dir_sdi+0x10>
		return FR_INT_ERR;
 800195c:	2002      	movs	r0, #2
 800195e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8001960:	06ca      	lsls	r2, r1, #27
 8001962:	d1fb      	bne.n	800195c <dir_sdi+0xc>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8001964:	6882      	ldr	r2, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8001966:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8001968:	6171      	str	r1, [r6, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800196a:	b9c2      	cbnz	r2, 800199e <dir_sdi+0x4e>
 800196c:	7823      	ldrb	r3, [r4, #0]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <dir_sdi+0x26>
		clst = fs->dirbase;
 8001972:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8001974:	b9a3      	cbnz	r3, 80019a0 <dir_sdi+0x50>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8001976:	8923      	ldrh	r3, [r4, #8]
 8001978:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800197c:	d9ee      	bls.n	800195c <dir_sdi+0xc>
		dp->sect = fs->dirbase;
 800197e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001980:	61f3      	str	r3, [r6, #28]
	if (!dp->sect) return FR_INT_ERR;
 8001982:	69f3      	ldr	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8001984:	61b2      	str	r2, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0e8      	beq.n	800195c <dir_sdi+0xc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800198a:	eb03 2355 	add.w	r3, r3, r5, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800198e:	3434      	adds	r4, #52	; 0x34
 8001990:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8001994:	442c      	add	r4, r5
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8001996:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8001998:	6234      	str	r4, [r6, #32]
	return FR_OK;
 800199a:	2000      	movs	r0, #0
 800199c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800199e:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80019a0:	8967      	ldrh	r7, [r4, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 80019a2:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80019a4:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 80019a6:	42bd      	cmp	r5, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80019a8:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 80019aa:	d204      	bcs.n	80019b6 <dir_sdi+0x66>
		dp->sect = clust2sect(fs, clst);
 80019ac:	4620      	mov	r0, r4
 80019ae:	f7ff fc47 	bl	8001240 <clust2sect>
 80019b2:	61f0      	str	r0, [r6, #28]
 80019b4:	e7e5      	b.n	8001982 <dir_sdi+0x32>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80019b6:	6830      	ldr	r0, [r6, #0]
 80019b8:	f7ff ff70 	bl	800189c <get_fat.isra.7>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80019bc:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80019be:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80019c0:	d006      	beq.n	80019d0 <dir_sdi+0x80>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80019c2:	2801      	cmp	r0, #1
 80019c4:	d9ca      	bls.n	800195c <dir_sdi+0xc>
 80019c6:	69a3      	ldr	r3, [r4, #24]
 80019c8:	4298      	cmp	r0, r3
 80019ca:	d2c7      	bcs.n	800195c <dir_sdi+0xc>
			ofs -= csz;
 80019cc:	1bed      	subs	r5, r5, r7
 80019ce:	e7ea      	b.n	80019a6 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80019d0:	2001      	movs	r0, #1
}
 80019d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019d4 <create_chain>:
{
 80019d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019d8:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 80019da:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80019dc:	460f      	mov	r7, r1
 80019de:	b971      	cbnz	r1, 80019fe <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80019e0:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80019e2:	b1f6      	cbz	r6, 8001a22 <create_chain+0x4e>
 80019e4:	69ab      	ldr	r3, [r5, #24]
 80019e6:	429e      	cmp	r6, r3
 80019e8:	bf28      	it	cs
 80019ea:	2601      	movcs	r6, #1
 80019ec:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80019ee:	69ab      	ldr	r3, [r5, #24]
			ncl++;							/* Next cluster */
 80019f0:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80019f2:	429c      	cmp	r4, r3
 80019f4:	d318      	bcc.n	8001a28 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 80019f6:	2e01      	cmp	r6, #1
 80019f8:	d815      	bhi.n	8001a26 <create_chain+0x52>
 80019fa:	2400      	movs	r4, #0
 80019fc:	e009      	b.n	8001a12 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80019fe:	4628      	mov	r0, r5
 8001a00:	f7ff ff4c 	bl	800189c <get_fat.isra.7>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8001a04:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8001a06:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8001a08:	d937      	bls.n	8001a7a <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8001a0a:	1c43      	adds	r3, r0, #1
 8001a0c:	d104      	bne.n	8001a18 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8001a0e:	f04f 34ff 	mov.w	r4, #4294967295
}
 8001a12:	4620      	mov	r0, r4
 8001a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8001a18:	69ab      	ldr	r3, [r5, #24]
 8001a1a:	4298      	cmp	r0, r3
 8001a1c:	d3f9      	bcc.n	8001a12 <create_chain+0x3e>
 8001a1e:	463e      	mov	r6, r7
 8001a20:	e7e4      	b.n	80019ec <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8001a22:	2601      	movs	r6, #1
 8001a24:	e7e2      	b.n	80019ec <create_chain+0x18>
				ncl = 2;
 8001a26:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8001a28:	4621      	mov	r1, r4
 8001a2a:	f8d8 0000 	ldr.w	r0, [r8]
 8001a2e:	f7ff ff35 	bl	800189c <get_fat.isra.7>
			if (cs == 0) break;				/* Found a free cluster */
 8001a32:	b130      	cbz	r0, 8001a42 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8001a34:	2801      	cmp	r0, #1
 8001a36:	d020      	beq.n	8001a7a <create_chain+0xa6>
 8001a38:	3001      	adds	r0, #1
 8001a3a:	d0e8      	beq.n	8001a0e <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8001a3c:	42b4      	cmp	r4, r6
 8001a3e:	d1d6      	bne.n	80019ee <create_chain+0x1a>
 8001a40:	e7db      	b.n	80019fa <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8001a42:	f04f 32ff 	mov.w	r2, #4294967295
 8001a46:	4621      	mov	r1, r4
 8001a48:	4628      	mov	r0, r5
 8001a4a:	f7ff feab 	bl	80017a4 <put_fat>
		if (res == FR_OK && clst != 0) {
 8001a4e:	b990      	cbnz	r0, 8001a76 <create_chain+0xa2>
 8001a50:	b957      	cbnz	r7, 8001a68 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8001a52:	69aa      	ldr	r2, [r5, #24]
 8001a54:	696b      	ldr	r3, [r5, #20]
		fs->last_clst = ncl;
 8001a56:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8001a58:	3a02      	subs	r2, #2
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d90f      	bls.n	8001a7e <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8001a5e:	792b      	ldrb	r3, [r5, #4]
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	712b      	strb	r3, [r5, #4]
 8001a66:	e7d4      	b.n	8001a12 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8001a68:	4622      	mov	r2, r4
 8001a6a:	4639      	mov	r1, r7
 8001a6c:	4628      	mov	r0, r5
 8001a6e:	f7ff fe99 	bl	80017a4 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8001a72:	2800      	cmp	r0, #0
 8001a74:	d0ed      	beq.n	8001a52 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8001a76:	2801      	cmp	r0, #1
 8001a78:	d0c9      	beq.n	8001a0e <create_chain+0x3a>
 8001a7a:	2401      	movs	r4, #1
 8001a7c:	e7c9      	b.n	8001a12 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	616b      	str	r3, [r5, #20]
 8001a82:	e7ec      	b.n	8001a5e <create_chain+0x8a>

08001a84 <remove_chain>:
{
 8001a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a86:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8001a88:	2d01      	cmp	r5, #1
{
 8001a8a:	4607      	mov	r7, r0
 8001a8c:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8001a8e:	d801      	bhi.n	8001a94 <remove_chain+0x10>
 8001a90:	2002      	movs	r0, #2
 8001a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8001a94:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8001a96:	69a3      	ldr	r3, [r4, #24]
 8001a98:	429d      	cmp	r5, r3
 8001a9a:	d2f9      	bcs.n	8001a90 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8001a9c:	b12a      	cbz	r2, 8001aaa <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8001a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f7ff fe7e 	bl	80017a4 <put_fat>
		if (res != FR_OK) return res;
 8001aa8:	bb08      	cbnz	r0, 8001aee <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8001aaa:	4629      	mov	r1, r5
 8001aac:	6838      	ldr	r0, [r7, #0]
 8001aae:	f7ff fef5 	bl	800189c <get_fat.isra.7>
		if (nxt == 0) break;				/* Empty cluster? */
 8001ab2:	4606      	mov	r6, r0
 8001ab4:	b908      	cbnz	r0, 8001aba <remove_chain+0x36>
	return FR_OK;
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8001aba:	2801      	cmp	r0, #1
 8001abc:	d0e8      	beq.n	8001a90 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8001abe:	1c43      	adds	r3, r0, #1
 8001ac0:	d014      	beq.n	8001aec <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff fe6c 	bl	80017a4 <put_fat>
			if (res != FR_OK) return res;
 8001acc:	b978      	cbnz	r0, 8001aee <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8001ace:	69a2      	ldr	r2, [r4, #24]
 8001ad0:	6963      	ldr	r3, [r4, #20]
 8001ad2:	1e91      	subs	r1, r2, #2
 8001ad4:	428b      	cmp	r3, r1
 8001ad6:	d205      	bcs.n	8001ae4 <remove_chain+0x60>
			fs->free_clst++;
 8001ad8:	3301      	adds	r3, #1
 8001ada:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 8001adc:	7923      	ldrb	r3, [r4, #4]
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8001ae4:	4296      	cmp	r6, r2
 8001ae6:	4635      	mov	r5, r6
 8001ae8:	d3df      	bcc.n	8001aaa <remove_chain+0x26>
 8001aea:	e7e4      	b.n	8001ab6 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8001aec:	2001      	movs	r0, #1
}
 8001aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001af0 <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8001af0:	69c3      	ldr	r3, [r0, #28]
{
 8001af2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001af6:	4605      	mov	r5, r0
 8001af8:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8001afa:	b1ab      	cbz	r3, 8001b28 <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8001afc:	6942      	ldr	r2, [r0, #20]
 8001afe:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8001b02:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8001b06:	d20f      	bcs.n	8001b28 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8001b08:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8001b0c:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8001b0e:	f1b9 0f00 	cmp.w	r9, #0
 8001b12:	d14f      	bne.n	8001bb4 <dir_next+0xc4>
		if (!dp->clust) {		/* Static table */
 8001b14:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8001b16:	3301      	adds	r3, #1
 8001b18:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8001b1a:	b941      	cbnz	r1, 8001b2e <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8001b1c:	8923      	ldrh	r3, [r4, #8]
 8001b1e:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8001b22:	d847      	bhi.n	8001bb4 <dir_next+0xc4>
				dp->sect = 0; return FR_NO_FILE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8001b28:	2004      	movs	r0, #4
 8001b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8001b2e:	8963      	ldrh	r3, [r4, #10]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 8001b36:	d13d      	bne.n	8001bb4 <dir_next+0xc4>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f7ff feaf 	bl	800189c <get_fat.isra.7>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8001b3e:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8001b40:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8001b42:	d802      	bhi.n	8001b4a <dir_next+0x5a>
 8001b44:	2002      	movs	r0, #2
 8001b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8001b4a:	1c42      	adds	r2, r0, #1
 8001b4c:	d102      	bne.n	8001b54 <dir_next+0x64>
 8001b4e:	2001      	movs	r0, #1
 8001b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8001b54:	69a3      	ldr	r3, [r4, #24]
 8001b56:	4298      	cmp	r0, r3
 8001b58:	d326      	bcc.n	8001ba8 <dir_next+0xb8>
					if (!stretch) {								/* If no stretch, report EOT */
 8001b5a:	2f00      	cmp	r7, #0
 8001b5c:	d0e2      	beq.n	8001b24 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8001b5e:	69a9      	ldr	r1, [r5, #24]
 8001b60:	4628      	mov	r0, r5
 8001b62:	f7ff ff37 	bl	80019d4 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001b66:	4606      	mov	r6, r0
 8001b68:	2800      	cmp	r0, #0
 8001b6a:	d037      	beq.n	8001bdc <dir_next+0xec>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8001b6c:	2801      	cmp	r0, #1
 8001b6e:	d0e9      	beq.n	8001b44 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001b70:	1c43      	adds	r3, r0, #1
 8001b72:	d0ec      	beq.n	8001b4e <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8001b74:	4620      	mov	r0, r4
 8001b76:	f7ff fc07 	bl	8001388 <sync_window>
 8001b7a:	4607      	mov	r7, r0
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d1e6      	bne.n	8001b4e <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8001b80:	4601      	mov	r1, r0
 8001b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b86:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8001b8a:	f7ff fad1 	bl	8001130 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8001b8e:	4631      	mov	r1, r6
 8001b90:	4620      	mov	r0, r4
 8001b92:	f7ff fb55 	bl	8001240 <clust2sect>
						fs->wflag = 1;
 8001b96:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8001b9a:	6320      	str	r0, [r4, #48]	; 0x30
 8001b9c:	8963      	ldrh	r3, [r4, #10]
 8001b9e:	429f      	cmp	r7, r3
 8001ba0:	d310      	bcc.n	8001bc4 <dir_next+0xd4>
					fs->winsect -= n;							/* Restore window offset */
 8001ba2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ba4:	1bdf      	subs	r7, r3, r7
 8001ba6:	6327      	str	r7, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 8001ba8:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8001baa:	4631      	mov	r1, r6
 8001bac:	4620      	mov	r0, r4
 8001bae:	f7ff fb47 	bl	8001240 <clust2sect>
 8001bb2:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8001bb4:	3434      	adds	r4, #52	; 0x34
 8001bb6:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 8001bb8:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8001bbc:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						fs->wflag = 1;
 8001bc4:	f884 a003 	strb.w	sl, [r4, #3]
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f7ff fbba 	bl	8001342 <sync_window.part.3>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	d1bd      	bne.n	8001b4e <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8001bd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	3701      	adds	r7, #1
 8001bd8:	6323      	str	r3, [r4, #48]	; 0x30
 8001bda:	e7df      	b.n	8001b9c <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001bdc:	2007      	movs	r0, #7
}
 8001bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001be4 <dir_find>:
{
 8001be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8001be8:	2100      	movs	r1, #0
{
 8001bea:	b085      	sub	sp, #20
 8001bec:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8001bee:	f8d0 a000 	ldr.w	sl, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8001bf2:	f7ff fead 	bl	8001950 <dir_sdi>
	if (res != FR_OK) return res;
 8001bf6:	4680      	mov	r8, r0
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	f040 809e 	bne.w	8001d3a <dir_find+0x156>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8001c06:	632b      	str	r3, [r5, #48]	; 0x30
 8001c08:	464e      	mov	r6, r9
		res = move_window(fs, dp->sect);
 8001c0a:	69e9      	ldr	r1, [r5, #28]
 8001c0c:	4650      	mov	r0, sl
 8001c0e:	f7ff fc0c 	bl	800142a <move_window>
		if (res != FR_OK) break;
 8001c12:	4680      	mov	r8, r0
 8001c14:	2800      	cmp	r0, #0
 8001c16:	f040 8090 	bne.w	8001d3a <dir_find+0x156>
		c = dp->dir[DIR_Name];
 8001c1a:	6a2c      	ldr	r4, [r5, #32]
 8001c1c:	7827      	ldrb	r7, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001c1e:	2f00      	cmp	r7, #0
 8001c20:	f000 8091 	beq.w	8001d46 <dir_find+0x162>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8001c24:	7ae2      	ldrb	r2, [r4, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8001c26:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8001c28:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8001c2c:	71ab      	strb	r3, [r5, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8001c2e:	d003      	beq.n	8001c38 <dir_find+0x54>
 8001c30:	0712      	lsls	r2, r2, #28
 8001c32:	d505      	bpl.n	8001c40 <dir_find+0x5c>
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d005      	beq.n	8001c44 <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3c:	632b      	str	r3, [r5, #48]	; 0x30
 8001c3e:	e057      	b.n	8001cf0 <dir_find+0x10c>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8001c40:	2b0f      	cmp	r3, #15
 8001c42:	d15e      	bne.n	8001d02 <dir_find+0x11e>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8001c44:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8001c48:	0658      	lsls	r0, r3, #25
 8001c4a:	d452      	bmi.n	8001cf2 <dir_find+0x10e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8001c4c:	0679      	lsls	r1, r7, #25
 8001c4e:	d547      	bpl.n	8001ce0 <dir_find+0xfc>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8001c50:	696a      	ldr	r2, [r5, #20]
						sum = dp->dir[LDIR_Chksum];
 8001c52:	7b63      	ldrb	r3, [r4, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8001c54:	632a      	str	r2, [r5, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8001c56:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8001c5a:	f894 900d 	ldrb.w	r9, [r4, #13]
 8001c5e:	4599      	cmp	r9, r3
 8001c60:	d16f      	bne.n	8001d42 <dir_find+0x15e>
	rv = rv << 8 | ptr[0];
 8001c62:	7ee3      	ldrb	r3, [r4, #27]
 8001c64:	7ea6      	ldrb	r6, [r4, #26]
 8001c66:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8001c6a:	b236      	sxth	r6, r6
 8001c6c:	2e00      	cmp	r6, #0
 8001c6e:	d13f      	bne.n	8001cf0 <dir_find+0x10c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8001c70:	f894 8000 	ldrb.w	r8, [r4]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8001c74:	f8da b00c 	ldr.w	fp, [sl, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8001c78:	f008 083f 	and.w	r8, r8, #63	; 0x3f
 8001c7c:	f108 33ff 	add.w	r3, r8, #4294967295
 8001c80:	f04f 080d 	mov.w	r8, #13
 8001c84:	fb08 f803 	mul.w	r8, r8, r3
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8001c88:	2101      	movs	r1, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8001c8a:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <dir_find+0x168>)
 8001c8c:	5cf2      	ldrb	r2, [r6, r3]
 8001c8e:	18a3      	adds	r3, r4, r2
	rv = rv << 8 | ptr[0];
 8001c90:	7858      	ldrb	r0, [r3, #1]
 8001c92:	5ca3      	ldrb	r3, [r4, r2]
 8001c94:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		if (wc) {
 8001c98:	b331      	cbz	r1, 8001ce8 <dir_find+0x104>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8001c9a:	f1b8 0ffe 	cmp.w	r8, #254	; 0xfe
 8001c9e:	d827      	bhi.n	8001cf0 <dir_find+0x10c>
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	9303      	str	r3, [sp, #12]
 8001ca4:	f000 fd78 	bl	8002798 <ff_wtoupper>
 8001ca8:	f108 0201 	add.w	r2, r8, #1
 8001cac:	9002      	str	r0, [sp, #8]
 8001cae:	f83b 0018 	ldrh.w	r0, [fp, r8, lsl #1]
 8001cb2:	9201      	str	r2, [sp, #4]
 8001cb4:	f000 fd70 	bl	8002798 <ff_wtoupper>
 8001cb8:	9902      	ldr	r1, [sp, #8]
 8001cba:	4281      	cmp	r1, r0
 8001cbc:	d118      	bne.n	8001cf0 <dir_find+0x10c>
	rv = rv << 8 | ptr[0];
 8001cbe:	9b03      	ldr	r3, [sp, #12]
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8001cc0:	9a01      	ldr	r2, [sp, #4]
	rv = rv << 8 | ptr[0];
 8001cc2:	4619      	mov	r1, r3
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8001cc4:	4690      	mov	r8, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8001cc6:	3601      	adds	r6, #1
 8001cc8:	2e0d      	cmp	r6, #13
 8001cca:	d1de      	bne.n	8001c8a <dir_find+0xa6>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8001ccc:	7823      	ldrb	r3, [r4, #0]
 8001cce:	065a      	lsls	r2, r3, #25
 8001cd0:	d503      	bpl.n	8001cda <dir_find+0xf6>
 8001cd2:	b111      	cbz	r1, 8001cda <dir_find+0xf6>
 8001cd4:	f83b 3018 	ldrh.w	r3, [fp, r8, lsl #1]
 8001cd8:	b953      	cbnz	r3, 8001cf0 <dir_find+0x10c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8001cda:	3f01      	subs	r7, #1
 8001cdc:	b2fe      	uxtb	r6, r7
 8001cde:	e008      	b.n	8001cf2 <dir_find+0x10e>
 8001ce0:	42be      	cmp	r6, r7
 8001ce2:	d105      	bne.n	8001cf0 <dir_find+0x10c>
 8001ce4:	464b      	mov	r3, r9
 8001ce6:	e7b8      	b.n	8001c5a <dir_find+0x76>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8001ce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d0ea      	beq.n	8001cc6 <dir_find+0xe2>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8001cf0:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f7ff fefb 	bl	8001af0 <dir_next>
	} while (res == FR_OK);
 8001cfa:	4680      	mov	r8, r0
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	d084      	beq.n	8001c0a <dir_find+0x26>
 8001d00:	e01b      	b.n	8001d3a <dir_find+0x156>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8001d02:	b926      	cbnz	r6, 8001d0e <dir_find+0x12a>
 8001d04:	4620      	mov	r0, r4
 8001d06:	f7ff fab7 	bl	8001278 <sum_sfn>
 8001d0a:	4581      	cmp	r9, r0
 8001d0c:	d015      	beq.n	8001d3a <dir_find+0x156>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8001d0e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8001d12:	07db      	lsls	r3, r3, #31
 8001d14:	d490      	bmi.n	8001c38 <dir_find+0x54>
 8001d16:	f104 010b 	add.w	r1, r4, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8001d1a:	f105 0224 	add.w	r2, r5, #36	; 0x24
		r = *d++ - *s++;
 8001d1e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001d22:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
 8001d26:	428c      	cmp	r4, r1
		r = *d++ - *s++;
 8001d28:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 8001d2c:	d002      	beq.n	8001d34 <dir_find+0x150>
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f5      	beq.n	8001d1e <dir_find+0x13a>
 8001d32:	e781      	b.n	8001c38 <dir_find+0x54>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f47f af7f 	bne.w	8001c38 <dir_find+0x54>
}
 8001d3a:	4640      	mov	r0, r8
 8001d3c:	b005      	add	sp, #20
 8001d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d42:	4699      	mov	r9, r3
 8001d44:	e7d4      	b.n	8001cf0 <dir_find+0x10c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001d46:	f04f 0804 	mov.w	r8, #4
 8001d4a:	e7f6      	b.n	8001d3a <dir_find+0x156>
 8001d4c:	08004df4 	.word	0x08004df4

08001d50 <dir_register>:
{
 8001d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8001d54:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
 8001d58:	f014 04a0 	ands.w	r4, r4, #160	; 0xa0
{
 8001d5c:	b089      	sub	sp, #36	; 0x24
 8001d5e:	4605      	mov	r5, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8001d60:	f040 8084 	bne.w	8001e6c <dir_register+0x11c>
	FATFS *fs = dp->obj.fs;
 8001d64:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8001d66:	68f2      	ldr	r2, [r6, #12]
 8001d68:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d155      	bne.n	8001e1c <dir_register+0xcc>
	mem_cpy(sn, dp->fn, 12);
 8001d70:	f105 0724 	add.w	r7, r5, #36	; 0x24
 8001d74:	220c      	movs	r2, #12
 8001d76:	4639      	mov	r1, r7
 8001d78:	a805      	add	r0, sp, #20
 8001d7a:	f7ff fabf 	bl	80012fc <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8001d7e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8001d82:	07db      	lsls	r3, r3, #31
 8001d84:	d57b      	bpl.n	8001e7e <dir_register+0x12e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8001d86:	2340      	movs	r3, #64	; 0x40
				if (sr & 0x10000) sr ^= 0x11021;
 8001d88:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8001fb8 <dir_register+0x268>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8001d8c:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8001d90:	f04f 0901 	mov.w	r9, #1
 8001d94:	220b      	movs	r2, #11
 8001d96:	a905      	add	r1, sp, #20
 8001d98:	4638      	mov	r0, r7
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8001d9a:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8001d9e:	f7ff faad 	bl	80012fc <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8001da2:	f1b9 0f05 	cmp.w	r9, #5
 8001da6:	d84e      	bhi.n	8001e46 <dir_register+0xf6>
 8001da8:	464b      	mov	r3, r9
		while (*lfn) {	/* Create a CRC */
 8001daa:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 8001dac:	f003 000f 	and.w	r0, r3, #15
 8001db0:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8001db4:	2939      	cmp	r1, #57	; 0x39
 8001db6:	bf88      	it	hi
 8001db8:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	a803      	add	r0, sp, #12
 8001dc0:	4410      	add	r0, r2
	} while (seq);
 8001dc2:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 8001dc4:	7041      	strb	r1, [r0, #1]
	} while (seq);
 8001dc6:	d1f1      	bne.n	8001dac <dir_register+0x5c>
	ns[i] = '~';
 8001dc8:	a908      	add	r1, sp, #32
 8001dca:	4411      	add	r1, r2
 8001dcc:	207e      	movs	r0, #126	; 0x7e
 8001dce:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d03d      	beq.n	8001e52 <dir_register+0x102>
 8001dd6:	5cf9      	ldrb	r1, [r7, r3]
 8001dd8:	2920      	cmp	r1, #32
 8001dda:	d138      	bne.n	8001e4e <dir_register+0xfe>
 8001ddc:	443b      	add	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8001dde:	2a07      	cmp	r2, #7
 8001de0:	bf9b      	ittet	ls
 8001de2:	a908      	addls	r1, sp, #32
 8001de4:	1889      	addls	r1, r1, r2
 8001de6:	2120      	movhi	r1, #32
 8001de8:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 8001dec:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8001df0:	eba3 0107 	sub.w	r1, r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8001df4:	bf98      	it	ls
 8001df6:	3201      	addls	r2, #1
	} while (j < 8);
 8001df8:	2907      	cmp	r1, #7
 8001dfa:	d9f0      	bls.n	8001dde <dir_register+0x8e>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8001dfc:	4628      	mov	r0, r5
 8001dfe:	f7ff fef1 	bl	8001be4 <dir_find>
 8001e02:	4682      	mov	sl, r0
			if (res != FR_OK) break;
 8001e04:	bba8      	cbnz	r0, 8001e72 <dir_register+0x122>
		for (n = 1; n < 100; n++) {
 8001e06:	f109 0901 	add.w	r9, r9, #1
 8001e0a:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8001e0e:	d1c1      	bne.n	8001d94 <dir_register+0x44>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8001e10:	f04f 0a07 	mov.w	sl, #7
}
 8001e14:	4650      	mov	r0, sl
 8001e16:	b009      	add	sp, #36	; 0x24
 8001e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8001e1c:	3401      	adds	r4, #1
 8001e1e:	e7a3      	b.n	8001d68 <dir_register+0x18>
		while (*lfn) {	/* Create a CRC */
 8001e20:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
 8001e22:	f002 0e01 	and.w	lr, r2, #1
 8001e26:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8001e2a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001e2e:	bf18      	it	ne
 8001e30:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8001e34:	3801      	subs	r0, #1
				wc >>= 1;
 8001e36:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 8001e3a:	d1f2      	bne.n	8001e22 <dir_register+0xd2>
		while (*lfn) {	/* Create a CRC */
 8001e3c:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	d1ed      	bne.n	8001e20 <dir_register+0xd0>
 8001e44:	e7b1      	b.n	8001daa <dir_register+0x5a>
 8001e46:	f1aa 0102 	sub.w	r1, sl, #2
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8001e4a:	464b      	mov	r3, r9
 8001e4c:	e7f6      	b.n	8001e3c <dir_register+0xec>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8001e4e:	3301      	adds	r3, #1
 8001e50:	e7bf      	b.n	8001dd2 <dir_register+0x82>
 8001e52:	4613      	mov	r3, r2
 8001e54:	e7c2      	b.n	8001ddc <dir_register+0x8c>
				n = 0;					/* Not a blank entry. Restart to search */
 8001e56:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
 8001e58:	2101      	movs	r1, #1
 8001e5a:	4628      	mov	r0, r5
 8001e5c:	f7ff fe48 	bl	8001af0 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8001e60:	4682      	mov	sl, r0
 8001e62:	b310      	cbz	r0, 8001eaa <dir_register+0x15a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8001e64:	f1ba 0f04 	cmp.w	sl, #4
 8001e68:	d0d2      	beq.n	8001e10 <dir_register+0xc0>
 8001e6a:	e7d3      	b.n	8001e14 <dir_register+0xc4>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8001e6c:	f04f 0a06 	mov.w	sl, #6
 8001e70:	e7d0      	b.n	8001e14 <dir_register+0xc4>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8001e72:	2804      	cmp	r0, #4
 8001e74:	d1ce      	bne.n	8001e14 <dir_register+0xc4>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8001e76:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8001e7a:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8001e7e:	f89d 301f 	ldrb.w	r3, [sp, #31]
	FATFS *fs = dp->obj.fs;
 8001e82:	f8d5 9000 	ldr.w	r9, [r5]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8001e86:	079b      	lsls	r3, r3, #30
 8001e88:	bf48      	it	mi
 8001e8a:	340c      	addmi	r4, #12
	res = dir_sdi(dp, 0);
 8001e8c:	f04f 0100 	mov.w	r1, #0
 8001e90:	4628      	mov	r0, r5
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8001e92:	bf49      	itett	mi
 8001e94:	230d      	movmi	r3, #13
 8001e96:	2401      	movpl	r4, #1
 8001e98:	fbb4 f4f3 	udivmi	r4, r4, r3
 8001e9c:	3401      	addmi	r4, #1
	res = dir_sdi(dp, 0);
 8001e9e:	f7ff fd57 	bl	8001950 <dir_sdi>
	if (res == FR_OK) {
 8001ea2:	4682      	mov	sl, r0
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	d1dd      	bne.n	8001e64 <dir_register+0x114>
 8001ea8:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
 8001eaa:	69e9      	ldr	r1, [r5, #28]
 8001eac:	4648      	mov	r0, r9
 8001eae:	f7ff fabc 	bl	800142a <move_window>
			if (res != FR_OK) break;
 8001eb2:	4682      	mov	sl, r0
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d1d5      	bne.n	8001e64 <dir_register+0x114>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8001eb8:	6a2b      	ldr	r3, [r5, #32]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2be5      	cmp	r3, #229	; 0xe5
 8001ebe:	d001      	beq.n	8001ec4 <dir_register+0x174>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1c8      	bne.n	8001e56 <dir_register+0x106>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8001ec4:	f108 0801 	add.w	r8, r8, #1
 8001ec8:	4544      	cmp	r4, r8
 8001eca:	d1c5      	bne.n	8001e58 <dir_register+0x108>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8001ecc:	3c01      	subs	r4, #1
 8001ece:	d056      	beq.n	8001f7e <dir_register+0x22e>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8001ed0:	6969      	ldr	r1, [r5, #20]
 8001ed2:	4628      	mov	r0, r5
 8001ed4:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8001ed8:	f7ff fd3a 	bl	8001950 <dir_sdi>
		if (res == FR_OK) {
 8001edc:	4682      	mov	sl, r0
 8001ede:	2800      	cmp	r0, #0
 8001ee0:	d198      	bne.n	8001e14 <dir_register+0xc4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8001ee2:	4638      	mov	r0, r7
 8001ee4:	f7ff f9c8 	bl	8001278 <sum_sfn>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8001ee8:	f64f 79ff 	movw	r9, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8001eec:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 8001eee:	69e9      	ldr	r1, [r5, #28]
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	f7ff fa9a 	bl	800142a <move_window>
 8001ef6:	4682      	mov	sl, r0
				if (res != FR_OK) break;
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	d18b      	bne.n	8001e14 <dir_register+0xc4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8001efc:	6a2b      	ldr	r3, [r5, #32]
 8001efe:	f8d6 c00c 	ldr.w	ip, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8001f02:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8001f06:	220f      	movs	r2, #15
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8001f08:	b2e1      	uxtb	r1, r4
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8001f0a:	f04f 0e0d 	mov.w	lr, #13
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8001f0e:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8001f10:	1e4a      	subs	r2, r1, #1
 8001f12:	fb0e f202 	mul.w	r2, lr, r2
	dir[LDIR_Type] = 0;
 8001f16:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8001f18:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 8001f1a:	76d8      	strb	r0, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8001f1c:	9201      	str	r2, [sp, #4]
	s = wc = 0;
 8001f1e:	4686      	mov	lr, r0
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8001f20:	4548      	cmp	r0, r9
 8001f22:	bf1f      	itttt	ne
 8001f24:	9a01      	ldrne	r2, [sp, #4]
 8001f26:	f83c 0012 	ldrhne.w	r0, [ip, r2, lsl #1]
 8001f2a:	3201      	addne	r2, #1
 8001f2c:	9201      	strne	r2, [sp, #4]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8001f2e:	4a21      	ldr	r2, [pc, #132]	; (8001fb4 <dir_register+0x264>)
 8001f30:	f81e a002 	ldrb.w	sl, [lr, r2]
	} while (++s < 13);
 8001f34:	f10e 0e01 	add.w	lr, lr, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8001f38:	eb03 0b0a 	add.w	fp, r3, sl
	*ptr++ = (BYTE)val; val >>= 8;
 8001f3c:	f803 000a 	strb.w	r0, [r3, sl]
 8001f40:	ea4f 2a10 	mov.w	sl, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8001f44:	2800      	cmp	r0, #0
 8001f46:	bf08      	it	eq
 8001f48:	4648      	moveq	r0, r9
	} while (++s < 13);
 8001f4a:	f1be 0f0d 	cmp.w	lr, #13
	*ptr++ = (BYTE)val;
 8001f4e:	f88b a001 	strb.w	sl, [fp, #1]
	} while (++s < 13);
 8001f52:	d1e5      	bne.n	8001f20 <dir_register+0x1d0>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8001f54:	4548      	cmp	r0, r9
 8001f56:	d003      	beq.n	8001f60 <dir_register+0x210>
 8001f58:	9a01      	ldr	r2, [sp, #4]
 8001f5a:	f83c 2012 	ldrh.w	r2, [ip, r2, lsl #1]
 8001f5e:	b90a      	cbnz	r2, 8001f64 <dir_register+0x214>
 8001f60:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8001f64:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	f7ff fdbf 	bl	8001af0 <dir_next>
			} while (res == FR_OK && --nent);
 8001f72:	4682      	mov	sl, r0
 8001f74:	2800      	cmp	r0, #0
 8001f76:	f47f af4d 	bne.w	8001e14 <dir_register+0xc4>
 8001f7a:	3c01      	subs	r4, #1
 8001f7c:	d1b7      	bne.n	8001eee <dir_register+0x19e>
		res = move_window(fs, dp->sect);
 8001f7e:	69e9      	ldr	r1, [r5, #28]
 8001f80:	4630      	mov	r0, r6
 8001f82:	f7ff fa52 	bl	800142a <move_window>
		if (res == FR_OK) {
 8001f86:	4682      	mov	sl, r0
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	f47f af43 	bne.w	8001e14 <dir_register+0xc4>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8001f8e:	2220      	movs	r2, #32
 8001f90:	4651      	mov	r1, sl
 8001f92:	6a28      	ldr	r0, [r5, #32]
 8001f94:	f7ff f8cc 	bl	8001130 <mem_set>
 8001f98:	220b      	movs	r2, #11
 8001f9a:	4639      	mov	r1, r7
 8001f9c:	6a28      	ldr	r0, [r5, #32]
 8001f9e:	f7ff f9ad 	bl	80012fc <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8001fa2:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8001fa6:	6a2a      	ldr	r2, [r5, #32]
 8001fa8:	f003 0318 	and.w	r3, r3, #24
 8001fac:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	70f3      	strb	r3, [r6, #3]
 8001fb2:	e72f      	b.n	8001e14 <dir_register+0xc4>
 8001fb4:	08004df4 	.word	0x08004df4
 8001fb8:	00011021 	.word	0x00011021

08001fbc <follow_path>:
{
 8001fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8001fc0:	6803      	ldr	r3, [r0, #0]
 8001fc2:	9300      	str	r3, [sp, #0]
{
 8001fc4:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8001fc6:	780b      	ldrb	r3, [r1, #0]
 8001fc8:	2b2f      	cmp	r3, #47	; 0x2f
 8001fca:	4688      	mov	r8, r1
 8001fcc:	f101 0101 	add.w	r1, r1, #1
 8001fd0:	d0f9      	beq.n	8001fc6 <follow_path+0xa>
 8001fd2:	2b5c      	cmp	r3, #92	; 0x5c
 8001fd4:	d0f7      	beq.n	8001fc6 <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8001fda:	f898 3000 	ldrb.w	r3, [r8]
 8001fde:	2b1f      	cmp	r3, #31
 8001fe0:	d877      	bhi.n	80020d2 <follow_path+0x116>
		dp->fn[NSFLAG] = NS_NONAME;
 8001fe2:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8001fe4:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 8001fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 8001fea:	b003      	add	sp, #12
 8001fec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8001ff0:	f7ff bcae 	b.w	8001950 <dir_sdi>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8001ff4:	285c      	cmp	r0, #92	; 0x5c
 8001ff6:	d07c      	beq.n	80020f2 <follow_path+0x136>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8001ff8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8001ffc:	d00b      	beq.n	8002016 <follow_path+0x5a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8001ffe:	2101      	movs	r1, #1
 8002000:	f000 fbac 	bl	800275c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8002004:	b138      	cbz	r0, 8002016 <follow_path+0x5a>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8002006:	287f      	cmp	r0, #127	; 0x7f
 8002008:	d807      	bhi.n	800201a <follow_path+0x5e>
 800200a:	4986      	ldr	r1, [pc, #536]	; (8002224 <follow_path+0x268>)
	while (*str && *str != chr) str++;
 800200c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002010:	b11a      	cbz	r2, 800201a <follow_path+0x5e>
 8002012:	4290      	cmp	r0, r2
 8002014:	d1fa      	bne.n	800200c <follow_path+0x50>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002016:	2006      	movs	r0, #6
 8002018:	e0f2      	b.n	8002200 <follow_path+0x244>
		lfn[di++] = w;					/* Store the Unicode character */
 800201a:	f825 0f02 	strh.w	r0, [r5, #2]!
 800201e:	4626      	mov	r6, r4
 8002020:	e05f      	b.n	80020e2 <follow_path+0x126>
		w = lfn[di - 1];
 8002022:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8002026:	2920      	cmp	r1, #32
 8002028:	d001      	beq.n	800202e <follow_path+0x72>
 800202a:	292e      	cmp	r1, #46	; 0x2e
 800202c:	d174      	bne.n	8002118 <follow_path+0x15c>
		di--;
 800202e:	3e01      	subs	r6, #1
 8002030:	e070      	b.n	8002114 <follow_path+0x158>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8002032:	3101      	adds	r1, #1
 8002034:	e080      	b.n	8002138 <follow_path+0x17c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8002036:	45d1      	cmp	r9, sl
 8002038:	f080 80a8 	bcs.w	800218c <follow_path+0x1d0>
 800203c:	42b2      	cmp	r2, r6
 800203e:	d111      	bne.n	8002064 <follow_path+0xa8>
			if (ni == 11) {				/* Long extension */
 8002040:	f1ba 0f0b 	cmp.w	sl, #11
 8002044:	d106      	bne.n	8002054 <follow_path+0x98>
 8002046:	e0a5      	b.n	8002194 <follow_path+0x1d8>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8002048:	42b2      	cmp	r2, r6
 800204a:	d003      	beq.n	8002054 <follow_path+0x98>
 800204c:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 8002050:	f200 80a4 	bhi.w	800219c <follow_path+0x1e0>
			b <<= 2; continue;
 8002054:	00ad      	lsls	r5, r5, #2
 8002056:	b2ed      	uxtb	r5, r5
 8002058:	4632      	mov	r2, r6
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800205a:	f04f 0a0b 	mov.w	sl, #11
 800205e:	f04f 0908 	mov.w	r9, #8
 8002062:	e08c      	b.n	800217e <follow_path+0x1c2>
		if (w >= 0x80) {				/* Non ASCII character */
 8002064:	287f      	cmp	r0, #127	; 0x7f
 8002066:	d90d      	bls.n	8002084 <follow_path+0xc8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8002068:	2100      	movs	r1, #0
 800206a:	9201      	str	r2, [sp, #4]
 800206c:	f000 fb76 	bl	800275c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8002070:	9a01      	ldr	r2, [sp, #4]
 8002072:	b118      	cbz	r0, 800207c <follow_path+0xc0>
 8002074:	4b6c      	ldr	r3, [pc, #432]	; (8002228 <follow_path+0x26c>)
 8002076:	4418      	add	r0, r3
 8002078:	f810 0c80 	ldrb.w	r0, [r0, #-128]
 800207c:	b280      	uxth	r0, r0
			cf |= NS_LFN;				/* Force create LFN entry */
 800207e:	f044 0402 	orr.w	r4, r4, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8002082:	b138      	cbz	r0, 8002094 <follow_path+0xd8>
 8002084:	4b69      	ldr	r3, [pc, #420]	; (800222c <follow_path+0x270>)
	while (*str && *str != chr) str++;
 8002086:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800208a:	2900      	cmp	r1, #0
 800208c:	f000 80bb 	beq.w	8002206 <follow_path+0x24a>
 8002090:	4281      	cmp	r1, r0
 8002092:	d1f8      	bne.n	8002086 <follow_path+0xca>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8002094:	f044 0403 	orr.w	r4, r4, #3
 8002098:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800209a:	eb07 0109 	add.w	r1, r7, r9
 800209e:	f109 0901 	add.w	r9, r9, #1
 80020a2:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 80020a6:	e06a      	b.n	800217e <follow_path+0x1c2>
					b |= 2;
 80020a8:	f045 0502 	orr.w	r5, r5, #2
 80020ac:	e7f5      	b.n	800209a <follow_path+0xde>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80020ae:	075a      	lsls	r2, r3, #29
 80020b0:	f100 80a6 	bmi.w	8002200 <follow_path+0x244>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	06db      	lsls	r3, r3, #27
 80020b8:	d563      	bpl.n	8002182 <follow_path+0x1c6>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80020ba:	9b00      	ldr	r3, [sp, #0]
 80020bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020c6:	4419      	add	r1, r3
 80020c8:	9b00      	ldr	r3, [sp, #0]
 80020ca:	7818      	ldrb	r0, [r3, #0]
 80020cc:	f7ff f91f 	bl	800130e <ld_clust.isra.1>
 80020d0:	60b8      	str	r0, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80020d8:	f108 39ff 	add.w	r9, r8, #4294967295
 80020dc:	f1ab 0502 	sub.w	r5, fp, #2
 80020e0:	2600      	movs	r6, #0
		w = p[si++];					/* Get a character */
 80020e2:	f819 0f01 	ldrb.w	r0, [r9, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 80020e6:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 80020e8:	f106 0401 	add.w	r4, r6, #1
		if (w < ' ') break;				/* Break if end of the path name */
 80020ec:	d90b      	bls.n	8002106 <follow_path+0x14a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80020ee:	282f      	cmp	r0, #47	; 0x2f
 80020f0:	d180      	bne.n	8001ff4 <follow_path+0x38>
 80020f2:	eb08 0204 	add.w	r2, r8, r4
 80020f6:	eba2 0408 	sub.w	r4, r2, r8
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80020fa:	f812 1b01 	ldrb.w	r1, [r2], #1
 80020fe:	292f      	cmp	r1, #47	; 0x2f
 8002100:	d0f9      	beq.n	80020f6 <follow_path+0x13a>
 8002102:	295c      	cmp	r1, #92	; 0x5c
 8002104:	d0f7      	beq.n	80020f6 <follow_path+0x13a>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002106:	2820      	cmp	r0, #32
	*path = &p[si];						/* Return pointer to the next segment */
 8002108:	44a0      	add	r8, r4
 800210a:	eb0b 0246 	add.w	r2, fp, r6, lsl #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800210e:	bf34      	ite	cc
 8002110:	2404      	movcc	r4, #4
 8002112:	2400      	movcs	r4, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8002114:	2e00      	cmp	r6, #0
 8002116:	d184      	bne.n	8002022 <follow_path+0x66>
	lfn[di] = 0;						/* LFN is created */
 8002118:	f04f 0900 	mov.w	r9, #0
 800211c:	eb0b 0546 	add.w	r5, fp, r6, lsl #1
 8002120:	f82b 9016 	strh.w	r9, [fp, r6, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8002124:	2e00      	cmp	r6, #0
 8002126:	f43f af76 	beq.w	8002016 <follow_path+0x5a>
	mem_set(dp->fn, ' ', 11);
 800212a:	2120      	movs	r1, #32
 800212c:	220b      	movs	r2, #11
 800212e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002132:	f7fe fffd 	bl	8001130 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8002136:	4649      	mov	r1, r9
 8002138:	f83b 2011 	ldrh.w	r2, [fp, r1, lsl #1]
 800213c:	2a20      	cmp	r2, #32
 800213e:	f43f af78 	beq.w	8002032 <follow_path+0x76>
 8002142:	2a2e      	cmp	r2, #46	; 0x2e
 8002144:	f43f af75 	beq.w	8002032 <follow_path+0x76>
	if (si) cf |= NS_LOSS | NS_LFN;
 8002148:	b109      	cbz	r1, 800214e <follow_path+0x192>
 800214a:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800214e:	f835 2d02 	ldrh.w	r2, [r5, #-2]!
 8002152:	2a2e      	cmp	r2, #46	; 0x2e
 8002154:	d001      	beq.n	800215a <follow_path+0x19e>
 8002156:	3e01      	subs	r6, #1
 8002158:	d1f9      	bne.n	800214e <follow_path+0x192>
		dp->fn[i++] = (BYTE)w;
 800215a:	f04f 0900 	mov.w	r9, #0
 800215e:	f04f 0a08 	mov.w	sl, #8
 8002162:	464d      	mov	r5, r9
		w = lfn[si++];					/* Get an LFN character */
 8002164:	f83b 0011 	ldrh.w	r0, [fp, r1, lsl #1]
 8002168:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 800216a:	b1b8      	cbz	r0, 800219c <follow_path+0x1e0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800216c:	2820      	cmp	r0, #32
 800216e:	d004      	beq.n	800217a <follow_path+0x1be>
 8002170:	282e      	cmp	r0, #46	; 0x2e
 8002172:	f47f af60 	bne.w	8002036 <follow_path+0x7a>
 8002176:	42b2      	cmp	r2, r6
 8002178:	d005      	beq.n	8002186 <follow_path+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800217a:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 800217e:	4611      	mov	r1, r2
 8002180:	e7f0      	b.n	8002164 <follow_path+0x1a8>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002182:	2005      	movs	r0, #5
	return res;
 8002184:	e03c      	b.n	8002200 <follow_path+0x244>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8002186:	45d1      	cmp	r9, sl
 8002188:	f4ff af5a 	bcc.w	8002040 <follow_path+0x84>
			if (ni == 11) {				/* Long extension */
 800218c:	f1ba 0f0b 	cmp.w	sl, #11
 8002190:	f47f af5a 	bne.w	8002048 <follow_path+0x8c>
				cf |= NS_LOSS | NS_LFN; break;
 8002194:	f044 0403 	orr.w	r4, r4, #3
 8002198:	f04f 0a0b 	mov.w	sl, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800219c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021a0:	2be5      	cmp	r3, #229	; 0xe5
 80021a2:	bf04      	itt	eq
 80021a4:	2305      	moveq	r3, #5
 80021a6:	f887 3024 	strbeq.w	r3, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80021aa:	f1ba 0f08 	cmp.w	sl, #8
 80021ae:	bf04      	itt	eq
 80021b0:	00ad      	lsleq	r5, r5, #2
 80021b2:	b2ed      	uxtbeq	r5, r5
 80021b4:	f005 030c 	and.w	r3, r5, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80021b8:	2b0c      	cmp	r3, #12
 80021ba:	d003      	beq.n	80021c4 <follow_path+0x208>
 80021bc:	f005 0203 	and.w	r2, r5, #3
 80021c0:	2a03      	cmp	r2, #3
 80021c2:	d101      	bne.n	80021c8 <follow_path+0x20c>
 80021c4:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80021c8:	07a1      	lsls	r1, r4, #30
 80021ca:	d409      	bmi.n	80021e0 <follow_path+0x224>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80021cc:	f005 0503 	and.w	r5, r5, #3
 80021d0:	2d01      	cmp	r5, #1
 80021d2:	bf08      	it	eq
 80021d4:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80021d8:	2b04      	cmp	r3, #4
 80021da:	bf08      	it	eq
 80021dc:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80021e0:	f887 402f 	strb.w	r4, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80021e4:	4638      	mov	r0, r7
 80021e6:	f7ff fcfd 	bl	8001be4 <dir_find>
			ns = dp->fn[NSFLAG];
 80021ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80021ee:	2800      	cmp	r0, #0
 80021f0:	f43f af5d 	beq.w	80020ae <follow_path+0xf2>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80021f4:	2804      	cmp	r0, #4
 80021f6:	d103      	bne.n	8002200 <follow_path+0x244>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80021f8:	f013 0f04 	tst.w	r3, #4
 80021fc:	bf08      	it	eq
 80021fe:	2005      	moveq	r0, #5
}
 8002200:	b003      	add	sp, #12
 8002202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (IsUpper(w)) {		/* ASCII large capital */
 8002206:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800220a:	2919      	cmp	r1, #25
 800220c:	f67f af4c 	bls.w	80020a8 <follow_path+0xec>
					if (IsLower(w)) {	/* ASCII small capital */
 8002210:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8002214:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8002216:	bf9e      	ittt	ls
 8002218:	3820      	subls	r0, #32
 800221a:	f045 0501 	orrls.w	r5, r5, #1
 800221e:	b280      	uxthls	r0, r0
 8002220:	e73b      	b.n	800209a <follow_path+0xde>
 8002222:	bf00      	nop
 8002224:	08004e00 	.word	0x08004e00
 8002228:	08004d74 	.word	0x08004d74
 800222c:	08004e09 	.word	0x08004e09

08002230 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002230:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002232:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8002234:	a804      	add	r0, sp, #16
{
 8002236:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8002238:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 800223c:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800223e:	f7ff f82a 	bl	8001296 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002242:	1e05      	subs	r5, r0, #0
 8002244:	db1f      	blt.n	8002286 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002246:	4912      	ldr	r1, [pc, #72]	; (8002290 <f_mount+0x60>)
 8002248:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 800224c:	b15c      	cbz	r4, 8002266 <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <f_mount+0x64>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4294      	cmp	r4, r2
 8002254:	bf04      	itt	eq
 8002256:	2200      	moveq	r2, #0
 8002258:	601a      	streq	r2, [r3, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	2000      	movs	r0, #0
 800225e:	4294      	cmp	r4, r2
 8002260:	bf08      	it	eq
 8002262:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002264:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 8002266:	9801      	ldr	r0, [sp, #4]
 8002268:	b108      	cbz	r0, 800226e <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 800226a:	2300      	movs	r3, #0
 800226c:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800226e:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8002272:	b130      	cbz	r0, 8002282 <f_mount+0x52>
 8002274:	2e01      	cmp	r6, #1
 8002276:	d108      	bne.n	800228a <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8002278:	2200      	movs	r2, #0
 800227a:	a901      	add	r1, sp, #4
 800227c:	4668      	mov	r0, sp
 800227e:	f7ff f92f 	bl	80014e0 <find_volume>
	LEAVE_FF(fs, res);
}
 8002282:	b004      	add	sp, #16
 8002284:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8002286:	200b      	movs	r0, #11
 8002288:	e7fb      	b.n	8002282 <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800228a:	2000      	movs	r0, #0
 800228c:	e7f9      	b.n	8002282 <f_mount+0x52>
 800228e:	bf00      	nop
 8002290:	200000a4 	.word	0x200000a4
 8002294:	200000a8 	.word	0x200000a8

08002298 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800229c:	b090      	sub	sp, #64	; 0x40
 800229e:	4690      	mov	r8, r2
 80022a0:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80022a2:	4604      	mov	r4, r0
 80022a4:	2800      	cmp	r0, #0
 80022a6:	f000 80ce 	beq.w	8002446 <f_open+0x1ae>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80022aa:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80022ae:	462a      	mov	r2, r5
 80022b0:	a902      	add	r1, sp, #8
 80022b2:	a801      	add	r0, sp, #4
 80022b4:	f7ff f914 	bl	80014e0 <find_volume>
	if (res == FR_OK) {
 80022b8:	4607      	mov	r7, r0
 80022ba:	bb38      	cbnz	r0, 800230c <f_open+0x74>
		dj.obj.fs = fs;
 80022bc:	ae10      	add	r6, sp, #64	; 0x40
 80022be:	9b02      	ldr	r3, [sp, #8]
 80022c0:	f846 3d34 	str.w	r3, [r6, #-52]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80022c4:	9901      	ldr	r1, [sp, #4]
 80022c6:	4630      	mov	r0, r6
 80022c8:	f7ff fe78 	bl	8001fbc <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80022cc:	b958      	cbnz	r0, 80022e6 <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80022ce:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db1e      	blt.n	8002314 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80022d6:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 80022da:	bf14      	ite	ne
 80022dc:	2101      	movne	r1, #1
 80022de:	2100      	moveq	r1, #0
 80022e0:	4630      	mov	r0, r6
 80022e2:	f7fe ff2b 	bl	800113c <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80022e6:	f018 0f1c 	tst.w	r8, #28
 80022ea:	d073      	beq.n	80023d4 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 80022ec:	b1a0      	cbz	r0, 8002318 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80022ee:	2804      	cmp	r0, #4
 80022f0:	d109      	bne.n	8002306 <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80022f2:	4b71      	ldr	r3, [pc, #452]	; (80024b8 <f_open+0x220>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	2a00      	cmp	r2, #0
 80022f8:	f000 80da 	beq.w	80024b0 <f_open+0x218>
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80d6 	beq.w	80024b0 <f_open+0x218>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8002304:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002306:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800230a:	b170      	cbz	r0, 800232a <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800230c:	2300      	movs	r3, #0
 800230e:	6023      	str	r3, [r4, #0]
 8002310:	4607      	mov	r7, r0
 8002312:	e092      	b.n	800243a <f_open+0x1a2>
				res = FR_INVALID_NAME;
 8002314:	2006      	movs	r0, #6
 8002316:	e7e6      	b.n	80022e6 <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8002318:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800231c:	f013 0f11 	tst.w	r3, #17
 8002320:	d163      	bne.n	80023ea <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8002322:	f018 0f04 	tst.w	r8, #4
 8002326:	f040 80bd 	bne.w	80024a4 <f_open+0x20c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800232a:	0728      	lsls	r0, r5, #28
 800232c:	d53c      	bpl.n	80023a8 <f_open+0x110>
				dw = GET_FATTIME();
 800232e:	f001 ff9d 	bl	800426c <get_fattime>
 8002332:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8002334:	4601      	mov	r1, r0
 8002336:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002338:	300e      	adds	r0, #14
 800233a:	f7fe fef1 	bl	8001120 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800233e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002340:	4611      	mov	r1, r2
 8002342:	3016      	adds	r0, #22
 8002344:	f7fe feec 	bl	8001120 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800234a:	f8dd 9008 	ldr.w	r9, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800234e:	2220      	movs	r2, #32
 8002350:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8002352:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8002356:	f899 0000 	ldrb.w	r0, [r9]
 800235a:	4651      	mov	r1, sl
 800235c:	f7fe ffd7 	bl	800130e <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8002360:	2200      	movs	r2, #0
 8002362:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8002364:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8002366:	4648      	mov	r0, r9
 8002368:	f7fe ffdf 	bl	800132a <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 800236c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800236e:	2200      	movs	r2, #0
 8002370:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8002372:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8002374:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8002376:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8002378:	9b02      	ldr	r3, [sp, #8]
 800237a:	2101      	movs	r1, #1
 800237c:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800237e:	f1b8 0f00 	cmp.w	r8, #0
 8002382:	d011      	beq.n	80023a8 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8002384:	4641      	mov	r1, r8
 8002386:	4630      	mov	r0, r6
						dw = fs->winsect;
 8002388:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800238c:	f7ff fb7a 	bl	8001a84 <remove_chain>
						if (res == FR_OK) {
 8002390:	2800      	cmp	r0, #0
 8002392:	d1bb      	bne.n	800230c <f_open+0x74>
							res = move_window(fs, dw);
 8002394:	4649      	mov	r1, r9
 8002396:	9802      	ldr	r0, [sp, #8]
 8002398:	f7ff f847 	bl	800142a <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800239c:	9a02      	ldr	r2, [sp, #8]
 800239e:	f108 33ff 	add.w	r3, r8, #4294967295
 80023a2:	6113      	str	r3, [r2, #16]
		if (res == FR_OK) {
 80023a4:	2800      	cmp	r0, #0
 80023a6:	d1b1      	bne.n	800230c <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80023a8:	9b02      	ldr	r3, [sp, #8]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80023aa:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 80023b0:	bf48      	it	mi
 80023b2:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80023b6:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 80023ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80023bc:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80023be:	bf14      	ite	ne
 80023c0:	2101      	movne	r1, #1
 80023c2:	2100      	moveq	r1, #0
 80023c4:	4630      	mov	r0, r6
 80023c6:	f7fe fee7 	bl	8001198 <inc_lock>
 80023ca:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d13c      	bne.n	800244a <f_open+0x1b2>
 80023d0:	2002      	movs	r0, #2
 80023d2:	e79b      	b.n	800230c <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 80023d4:	2800      	cmp	r0, #0
 80023d6:	d199      	bne.n	800230c <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80023d8:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80023dc:	06da      	lsls	r2, r3, #27
 80023de:	d463      	bmi.n	80024a8 <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80023e0:	f018 0f02 	tst.w	r8, #2
 80023e4:	d0e0      	beq.n	80023a8 <f_open+0x110>
 80023e6:	07db      	lsls	r3, r3, #31
 80023e8:	d5de      	bpl.n	80023a8 <f_open+0x110>
					res = FR_DENIED;
 80023ea:	2007      	movs	r0, #7
 80023ec:	e78e      	b.n	800230c <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 80023ee:	6820      	ldr	r0, [r4, #0]
 80023f0:	f7ff fa54 	bl	800189c <get_fat.isra.7>
					if (clst <= 1) res = FR_INT_ERR;
 80023f4:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80023f6:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80023f8:	d923      	bls.n	8002442 <f_open+0x1aa>
 80023fa:	1c42      	adds	r2, r0, #1
 80023fc:	4250      	negs	r0, r2
 80023fe:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002400:	eba5 0508 	sub.w	r5, r5, r8
 8002404:	2800      	cmp	r0, #0
 8002406:	d049      	beq.n	800249c <f_open+0x204>
				fp->clust = clst;
 8002408:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800240a:	2800      	cmp	r0, #0
 800240c:	f47f af7e 	bne.w	800230c <f_open+0x74>
 8002410:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8002414:	b18b      	cbz	r3, 800243a <f_open+0x1a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8002416:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800241a:	4640      	mov	r0, r8
 800241c:	f7fe ff10 	bl	8001240 <clust2sect>
 8002420:	2800      	cmp	r0, #0
 8002422:	d0d5      	beq.n	80023d0 <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8002424:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8002428:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800242a:	2301      	movs	r3, #1
 800242c:	4631      	mov	r1, r6
 800242e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8002432:	f7fe fe43 	bl	80010bc <disk_read>
 8002436:	2800      	cmp	r0, #0
 8002438:	d138      	bne.n	80024ac <f_open+0x214>

	LEAVE_FF(fs, res);
}
 800243a:	4638      	mov	r0, r7
 800243c:	b010      	add	sp, #64	; 0x40
 800243e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 8002442:	2002      	movs	r0, #2
 8002444:	e7dc      	b.n	8002400 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 8002446:	2709      	movs	r7, #9
 8002448:	e7f7      	b.n	800243a <f_open+0x1a2>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800244a:	9e02      	ldr	r6, [sp, #8]
 800244c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8002450:	7830      	ldrb	r0, [r6, #0]
 8002452:	4641      	mov	r1, r8
 8002454:	f7fe ff5b 	bl	800130e <ld_clust.isra.1>
 8002458:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800245a:	f108 001c 	add.w	r0, r8, #28
 800245e:	f7fe fe57 	bl	8001110 <ld_dword>
			fp->obj.id = fs->id;
 8002462:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8002464:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8002466:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8002468:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800246c:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 800246e:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8002470:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 8002472:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8002474:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8002476:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8002478:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800247a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247e:	4630      	mov	r0, r6
 8002480:	f7fe fe56 	bl	8001130 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8002484:	06ab      	lsls	r3, r5, #26
 8002486:	d5d8      	bpl.n	800243a <f_open+0x1a2>
 8002488:	68e5      	ldr	r5, [r4, #12]
 800248a:	2d00      	cmp	r5, #0
 800248c:	d0d5      	beq.n	800243a <f_open+0x1a2>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800248e:	9b02      	ldr	r3, [sp, #8]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8002490:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002492:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8002496:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002498:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800249c:	45a8      	cmp	r8, r5
 800249e:	d3a6      	bcc.n	80023ee <f_open+0x156>
 80024a0:	2000      	movs	r0, #0
 80024a2:	e7b1      	b.n	8002408 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80024a4:	2008      	movs	r0, #8
 80024a6:	e731      	b.n	800230c <f_open+0x74>
					res = FR_NO_FILE;
 80024a8:	2004      	movs	r0, #4
 80024aa:	e72f      	b.n	800230c <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80024ac:	2001      	movs	r0, #1
 80024ae:	e72d      	b.n	800230c <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80024b0:	4630      	mov	r0, r6
 80024b2:	f7ff fc4d 	bl	8001d50 <dir_register>
 80024b6:	e726      	b.n	8002306 <f_open+0x6e>
 80024b8:	200000a8 	.word	0x200000a8

080024bc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80024bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c0:	469b      	mov	fp, r3
 80024c2:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80024c4:	2300      	movs	r3, #0
{
 80024c6:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 80024c8:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80024cc:	a903      	add	r1, sp, #12
{
 80024ce:	4604      	mov	r4, r0
 80024d0:	4615      	mov	r5, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80024d2:	f7fe fef8 	bl	80012c6 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80024d6:	4606      	mov	r6, r0
 80024d8:	bb00      	cbnz	r0, 800251c <f_read+0x60>
 80024da:	7d66      	ldrb	r6, [r4, #21]
 80024dc:	b9f6      	cbnz	r6, 800251c <f_read+0x60>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80024de:	7d23      	ldrb	r3, [r4, #20]
 80024e0:	07da      	lsls	r2, r3, #31
 80024e2:	f140 8096 	bpl.w	8002612 <f_read+0x156>
	remain = fp->obj.objsize - fp->fptr;
 80024e6:	68e3      	ldr	r3, [r4, #12]
 80024e8:	69a7      	ldr	r7, [r4, #24]
 80024ea:	1bdf      	subs	r7, r3, r7
 80024ec:	42af      	cmp	r7, r5
 80024ee:	bf28      	it	cs
 80024f0:	462f      	movcs	r7, r5
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80024f2:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btr;								/* Repeat until all data read */
 80024f6:	b18f      	cbz	r7, 800251c <f_read+0x60>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80024f8:	69a1      	ldr	r1, [r4, #24]
 80024fa:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d179      	bne.n	80025f6 <f_read+0x13a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8002502:	9b03      	ldr	r3, [sp, #12]
 8002504:	895b      	ldrh	r3, [r3, #10]
 8002506:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8002508:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	d119      	bne.n	8002544 <f_read+0x88>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8002510:	b941      	cbnz	r1, 8002524 <f_read+0x68>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8002512:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8002514:	2801      	cmp	r0, #1
 8002516:	d810      	bhi.n	800253a <f_read+0x7e>
 8002518:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800251a:	7566      	strb	r6, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800251c:	4630      	mov	r0, r6
 800251e:	b005      	add	sp, #20
 8002520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8002524:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002526:	b11b      	cbz	r3, 8002530 <f_read+0x74>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8002528:	4620      	mov	r0, r4
 800252a:	f7fe fe94 	bl	8001256 <clmt_clust>
 800252e:	e7f1      	b.n	8002514 <f_read+0x58>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8002530:	69e1      	ldr	r1, [r4, #28]
 8002532:	6820      	ldr	r0, [r4, #0]
 8002534:	f7ff f9b2 	bl	800189c <get_fat.isra.7>
 8002538:	e7ec      	b.n	8002514 <f_read+0x58>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800253a:	1c43      	adds	r3, r0, #1
 800253c:	d101      	bne.n	8002542 <f_read+0x86>
 800253e:	2601      	movs	r6, #1
 8002540:	e7eb      	b.n	800251a <f_read+0x5e>
				fp->clust = clst;				/* Update current cluster */
 8002542:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8002544:	9b03      	ldr	r3, [sp, #12]
 8002546:	69e1      	ldr	r1, [r4, #28]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fe78 	bl	8001240 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8002550:	2800      	cmp	r0, #0
 8002552:	d0e1      	beq.n	8002518 <f_read+0x5c>
			sect += csect;
 8002554:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 8002556:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8002558:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 800255c:	d02d      	beq.n	80025ba <f_read+0xfe>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800255e:	9b00      	ldr	r3, [sp, #0]
 8002560:	9a01      	ldr	r2, [sp, #4]
 8002562:	895b      	ldrh	r3, [r3, #10]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002564:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8002566:	442a      	add	r2, r5
 8002568:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800256a:	bf88      	it	hi
 800256c:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800256e:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 8002570:	bf88      	it	hi
 8002572:	1a9d      	subhi	r5, r3, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002574:	462b      	mov	r3, r5
 8002576:	4642      	mov	r2, r8
 8002578:	4649      	mov	r1, r9
 800257a:	f7fe fd9f 	bl	80010bc <disk_read>
 800257e:	2800      	cmp	r0, #0
 8002580:	d1dd      	bne.n	800253e <f_read+0x82>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8002582:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8002586:	2b00      	cmp	r3, #0
 8002588:	da0b      	bge.n	80025a2 <f_read+0xe6>
 800258a:	6a20      	ldr	r0, [r4, #32]
 800258c:	eba0 0008 	sub.w	r0, r0, r8
 8002590:	4285      	cmp	r5, r0
 8002592:	d906      	bls.n	80025a2 <f_read+0xe6>
 8002594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002598:	4651      	mov	r1, sl
 800259a:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 800259e:	f7fe fead 	bl	80012fc <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80025a2:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80025a4:	69a3      	ldr	r3, [r4, #24]
 80025a6:	442b      	add	r3, r5
 80025a8:	61a3      	str	r3, [r4, #24]
 80025aa:	f8db 3000 	ldr.w	r3, [fp]
 80025ae:	442b      	add	r3, r5
 80025b0:	44a9      	add	r9, r5
 80025b2:	f8cb 3000 	str.w	r3, [fp]
 80025b6:	1b7f      	subs	r7, r7, r5
 80025b8:	e79d      	b.n	80024f6 <f_read+0x3a>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80025ba:	6a22      	ldr	r2, [r4, #32]
 80025bc:	4590      	cmp	r8, r2
 80025be:	d018      	beq.n	80025f2 <f_read+0x136>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80025c0:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	da0b      	bge.n	80025e0 <f_read+0x124>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80025c8:	9800      	ldr	r0, [sp, #0]
 80025ca:	2301      	movs	r3, #1
 80025cc:	4651      	mov	r1, sl
 80025ce:	7840      	ldrb	r0, [r0, #1]
 80025d0:	f7fe fd82 	bl	80010d8 <disk_write>
 80025d4:	2800      	cmp	r0, #0
 80025d6:	d1b2      	bne.n	800253e <f_read+0x82>
					fp->flag &= (BYTE)~FA_DIRTY;
 80025d8:	7d23      	ldrb	r3, [r4, #20]
 80025da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025de:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80025e0:	9803      	ldr	r0, [sp, #12]
 80025e2:	2301      	movs	r3, #1
 80025e4:	4642      	mov	r2, r8
 80025e6:	4651      	mov	r1, sl
 80025e8:	7840      	ldrb	r0, [r0, #1]
 80025ea:	f7fe fd67 	bl	80010bc <disk_read>
 80025ee:	2800      	cmp	r0, #0
 80025f0:	d1a5      	bne.n	800253e <f_read+0x82>
			fp->sect = sect;
 80025f2:	f8c4 8020 	str.w	r8, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80025f6:	69a1      	ldr	r1, [r4, #24]
 80025f8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80025fc:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
 8002600:	42bd      	cmp	r5, r7
 8002602:	bf28      	it	cs
 8002604:	463d      	movcs	r5, r7
 8002606:	462a      	mov	r2, r5
 8002608:	4451      	add	r1, sl
 800260a:	4648      	mov	r0, r9
 800260c:	f7fe fe76 	bl	80012fc <mem_cpy.part.0>
 8002610:	e7c8      	b.n	80025a4 <f_read+0xe8>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8002612:	2607      	movs	r6, #7
 8002614:	e782      	b.n	800251c <f_read+0x60>

08002616 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8002616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8002618:	a901      	add	r1, sp, #4
{
 800261a:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800261c:	f7fe fe53 	bl	80012c6 <validate>
	if (res == FR_OK) {
 8002620:	4605      	mov	r5, r0
 8002622:	2800      	cmp	r0, #0
 8002624:	d13a      	bne.n	800269c <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8002626:	7d23      	ldrb	r3, [r4, #20]
 8002628:	065a      	lsls	r2, r3, #25
 800262a:	d537      	bpl.n	800269c <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800262c:	061b      	lsls	r3, r3, #24
 800262e:	d50c      	bpl.n	800264a <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8002630:	9801      	ldr	r0, [sp, #4]
 8002632:	6a22      	ldr	r2, [r4, #32]
 8002634:	7840      	ldrb	r0, [r0, #1]
 8002636:	2301      	movs	r3, #1
 8002638:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800263c:	f7fe fd4c 	bl	80010d8 <disk_write>
 8002640:	bb78      	cbnz	r0, 80026a2 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8002642:	7d23      	ldrb	r3, [r4, #20]
 8002644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002648:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800264a:	f001 fe0f 	bl	800426c <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800264e:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8002650:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8002652:	9801      	ldr	r0, [sp, #4]
 8002654:	f7fe fee9 	bl	800142a <move_window>
				if (res == FR_OK) {
 8002658:	4605      	mov	r5, r0
 800265a:	b9f8      	cbnz	r0, 800269c <f_sync+0x86>
					dir = fp->dir_ptr;
 800265c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800265e:	7af3      	ldrb	r3, [r6, #11]
 8002660:	f043 0320 	orr.w	r3, r3, #32
 8002664:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8002666:	68a2      	ldr	r2, [r4, #8]
 8002668:	6820      	ldr	r0, [r4, #0]
 800266a:	4631      	mov	r1, r6
 800266c:	f7fe fe5d 	bl	800132a <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8002670:	68e1      	ldr	r1, [r4, #12]
 8002672:	f106 001c 	add.w	r0, r6, #28
 8002676:	f7fe fd53 	bl	8001120 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800267a:	4639      	mov	r1, r7
 800267c:	f106 0016 	add.w	r0, r6, #22
 8002680:	f7fe fd4e 	bl	8001120 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8002684:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8002686:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8002688:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 800268a:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 800268c:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800268e:	f7fe fe81 	bl	8001394 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8002692:	7d23      	ldrb	r3, [r4, #20]
 8002694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8002698:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800269a:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800269c:	4628      	mov	r0, r5
 800269e:	b003      	add	sp, #12
 80026a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80026a2:	2501      	movs	r5, #1
 80026a4:	e7fa      	b.n	800269c <f_sync+0x86>

080026a6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80026a6:	b513      	push	{r0, r1, r4, lr}
 80026a8:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80026aa:	f7ff ffb4 	bl	8002616 <f_sync>
	if (res == FR_OK)
 80026ae:	b948      	cbnz	r0, 80026c4 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80026b0:	a901      	add	r1, sp, #4
 80026b2:	4620      	mov	r0, r4
 80026b4:	f7fe fe07 	bl	80012c6 <validate>
		if (res == FR_OK) {
 80026b8:	b920      	cbnz	r0, 80026c4 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80026ba:	6920      	ldr	r0, [r4, #16]
 80026bc:	f7fe fda8 	bl	8001210 <dec_lock>
			if (res == FR_OK)
 80026c0:	b900      	cbnz	r0, 80026c4 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80026c2:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80026c4:	b002      	add	sp, #8
 80026c6:	bd10      	pop	{r4, pc}

080026c8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80026c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80026cc:	4606      	mov	r6, r0
 80026ce:	4690      	mov	r8, r2
	int n = 0;
	TCHAR c, *p = buff;
 80026d0:	4605      	mov	r5, r0
	int n = 0;
 80026d2:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80026d4:	1e4f      	subs	r7, r1, #1
 80026d6:	42bc      	cmp	r4, r7
 80026d8:	da10      	bge.n	80026fc <f_gets+0x34>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80026da:	ab01      	add	r3, sp, #4
 80026dc:	2201      	movs	r2, #1
 80026de:	4669      	mov	r1, sp
 80026e0:	4640      	mov	r0, r8
 80026e2:	f7ff feeb 	bl	80024bc <f_read>
		if (rc != 1) break;
 80026e6:	9b01      	ldr	r3, [sp, #4]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d107      	bne.n	80026fc <f_gets+0x34>
		c = s[0];
 80026ec:	f89d 3000 	ldrb.w	r3, [sp]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80026f0:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
		if (c == '\n') break;		/* Break on EOL */
 80026f4:	2b0a      	cmp	r3, #10
		n++;
 80026f6:	f104 0401 	add.w	r4, r4, #1
		if (c == '\n') break;		/* Break on EOL */
 80026fa:	d1ec      	bne.n	80026d6 <f_gets+0xe>
	}
	*p = 0;
 80026fc:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80026fe:	429c      	cmp	r4, r3
}
 8002700:	bf14      	ite	ne
 8002702:	4630      	movne	r0, r6
 8002704:	4618      	moveq	r0, r3
	*p = 0;
 8002706:	702b      	strb	r3, [r5, #0]
}
 8002708:	b002      	add	sp, #8
 800270a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002710 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002710:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8002712:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <FATFS_LinkDriverEx+0x40>)
 8002714:	7a5d      	ldrb	r5, [r3, #9]
 8002716:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800271a:	b9b5      	cbnz	r5, 800274a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800271c:	7a5d      	ldrb	r5, [r3, #9]
 800271e:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8002720:	7a5d      	ldrb	r5, [r3, #9]
 8002722:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8002726:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8002728:	7a58      	ldrb	r0, [r3, #9]
 800272a:	4418      	add	r0, r3
 800272c:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800272e:	7a5a      	ldrb	r2, [r3, #9]
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	1c50      	adds	r0, r2, #1
 8002734:	b2c0      	uxtb	r0, r0
 8002736:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8002738:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800273a:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800273c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800273e:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8002740:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8002742:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8002744:	70cc      	strb	r4, [r1, #3]
 8002746:	4620      	mov	r0, r4
 8002748:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800274a:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 800274c:	bd30      	pop	{r4, r5, pc}
 800274e:	bf00      	nop
 8002750:	200002cc 	.word	0x200002cc

08002754 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	f7ff bfdb 	b.w	8002710 <FATFS_LinkDriverEx>
	...

0800275c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800275c:	287f      	cmp	r0, #127	; 0x7f
{
 800275e:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 8002760:	d916      	bls.n	8002790 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8002762:	b131      	cbz	r1, 8002772 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8002764:	28ff      	cmp	r0, #255	; 0xff
 8002766:	d812      	bhi.n	800278e <ff_convert+0x32>
 8002768:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <ff_convert+0x38>)
 800276a:	3880      	subs	r0, #128	; 0x80
 800276c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8002770:	bd10      	pop	{r4, pc}

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
 8002772:	4a08      	ldr	r2, [pc, #32]	; (8002794 <ff_convert+0x38>)
 8002774:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
 8002778:	4284      	cmp	r4, r0
 800277a:	b28b      	uxth	r3, r1
 800277c:	d003      	beq.n	8002786 <ff_convert+0x2a>
 800277e:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 8002780:	2980      	cmp	r1, #128	; 0x80
 8002782:	d1f7      	bne.n	8002774 <ff_convert+0x18>
 8002784:	460b      	mov	r3, r1
			}
			c = (c + 0x80) & 0xFF;
 8002786:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800278a:	b2c0      	uxtb	r0, r0
 800278c:	bd10      	pop	{r4, pc}
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800278e:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8002790:	bd10      	pop	{r4, pc}
 8002792:	bf00      	nop
 8002794:	08004e12 	.word	0x08004e12

08002798 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8002798:	b570      	push	{r4, r5, r6, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800279a:	4a1e      	ldr	r2, [pc, #120]	; (8002814 <ff_wtoupper+0x7c>)
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <ff_wtoupper+0x80>)
 800279e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80027a2:	bf28      	it	cs
 80027a4:	4613      	movcs	r3, r2
 80027a6:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
 80027a8:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 80027ac:	460a      	mov	r2, r1
		if (!bc || chr < bc) break;
 80027ae:	b383      	cbz	r3, 8002812 <ff_wtoupper+0x7a>
 80027b0:	4298      	cmp	r0, r3
 80027b2:	d32e      	bcc.n	8002812 <ff_wtoupper+0x7a>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80027b4:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 80027b8:	0a25      	lsrs	r5, r4, #8
 80027ba:	b2e4      	uxtb	r4, r4
		if (chr < bc + nc) {	/* In the block? */
 80027bc:	18e6      	adds	r6, r4, r3
 80027be:	42b0      	cmp	r0, r6
 80027c0:	da21      	bge.n	8002806 <ff_wtoupper+0x6e>
			switch (cmd) {
 80027c2:	2d08      	cmp	r5, #8
 80027c4:	d825      	bhi.n	8002812 <ff_wtoupper+0x7a>
 80027c6:	e8df f005 	tbb	[pc, r5]
 80027ca:	0905      	.short	0x0905
 80027cc:	1513110f 	.word	0x1513110f
 80027d0:	1917      	.short	0x1917
 80027d2:	1b          	.byte	0x1b
 80027d3:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80027d4:	1ac0      	subs	r0, r0, r3
 80027d6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 80027da:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80027dc:	1ac3      	subs	r3, r0, r3
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	1ac0      	subs	r0, r0, r3
			case 3:	chr -= 32; break;				/* Shift -32 */
			case 4:	chr -= 48; break;				/* Shift -48 */
			case 5:	chr -= 26; break;				/* Shift -26 */
			case 6:	chr += 8; break;				/* Shift +8 */
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80027e4:	b280      	uxth	r0, r0
 80027e6:	bd70      	pop	{r4, r5, r6, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 80027e8:	3810      	subs	r0, #16
 80027ea:	e7fb      	b.n	80027e4 <ff_wtoupper+0x4c>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80027ec:	3820      	subs	r0, #32
 80027ee:	e7f9      	b.n	80027e4 <ff_wtoupper+0x4c>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80027f0:	3830      	subs	r0, #48	; 0x30
 80027f2:	e7f7      	b.n	80027e4 <ff_wtoupper+0x4c>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80027f4:	381a      	subs	r0, #26
 80027f6:	e7f5      	b.n	80027e4 <ff_wtoupper+0x4c>
			case 6:	chr += 8; break;				/* Shift +8 */
 80027f8:	3008      	adds	r0, #8
 80027fa:	e7f3      	b.n	80027e4 <ff_wtoupper+0x4c>
			case 7: chr -= 80; break;				/* Shift -80 */
 80027fc:	3850      	subs	r0, #80	; 0x50
 80027fe:	e7f1      	b.n	80027e4 <ff_wtoupper+0x4c>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8002800:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8002804:	e7ee      	b.n	80027e4 <ff_wtoupper+0x4c>
 8002806:	3104      	adds	r1, #4
			}
			break;
		}
		if (!cmd) p += nc;
 8002808:	2d00      	cmp	r5, #0
 800280a:	d1cd      	bne.n	80027a8 <ff_wtoupper+0x10>
 800280c:	eb02 0344 	add.w	r3, r2, r4, lsl #1
 8002810:	e7c9      	b.n	80027a6 <ff_wtoupper+0xe>
	}

	return chr;
}
 8002812:	bd70      	pop	{r4, r5, r6, pc}
 8002814:	08005104 	.word	0x08005104
 8002818:	08004f12 	.word	0x08004f12

0800281c <imm>:
/* Addressing modes */

// Immediate:
// - Return current PC and increment PC (immediate stored here)
u16 imm() {
	return PC++;
 800281c:	4b02      	ldr	r3, [pc, #8]	; (8002828 <imm+0xc>)
 800281e:	8818      	ldrh	r0, [r3, #0]
 8002820:	1c42      	adds	r2, r0, #1
 8002822:	801a      	strh	r2, [r3, #0]
}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	200002e2 	.word	0x200002e2

0800282c <BCC.part.6>:
		PC++;
		tick();
	}
}

void BEQ(mode m) {
 800282c:	b508      	push	{r3, lr}
	if (P[1]) {
		PC = m();
 800282e:	4780      	blx	r0
 8002830:	4b01      	ldr	r3, [pc, #4]	; (8002838 <BCC.part.6+0xc>)
 8002832:	8018      	strh	r0, [r3, #0]
 8002834:	bd08      	pop	{r3, pc}
 8002836:	bf00      	nop
 8002838:	200002e2 	.word	0x200002e2

0800283c <tick>:
	cycles++;
 800283c:	4a02      	ldr	r2, [pc, #8]	; (8002848 <tick+0xc>)
 800283e:	6813      	ldr	r3, [r2, #0]
 8002840:	3301      	adds	r3, #1
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	200002e8 	.word	0x200002e8

0800284c <rd>:
	if (addr < 0x1800) {
 800284c:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
 8002850:	d204      	bcs.n	800285c <rd+0x10>
		return ram[addr % 0x800];
 8002852:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8002856:	4a05      	ldr	r2, [pc, #20]	; (800286c <rd+0x20>)
 8002858:	5cd0      	ldrb	r0, [r2, r3]
 800285a:	4770      	bx	lr
	else if (addr < 0x4020) {
 800285c:	f244 021f 	movw	r2, #16415	; 0x401f
 8002860:	4290      	cmp	r0, r2
 8002862:	d901      	bls.n	8002868 <rd+0x1c>
		return mapper_rd(addr);
 8002864:	f001 bb9e 	b.w	8003fa4 <mapper_rd>
		return 0;
 8002868:	2000      	movs	r0, #0
}
 800286a:	4770      	bx	lr
 800286c:	200002ee 	.word	0x200002ee

08002870 <zp>:
u16 zp() {
 8002870:	b508      	push	{r3, lr}
	u16 addr = rd(imm());
 8002872:	f7ff ffd3 	bl	800281c <imm>
 8002876:	f7ff ffe9 	bl	800284c <rd>
	tick();
 800287a:	f7ff ffdf 	bl	800283c <tick>
}
 800287e:	bd08      	pop	{r3, pc}

08002880 <zpx>:
u16 zpx() {
 8002880:	b508      	push	{r3, lr}
	u16 addr = (zp() + X) % 0x100;
 8002882:	f7ff fff5 	bl	8002870 <zp>
 8002886:	4b03      	ldr	r3, [pc, #12]	; (8002894 <zpx+0x14>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	4418      	add	r0, r3
 800288c:	b2c0      	uxtb	r0, r0
	tick();
 800288e:	f7ff ffd5 	bl	800283c <tick>
}
 8002892:	bd08      	pop	{r3, pc}
 8002894:	200002e5 	.word	0x200002e5

08002898 <zpy>:
u16 zpy() {
 8002898:	b508      	push	{r3, lr}
	u16 addr = (zp() + Y) % 0x100;
 800289a:	f7ff ffe9 	bl	8002870 <zp>
 800289e:	4b03      	ldr	r3, [pc, #12]	; (80028ac <zpy+0x14>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	4418      	add	r0, r3
 80028a4:	b2c0      	uxtb	r0, r0
	tick();
 80028a6:	f7ff ffc9 	bl	800283c <tick>
}
 80028aa:	bd08      	pop	{r3, pc}
 80028ac:	200002e6 	.word	0x200002e6

080028b0 <absl>:
u16 absl() {
 80028b0:	b510      	push	{r4, lr}
	u8 addrl = (u8)zp();
 80028b2:	f7ff ffdd 	bl	8002870 <zp>
 80028b6:	4604      	mov	r4, r0
	u8 addrh = (u8)zp();
 80028b8:	f7ff ffda 	bl	8002870 <zp>
	return addrl | (addrh << 8);
 80028bc:	b2e4      	uxtb	r4, r4
 80028be:	b2c0      	uxtb	r0, r0
}
 80028c0:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
 80028c4:	bd10      	pop	{r4, pc}
	...

080028c8 <rel>:
u16 rel() {
 80028c8:	b508      	push	{r3, lr}
	u8 imm = (u8)zp();
 80028ca:	f7ff ffd1 	bl	8002870 <zp>
	u16 addr = PC + imm;
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <rel+0x20>)
 80028d0:	8819      	ldrh	r1, [r3, #0]
 80028d2:	fa51 f080 	uxtab	r0, r1, r0
 80028d6:	b280      	uxth	r0, r0
	tick();
 80028d8:	f7ff ffb0 	bl	800283c <tick>
	if ((addr & 0x100) != (PC & 0x100)) tick();
 80028dc:	4041      	eors	r1, r0
 80028de:	05cb      	lsls	r3, r1, #23
 80028e0:	d501      	bpl.n	80028e6 <rel+0x1e>
 80028e2:	f7ff ffab 	bl	800283c <tick>
}
 80028e6:	bd08      	pop	{r3, pc}
 80028e8:	200002e2 	.word	0x200002e2

080028ec <absx_rd>:
u16 absx_rd() {
 80028ec:	b510      	push	{r4, lr}
	u16 addrl = zp();
 80028ee:	f7ff ffbf 	bl	8002870 <zp>
 80028f2:	4604      	mov	r4, r0
	u8 addrh = rd(imm());
 80028f4:	f7ff ff92 	bl	800281c <imm>
 80028f8:	f7ff ffa8 	bl	800284c <rd>
	addrl += X;
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <absx_rd+0x34>)
 80028fe:	7819      	ldrb	r1, [r3, #0]
 8002900:	440c      	add	r4, r1
 8002902:	b2a4      	uxth	r4, r4
	tick();
 8002904:	f7ff ff9a 	bl	800283c <tick>
	if ((addrl & 0xFF00) != 0) {
 8002908:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
 800290c:	d004      	beq.n	8002918 <absx_rd+0x2c>
		addrh++;
 800290e:	3001      	adds	r0, #1
		addrl %= 0x100;
 8002910:	b2e4      	uxtb	r4, r4
		addrh++;
 8002912:	b2c0      	uxtb	r0, r0
		tick();
 8002914:	f7ff ff92 	bl	800283c <tick>
	return addrl | (addrh << 8);
 8002918:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 800291c:	b280      	uxth	r0, r0
 800291e:	bd10      	pop	{r4, pc}
 8002920:	200002e5 	.word	0x200002e5

08002924 <absx_wr>:
u16 absx_wr() {
 8002924:	b510      	push	{r4, lr}
	u16 addrl = zp();
 8002926:	f7ff ffa3 	bl	8002870 <zp>
 800292a:	4604      	mov	r4, r0
	u8 addrh = rd(imm());
 800292c:	f7ff ff76 	bl	800281c <imm>
 8002930:	f7ff ff8c 	bl	800284c <rd>
	addrl += X;
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <absx_wr+0x34>)
 8002936:	7819      	ldrb	r1, [r3, #0]
 8002938:	440c      	add	r4, r1
	tick();
 800293a:	f7ff ff7f 	bl	800283c <tick>
	addrl += X;
 800293e:	b2a4      	uxth	r4, r4
	if ((addrl & 0xFF00) != 0) {
 8002940:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
		addrh++;
 8002944:	bf1e      	ittt	ne
 8002946:	3001      	addne	r0, #1
		addrl %= 0x100;
 8002948:	b2e4      	uxtbne	r4, r4
		addrh++;
 800294a:	b2c0      	uxtbne	r0, r0
	tick();
 800294c:	f7ff ff76 	bl	800283c <tick>
	return addrl | (addrh << 8);
 8002950:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 8002954:	b280      	uxth	r0, r0
 8002956:	bd10      	pop	{r4, pc}
 8002958:	200002e5 	.word	0x200002e5

0800295c <absy_rd>:
u16 absy_rd() {
 800295c:	b510      	push	{r4, lr}
	u16 addrl = zp();
 800295e:	f7ff ff87 	bl	8002870 <zp>
 8002962:	4604      	mov	r4, r0
	u8 addrh = rd(imm());
 8002964:	f7ff ff5a 	bl	800281c <imm>
 8002968:	f7ff ff70 	bl	800284c <rd>
	addrl += Y;
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <absy_rd+0x34>)
 800296e:	7819      	ldrb	r1, [r3, #0]
 8002970:	440c      	add	r4, r1
 8002972:	b2a4      	uxth	r4, r4
	tick();
 8002974:	f7ff ff62 	bl	800283c <tick>
	if ((addrl & 0xFF00) != 0) {
 8002978:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
 800297c:	d004      	beq.n	8002988 <absy_rd+0x2c>
		addrh++;
 800297e:	3001      	adds	r0, #1
		addrl %= 0x100;
 8002980:	b2e4      	uxtb	r4, r4
		addrh++;
 8002982:	b2c0      	uxtb	r0, r0
		tick();
 8002984:	f7ff ff5a 	bl	800283c <tick>
	return addrl | (addrh << 8);
 8002988:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 800298c:	b280      	uxth	r0, r0
 800298e:	bd10      	pop	{r4, pc}
 8002990:	200002e6 	.word	0x200002e6

08002994 <absy_wr>:
u16 absy_wr() {
 8002994:	b510      	push	{r4, lr}
	u16 addrl = zp();
 8002996:	f7ff ff6b 	bl	8002870 <zp>
 800299a:	4604      	mov	r4, r0
	u8 addrh = rd(imm());
 800299c:	f7ff ff3e 	bl	800281c <imm>
 80029a0:	f7ff ff54 	bl	800284c <rd>
	addrl += Y;
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <absy_wr+0x34>)
 80029a6:	7819      	ldrb	r1, [r3, #0]
 80029a8:	440c      	add	r4, r1
	tick();
 80029aa:	f7ff ff47 	bl	800283c <tick>
	addrl += Y;
 80029ae:	b2a4      	uxth	r4, r4
	if ((addrl & 0xFF00) != 0) {
 80029b0:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
		addrh++;
 80029b4:	bf1e      	ittt	ne
 80029b6:	3001      	addne	r0, #1
		addrl %= 0x100;
 80029b8:	b2e4      	uxtbne	r4, r4
		addrh++;
 80029ba:	b2c0      	uxtbne	r0, r0
	tick();
 80029bc:	f7ff ff3e 	bl	800283c <tick>
	return addrl | (addrh << 8);
 80029c0:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 80029c4:	b280      	uxth	r0, r0
 80029c6:	bd10      	pop	{r4, pc}
 80029c8:	200002e6 	.word	0x200002e6

080029cc <ind>:
u16 ind() {
 80029cc:	b570      	push	{r4, r5, r6, lr}
	u8 ptrl = (u8)zp();
 80029ce:	f7ff ff4f 	bl	8002870 <zp>
 80029d2:	4604      	mov	r4, r0
	u8 ptrh = (u8)zp();
 80029d4:	f7ff ff4c 	bl	8002870 <zp>
	u16 ptr = ptrl | (ptrh << 8);
 80029d8:	b2e4      	uxtb	r4, r4
 80029da:	b2c0      	uxtb	r0, r0
 80029dc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 80029e0:	b224      	sxth	r4, r4
 80029e2:	b2a5      	uxth	r5, r4
	u8 addrl = rd(ptr);
 80029e4:	4628      	mov	r0, r5
 80029e6:	f7ff ff31 	bl	800284c <rd>
	u8 addrh = rd((ptr & 0xFF00) | ((ptr + 1) % 0x100));
 80029ea:	3501      	adds	r5, #1
	u8 addrl = rd(ptr);
 80029ec:	4606      	mov	r6, r0
	u8 addrh = rd((ptr & 0xFF00) | ((ptr + 1) % 0x100));
 80029ee:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
	tick();
 80029f2:	f7ff ff23 	bl	800283c <tick>
	u8 addrh = rd((ptr & 0xFF00) | ((ptr + 1) % 0x100));
 80029f6:	b2e8      	uxtb	r0, r5
 80029f8:	4320      	orrs	r0, r4
 80029fa:	f7ff ff27 	bl	800284c <rd>
	tick();
 80029fe:	f7ff ff1d 	bl	800283c <tick>
	return addrl | (addrh << 8);
 8002a02:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
}
 8002a06:	b280      	uxth	r0, r0
 8002a08:	bd70      	pop	{r4, r5, r6, pc}

08002a0a <xind>:
u16 xind() {
 8002a0a:	b538      	push	{r3, r4, r5, lr}
	u8 ptr = (u8)zpx();
 8002a0c:	f7ff ff38 	bl	8002880 <zpx>
	u8 addrl = rd(ptr);
 8002a10:	b2c4      	uxtb	r4, r0
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7ff ff1a 	bl	800284c <rd>
 8002a18:	4605      	mov	r5, r0
	tick();
 8002a1a:	f7ff ff0f 	bl	800283c <tick>
	u8 addrh = rd((ptr + 1) % 0x100);
 8002a1e:	1c60      	adds	r0, r4, #1
 8002a20:	b2c0      	uxtb	r0, r0
 8002a22:	f7ff ff13 	bl	800284c <rd>
	tick();
 8002a26:	f7ff ff09 	bl	800283c <tick>
	return addrl | (addrh << 8);
 8002a2a:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
}
 8002a2e:	b280      	uxth	r0, r0
 8002a30:	bd38      	pop	{r3, r4, r5, pc}
	...

08002a34 <indy_rd>:
u16 indy_rd() {
 8002a34:	b538      	push	{r3, r4, r5, lr}
	u8 ptr = (u8)zp();
 8002a36:	f7ff ff1b 	bl	8002870 <zp>
	u16 addrl = rd(ptr);
 8002a3a:	b2c5      	uxtb	r5, r0
 8002a3c:	4628      	mov	r0, r5
 8002a3e:	f7ff ff05 	bl	800284c <rd>
 8002a42:	b284      	uxth	r4, r0
	tick();
 8002a44:	f7ff fefa 	bl	800283c <tick>
	u8 addrh = rd((ptr + 1) % 0x100);
 8002a48:	1c68      	adds	r0, r5, #1
 8002a4a:	b2c0      	uxtb	r0, r0
 8002a4c:	f7ff fefe 	bl	800284c <rd>
	addrl += Y;
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <indy_rd+0x40>)
 8002a52:	7819      	ldrb	r1, [r3, #0]
 8002a54:	440c      	add	r4, r1
 8002a56:	b2a4      	uxth	r4, r4
	tick();
 8002a58:	f7ff fef0 	bl	800283c <tick>
	if ((addrl & 0xFF00) != 0) {
 8002a5c:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
 8002a60:	d004      	beq.n	8002a6c <indy_rd+0x38>
		addrh = (addrh + 1);
 8002a62:	3001      	adds	r0, #1
		addrl %= 0x100;
 8002a64:	b2e4      	uxtb	r4, r4
		addrh = (addrh + 1);
 8002a66:	b2c0      	uxtb	r0, r0
		tick();
 8002a68:	f7ff fee8 	bl	800283c <tick>
	return addrl | (addrh << 8);
 8002a6c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 8002a70:	b280      	uxth	r0, r0
 8002a72:	bd38      	pop	{r3, r4, r5, pc}
 8002a74:	200002e6 	.word	0x200002e6

08002a78 <indy_wr>:
u16 indy_wr() {
 8002a78:	b538      	push	{r3, r4, r5, lr}
	u8 ptr = (u8)zp();
 8002a7a:	f7ff fef9 	bl	8002870 <zp>
	u16 addrl = rd(ptr);
 8002a7e:	b2c5      	uxtb	r5, r0
 8002a80:	4628      	mov	r0, r5
 8002a82:	f7ff fee3 	bl	800284c <rd>
 8002a86:	b284      	uxth	r4, r0
	tick();
 8002a88:	f7ff fed8 	bl	800283c <tick>
	u8 addrh = rd((ptr + 1) % 0x100);
 8002a8c:	1c68      	adds	r0, r5, #1
 8002a8e:	b2c0      	uxtb	r0, r0
 8002a90:	f7ff fedc 	bl	800284c <rd>
	addrl += Y;
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <indy_wr+0x40>)
 8002a96:	7819      	ldrb	r1, [r3, #0]
 8002a98:	440c      	add	r4, r1
	tick();
 8002a9a:	f7ff fecf 	bl	800283c <tick>
	addrl += Y;
 8002a9e:	b2a4      	uxth	r4, r4
	if ((addrl & 0xFF00) != 0) {
 8002aa0:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
		addrh = (addrh + 1);
 8002aa4:	bf1e      	ittt	ne
 8002aa6:	3001      	addne	r0, #1
		addrl %= 0x100;
 8002aa8:	b2e4      	uxtbne	r4, r4
		addrh = (addrh + 1);
 8002aaa:	b2c0      	uxtbne	r0, r0
	tick();
 8002aac:	f7ff fec6 	bl	800283c <tick>
	return addrl | (addrh << 8);
 8002ab0:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 8002ab4:	b280      	uxth	r0, r0
 8002ab6:	bd38      	pop	{r3, r4, r5, pc}
 8002ab8:	200002e6 	.word	0x200002e6

08002abc <wr>:
	if (addr < 0x1800) {
 8002abc:	f5b0 5fc0 	cmp.w	r0, #6144	; 0x1800
void wr(u16 addr, u8 data) {
 8002ac0:	b410      	push	{r4}
	if (addr < 0x1800) {
 8002ac2:	d206      	bcs.n	8002ad2 <wr+0x16>
		ram[addr % 0x800] = data;
 8002ac4:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8002ac8:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <wr+0x28>)
 8002aca:	54d1      	strb	r1, [r2, r3]
}
 8002acc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ad0:	4770      	bx	lr
	else if (addr < 0x4020) {
 8002ad2:	f244 021f 	movw	r2, #16415	; 0x401f
 8002ad6:	4290      	cmp	r0, r2
 8002ad8:	d9f8      	bls.n	8002acc <wr+0x10>
}
 8002ada:	f85d 4b04 	ldr.w	r4, [sp], #4
		mapper_wr(addr, data);
 8002ade:	f001 ba8b 	b.w	8003ff8 <mapper_wr>
 8002ae2:	bf00      	nop
 8002ae4:	200002ee 	.word	0x200002ee

08002ae8 <push>:
	wr(0x100 | S--, data);
 8002ae8:	4a04      	ldr	r2, [pc, #16]	; (8002afc <push+0x14>)
 8002aea:	7813      	ldrb	r3, [r2, #0]
 8002aec:	1e59      	subs	r1, r3, #1
 8002aee:	7011      	strb	r1, [r2, #0]
 8002af0:	4601      	mov	r1, r0
 8002af2:	f443 7080 	orr.w	r0, r3, #256	; 0x100
 8002af6:	f7ff bfe1 	b.w	8002abc <wr>
 8002afa:	bf00      	nop
 8002afc:	200002e4 	.word	0x200002e4

08002b00 <pull>:
	return rd(0x100 | ++S);
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <pull+0x14>)
 8002b02:	7818      	ldrb	r0, [r3, #0]
 8002b04:	3001      	adds	r0, #1
 8002b06:	b2c0      	uxtb	r0, r0
 8002b08:	7018      	strb	r0, [r3, #0]
 8002b0a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8002b0e:	f7ff be9d 	b.w	800284c <rd>
 8002b12:	bf00      	nop
 8002b14:	200002e4 	.word	0x200002e4

08002b18 <setFlags>:
	P[0] = (value & 0x01);
 8002b18:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <setFlags+0x28>)
 8002b1a:	f000 0201 	and.w	r2, r0, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
	P[1] = (value & 0x02) >> 1;
 8002b20:	f3c0 0240 	ubfx	r2, r0, #1, #1
 8002b24:	705a      	strb	r2, [r3, #1]
	P[2] = (value & 0x04) >> 2;
 8002b26:	f3c0 0280 	ubfx	r2, r0, #2, #1
 8002b2a:	709a      	strb	r2, [r3, #2]
	P[3] = (value & 0x08) >> 3;
 8002b2c:	f3c0 02c0 	ubfx	r2, r0, #3, #1
 8002b30:	70da      	strb	r2, [r3, #3]
	P[6] = (value & 0x40) >> 6;
 8002b32:	f3c0 1280 	ubfx	r2, r0, #6, #1
	P[7] = (value & 0x80) >> 7;
 8002b36:	09c0      	lsrs	r0, r0, #7
	P[6] = (value & 0x40) >> 6;
 8002b38:	719a      	strb	r2, [r3, #6]
	P[7] = (value & 0x80) >> 7;
 8002b3a:	71d8      	strb	r0, [r3, #7]
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	200002d9 	.word	0x200002d9

08002b44 <getFlags>:
	return P[0] | (P[1] << 1) | (P[2] << 2) | (P[3] << 3) | 1 << 5 | (P[6] << 6) | (P[7] << 7);
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <getFlags+0x2c>)
 8002b46:	7818      	ldrb	r0, [r3, #0]
 8002b48:	785a      	ldrb	r2, [r3, #1]
 8002b4a:	f040 0020 	orr.w	r0, r0, #32
 8002b4e:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
 8002b52:	789a      	ldrb	r2, [r3, #2]
 8002b54:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
 8002b58:	78da      	ldrb	r2, [r3, #3]
 8002b5a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8002b5e:	799a      	ldrb	r2, [r3, #6]
 8002b60:	79db      	ldrb	r3, [r3, #7]
 8002b62:	ea40 1082 	orr.w	r0, r0, r2, lsl #6
 8002b66:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
}
 8002b6a:	b2c0      	uxtb	r0, r0
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	200002d9 	.word	0x200002d9

08002b74 <updateV>:
	P[6] = ((0xFF^d1^d2) & (d1^r) & 0x80) >> 7;
 8002b74:	4041      	eors	r1, r0
 8002b76:	4050      	eors	r0, r2
 8002b78:	ea20 0001 	bic.w	r0, r0, r1
 8002b7c:	4b02      	ldr	r3, [pc, #8]	; (8002b88 <updateV+0x14>)
 8002b7e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8002b82:	7198      	strb	r0, [r3, #6]
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	200002d9 	.word	0x200002d9

08002b8c <updateN>:
	P[7] = d >> 7;
 8002b8c:	4b01      	ldr	r3, [pc, #4]	; (8002b94 <updateN+0x8>)
 8002b8e:	09c0      	lsrs	r0, r0, #7
 8002b90:	71d8      	strb	r0, [r3, #7]
 8002b92:	4770      	bx	lr
 8002b94:	200002d9 	.word	0x200002d9

08002b98 <INT_NMI>:
void INT_NMI() {
 8002b98:	b538      	push	{r3, r4, r5, lr}
	push(PC >> 8);
 8002b9a:	4c18      	ldr	r4, [pc, #96]	; (8002bfc <INT_NMI+0x64>)
	tick();
 8002b9c:	f7ff fe4e 	bl	800283c <tick>
	tick();
 8002ba0:	f7ff fe4c 	bl	800283c <tick>
	push(PC >> 8);
 8002ba4:	8820      	ldrh	r0, [r4, #0]
 8002ba6:	0a00      	lsrs	r0, r0, #8
 8002ba8:	f7ff ff9e 	bl	8002ae8 <push>
	tick();
 8002bac:	f7ff fe46 	bl	800283c <tick>
	push(PC & 0xFF);
 8002bb0:	7820      	ldrb	r0, [r4, #0]
 8002bb2:	f7ff ff99 	bl	8002ae8 <push>
	tick();
 8002bb6:	f7ff fe41 	bl	800283c <tick>
	push(getFlags() | 0x20);
 8002bba:	f7ff ffc3 	bl	8002b44 <getFlags>
 8002bbe:	f040 0020 	orr.w	r0, r0, #32
 8002bc2:	b2c0      	uxtb	r0, r0
 8002bc4:	f7ff ff90 	bl	8002ae8 <push>
	tick();
 8002bc8:	f7ff fe38 	bl	800283c <tick>
	P[2] = 1;
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <INT_NMI+0x68>)
 8002bce:	2201      	movs	r2, #1
		return mapper_rd(addr);
 8002bd0:	f64f 70fa 	movw	r0, #65530	; 0xfffa
	P[2] = 1;
 8002bd4:	709a      	strb	r2, [r3, #2]
		return mapper_rd(addr);
 8002bd6:	f001 f9e5 	bl	8003fa4 <mapper_rd>
 8002bda:	4605      	mov	r5, r0
	tick();
 8002bdc:	f7ff fe2e 	bl	800283c <tick>
		return mapper_rd(addr);
 8002be0:	f64f 70fb 	movw	r0, #65531	; 0xfffb
 8002be4:	f001 f9de 	bl	8003fa4 <mapper_rd>
	nmi = 0;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <INT_NMI+0x6c>)
	PC = addrl | (addrh << 8);
 8002bea:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	nmi = 0;
 8002bee:	2200      	movs	r2, #0
	PC = addrl | (addrh << 8);
 8002bf0:	8020      	strh	r0, [r4, #0]
	nmi = 0;
 8002bf2:	701a      	strb	r2, [r3, #0]
}
 8002bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tick();
 8002bf8:	f7ff be20 	b.w	800283c <tick>
 8002bfc:	200002e2 	.word	0x200002e2
 8002c00:	200002d9 	.word	0x200002d9
 8002c04:	200002ed 	.word	0x200002ed

08002c08 <INT_RESET>:
void INT_RESET() {
 8002c08:	b510      	push	{r4, lr}
	tick();
 8002c0a:	f7ff fe17 	bl	800283c <tick>
	tick();
 8002c0e:	f7ff fe15 	bl	800283c <tick>
	S -= 3;
 8002c12:	4a10      	ldr	r2, [pc, #64]	; (8002c54 <INT_RESET+0x4c>)
 8002c14:	7813      	ldrb	r3, [r2, #0]
 8002c16:	3b03      	subs	r3, #3
 8002c18:	7013      	strb	r3, [r2, #0]
	tick();
 8002c1a:	f7ff fe0f 	bl	800283c <tick>
	tick();
 8002c1e:	f7ff fe0d 	bl	800283c <tick>
	tick();
 8002c22:	f7ff fe0b 	bl	800283c <tick>
	P[2] = 1;
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <INT_RESET+0x50>)
 8002c28:	2201      	movs	r2, #1
		return mapper_rd(addr);
 8002c2a:	f64f 70fc 	movw	r0, #65532	; 0xfffc
	P[2] = 1;
 8002c2e:	709a      	strb	r2, [r3, #2]
		return mapper_rd(addr);
 8002c30:	f001 f9b8 	bl	8003fa4 <mapper_rd>
 8002c34:	4604      	mov	r4, r0
	tick();
 8002c36:	f7ff fe01 	bl	800283c <tick>
		return mapper_rd(addr);
 8002c3a:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 8002c3e:	f001 f9b1 	bl	8003fa4 <mapper_rd>
	PC = addrl | (addrh << 8);
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <INT_RESET+0x54>)
 8002c44:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 8002c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PC = addrl | (addrh << 8);
 8002c4c:	8018      	strh	r0, [r3, #0]
	tick();
 8002c4e:	f7ff bdf5 	b.w	800283c <tick>
 8002c52:	bf00      	nop
 8002c54:	200002e4 	.word	0x200002e4
 8002c58:	200002d9 	.word	0x200002d9
 8002c5c:	200002e2 	.word	0x200002e2

08002c60 <INT_IRQ>:
void INT_IRQ() {
 8002c60:	b538      	push	{r3, r4, r5, lr}
	push(PC >> 8);
 8002c62:	4c18      	ldr	r4, [pc, #96]	; (8002cc4 <INT_IRQ+0x64>)
	tick();
 8002c64:	f7ff fdea 	bl	800283c <tick>
	tick();
 8002c68:	f7ff fde8 	bl	800283c <tick>
	push(PC >> 8);
 8002c6c:	8820      	ldrh	r0, [r4, #0]
 8002c6e:	0a00      	lsrs	r0, r0, #8
 8002c70:	f7ff ff3a 	bl	8002ae8 <push>
	tick();
 8002c74:	f7ff fde2 	bl	800283c <tick>
	push(PC & 0xFF);
 8002c78:	7820      	ldrb	r0, [r4, #0]
 8002c7a:	f7ff ff35 	bl	8002ae8 <push>
	tick();
 8002c7e:	f7ff fddd 	bl	800283c <tick>
	push(getFlags() | 0x20);
 8002c82:	f7ff ff5f 	bl	8002b44 <getFlags>
 8002c86:	f040 0020 	orr.w	r0, r0, #32
 8002c8a:	b2c0      	uxtb	r0, r0
 8002c8c:	f7ff ff2c 	bl	8002ae8 <push>
	tick();
 8002c90:	f7ff fdd4 	bl	800283c <tick>
	P[2] = 1;
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <INT_IRQ+0x68>)
 8002c96:	2201      	movs	r2, #1
		return mapper_rd(addr);
 8002c98:	f64f 70fe 	movw	r0, #65534	; 0xfffe
	P[2] = 1;
 8002c9c:	709a      	strb	r2, [r3, #2]
		return mapper_rd(addr);
 8002c9e:	f001 f981 	bl	8003fa4 <mapper_rd>
 8002ca2:	4605      	mov	r5, r0
	tick();
 8002ca4:	f7ff fdca 	bl	800283c <tick>
		return mapper_rd(addr);
 8002ca8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cac:	f001 f97a 	bl	8003fa4 <mapper_rd>
	nmi = 0;
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <INT_IRQ+0x6c>)
	PC = addrl | (addrh << 8);
 8002cb2:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	nmi = 0;
 8002cb6:	2200      	movs	r2, #0
	PC = addrl | (addrh << 8);
 8002cb8:	8020      	strh	r0, [r4, #0]
	nmi = 0;
 8002cba:	701a      	strb	r2, [r3, #0]
}
 8002cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tick();
 8002cc0:	f7ff bdbc 	b.w	800283c <tick>
 8002cc4:	200002e2 	.word	0x200002e2
 8002cc8:	200002d9 	.word	0x200002d9
 8002ccc:	200002ed 	.word	0x200002ed

08002cd0 <BRK>:
void BRK() {
 8002cd0:	b538      	push	{r3, r4, r5, lr}
	PC++;
 8002cd2:	4c16      	ldr	r4, [pc, #88]	; (8002d2c <BRK+0x5c>)
 8002cd4:	8820      	ldrh	r0, [r4, #0]
 8002cd6:	3001      	adds	r0, #1
 8002cd8:	b280      	uxth	r0, r0
 8002cda:	8020      	strh	r0, [r4, #0]
	tick();
 8002cdc:	f7ff fdae 	bl	800283c <tick>
	push(PC >> 8);
 8002ce0:	0a00      	lsrs	r0, r0, #8
 8002ce2:	f7ff ff01 	bl	8002ae8 <push>
	tick();
 8002ce6:	f7ff fda9 	bl	800283c <tick>
	push(PC & 0xFF);
 8002cea:	7820      	ldrb	r0, [r4, #0]
 8002cec:	f7ff fefc 	bl	8002ae8 <push>
	push(getFlags() | 0x30);
 8002cf0:	f7ff ff28 	bl	8002b44 <getFlags>
 8002cf4:	f040 0030 	orr.w	r0, r0, #48	; 0x30
 8002cf8:	b2c0      	uxtb	r0, r0
 8002cfa:	f7ff fef5 	bl	8002ae8 <push>
	tick();
 8002cfe:	f7ff fd9d 	bl	800283c <tick>
	P[2] = 1;
 8002d02:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <BRK+0x60>)
 8002d04:	2201      	movs	r2, #1
		return mapper_rd(addr);
 8002d06:	f64f 70fe 	movw	r0, #65534	; 0xfffe
	P[2] = 1;
 8002d0a:	709a      	strb	r2, [r3, #2]
		return mapper_rd(addr);
 8002d0c:	f001 f94a 	bl	8003fa4 <mapper_rd>
 8002d10:	4605      	mov	r5, r0
	tick();
 8002d12:	f7ff fd93 	bl	800283c <tick>
		return mapper_rd(addr);
 8002d16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d1a:	f001 f943 	bl	8003fa4 <mapper_rd>
	PC = addrl | (addrh << 8);
 8002d1e:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 8002d22:	8020      	strh	r0, [r4, #0]
}
 8002d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tick();
 8002d28:	f7ff bd88 	b.w	800283c <tick>
 8002d2c:	200002e2 	.word	0x200002e2
 8002d30:	200002d9 	.word	0x200002d9

08002d34 <LDA>:
void LDA(mode m) {
 8002d34:	b508      	push	{r3, lr}
	u8 d = rd(m());
 8002d36:	4780      	blx	r0
 8002d38:	f7ff fd88 	bl	800284c <rd>
	P[1] = (d == 0);
 8002d3c:	4906      	ldr	r1, [pc, #24]	; (8002d58 <LDA+0x24>)
 8002d3e:	fab0 f380 	clz	r3, r0
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	4602      	mov	r2, r0
 8002d46:	704b      	strb	r3, [r1, #1]
	updateN(d);
 8002d48:	f7ff ff20 	bl	8002b8c <updateN>
	A = d;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <LDA+0x28>)
 8002d4e:	701a      	strb	r2, [r3, #0]
}
 8002d50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8002d54:	f7ff bd72 	b.w	800283c <tick>
 8002d58:	200002d9 	.word	0x200002d9
 8002d5c:	200002d8 	.word	0x200002d8

08002d60 <LDX>:
void LDX(mode m) {
 8002d60:	b508      	push	{r3, lr}
	u8 d = rd(m());
 8002d62:	4780      	blx	r0
 8002d64:	f7ff fd72 	bl	800284c <rd>
	P[1] = (d == 0);
 8002d68:	4906      	ldr	r1, [pc, #24]	; (8002d84 <LDX+0x24>)
 8002d6a:	fab0 f380 	clz	r3, r0
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	4602      	mov	r2, r0
 8002d72:	704b      	strb	r3, [r1, #1]
	updateN(d);
 8002d74:	f7ff ff0a 	bl	8002b8c <updateN>
	X = d;
 8002d78:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <LDX+0x28>)
 8002d7a:	701a      	strb	r2, [r3, #0]
}
 8002d7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8002d80:	f7ff bd5c 	b.w	800283c <tick>
 8002d84:	200002d9 	.word	0x200002d9
 8002d88:	200002e5 	.word	0x200002e5

08002d8c <LDY>:
void LDY(mode m) {
 8002d8c:	b508      	push	{r3, lr}
	u8 d = rd(m());
 8002d8e:	4780      	blx	r0
 8002d90:	f7ff fd5c 	bl	800284c <rd>
	P[1] = (d == 0);
 8002d94:	4906      	ldr	r1, [pc, #24]	; (8002db0 <LDY+0x24>)
 8002d96:	fab0 f380 	clz	r3, r0
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	704b      	strb	r3, [r1, #1]
	updateN(d);
 8002da0:	f7ff fef4 	bl	8002b8c <updateN>
	Y = d;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <LDY+0x28>)
 8002da6:	701a      	strb	r2, [r3, #0]
}
 8002da8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8002dac:	f7ff bd46 	b.w	800283c <tick>
 8002db0:	200002d9 	.word	0x200002d9
 8002db4:	200002e6 	.word	0x200002e6

08002db8 <STA>:
void STA(mode m) {
 8002db8:	b508      	push	{r3, lr}
	wr(m(), A);
 8002dba:	4780      	blx	r0
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <STA+0x14>)
 8002dbe:	7819      	ldrb	r1, [r3, #0]
 8002dc0:	f7ff fe7c 	bl	8002abc <wr>
}
 8002dc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8002dc8:	f7ff bd38 	b.w	800283c <tick>
 8002dcc:	200002d8 	.word	0x200002d8

08002dd0 <STX>:
void STX(mode m) {
 8002dd0:	b508      	push	{r3, lr}
	wr(m(), X);
 8002dd2:	4780      	blx	r0
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <STX+0x14>)
 8002dd6:	7819      	ldrb	r1, [r3, #0]
 8002dd8:	f7ff fe70 	bl	8002abc <wr>
}
 8002ddc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8002de0:	f7ff bd2c 	b.w	800283c <tick>
 8002de4:	200002e5 	.word	0x200002e5

08002de8 <STY>:
void STY(mode m) {
 8002de8:	b508      	push	{r3, lr}
	wr(m(), Y);
 8002dea:	4780      	blx	r0
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <STY+0x14>)
 8002dee:	7819      	ldrb	r1, [r3, #0]
 8002df0:	f7ff fe64 	bl	8002abc <wr>
}
 8002df4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8002df8:	f7ff bd20 	b.w	800283c <tick>
 8002dfc:	200002e6 	.word	0x200002e6

08002e00 <TXA>:
void TXA() {
 8002e00:	b508      	push	{r3, lr}
	updateZ(X);
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <TXA+0x24>)
	P[1] = (d == 0);
 8002e04:	4908      	ldr	r1, [pc, #32]	; (8002e28 <TXA+0x28>)
	updateZ(X);
 8002e06:	781a      	ldrb	r2, [r3, #0]
	P[1] = (d == 0);
 8002e08:	fab2 f382 	clz	r3, r2
 8002e0c:	095b      	lsrs	r3, r3, #5
	updateN(X);
 8002e0e:	4610      	mov	r0, r2
	P[1] = (d == 0);
 8002e10:	704b      	strb	r3, [r1, #1]
	updateN(X);
 8002e12:	f7ff febb 	bl	8002b8c <updateN>
	A = X;
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <TXA+0x2c>)
 8002e18:	701a      	strb	r2, [r3, #0]
}
 8002e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8002e1e:	f7ff bd0d 	b.w	800283c <tick>
 8002e22:	bf00      	nop
 8002e24:	200002e5 	.word	0x200002e5
 8002e28:	200002d9 	.word	0x200002d9
 8002e2c:	200002d8 	.word	0x200002d8

08002e30 <TXS>:
	S = X;
 8002e30:	4b02      	ldr	r3, [pc, #8]	; (8002e3c <TXS+0xc>)
 8002e32:	781a      	ldrb	r2, [r3, #0]
 8002e34:	4b02      	ldr	r3, [pc, #8]	; (8002e40 <TXS+0x10>)
 8002e36:	701a      	strb	r2, [r3, #0]
	tick();
 8002e38:	f7ff bd00 	b.w	800283c <tick>
 8002e3c:	200002e5 	.word	0x200002e5
 8002e40:	200002e4 	.word	0x200002e4

08002e44 <TYA>:
void TYA() {
 8002e44:	b508      	push	{r3, lr}
	updateZ(Y);
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <TYA+0x24>)
	P[1] = (d == 0);
 8002e48:	4908      	ldr	r1, [pc, #32]	; (8002e6c <TYA+0x28>)
	updateZ(Y);
 8002e4a:	781a      	ldrb	r2, [r3, #0]
	P[1] = (d == 0);
 8002e4c:	fab2 f382 	clz	r3, r2
 8002e50:	095b      	lsrs	r3, r3, #5
	updateN(Y);
 8002e52:	4610      	mov	r0, r2
	P[1] = (d == 0);
 8002e54:	704b      	strb	r3, [r1, #1]
	updateN(Y);
 8002e56:	f7ff fe99 	bl	8002b8c <updateN>
	A = Y;
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <TYA+0x2c>)
 8002e5c:	701a      	strb	r2, [r3, #0]
}
 8002e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8002e62:	f7ff bceb 	b.w	800283c <tick>
 8002e66:	bf00      	nop
 8002e68:	200002e6 	.word	0x200002e6
 8002e6c:	200002d9 	.word	0x200002d9
 8002e70:	200002d8 	.word	0x200002d8

08002e74 <TAX>:
void TAX() {
 8002e74:	b508      	push	{r3, lr}
	updateZ(A);
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <TAX+0x24>)
	P[1] = (d == 0);
 8002e78:	4908      	ldr	r1, [pc, #32]	; (8002e9c <TAX+0x28>)
	updateZ(A);
 8002e7a:	781a      	ldrb	r2, [r3, #0]
	P[1] = (d == 0);
 8002e7c:	fab2 f382 	clz	r3, r2
 8002e80:	095b      	lsrs	r3, r3, #5
	updateN(A);
 8002e82:	4610      	mov	r0, r2
	P[1] = (d == 0);
 8002e84:	704b      	strb	r3, [r1, #1]
	updateN(A);
 8002e86:	f7ff fe81 	bl	8002b8c <updateN>
	X = A;
 8002e8a:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <TAX+0x2c>)
 8002e8c:	701a      	strb	r2, [r3, #0]
}
 8002e8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8002e92:	f7ff bcd3 	b.w	800283c <tick>
 8002e96:	bf00      	nop
 8002e98:	200002d8 	.word	0x200002d8
 8002e9c:	200002d9 	.word	0x200002d9
 8002ea0:	200002e5 	.word	0x200002e5

08002ea4 <TAY>:
void TAY() {
 8002ea4:	b508      	push	{r3, lr}
	updateZ(A);
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <TAY+0x24>)
	P[1] = (d == 0);
 8002ea8:	4908      	ldr	r1, [pc, #32]	; (8002ecc <TAY+0x28>)
	updateZ(A);
 8002eaa:	781a      	ldrb	r2, [r3, #0]
	P[1] = (d == 0);
 8002eac:	fab2 f382 	clz	r3, r2
 8002eb0:	095b      	lsrs	r3, r3, #5
	updateN(A);
 8002eb2:	4610      	mov	r0, r2
	P[1] = (d == 0);
 8002eb4:	704b      	strb	r3, [r1, #1]
	updateN(A);
 8002eb6:	f7ff fe69 	bl	8002b8c <updateN>
	Y = A;
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <TAY+0x2c>)
 8002ebc:	701a      	strb	r2, [r3, #0]
}
 8002ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8002ec2:	f7ff bcbb 	b.w	800283c <tick>
 8002ec6:	bf00      	nop
 8002ec8:	200002d8 	.word	0x200002d8
 8002ecc:	200002d9 	.word	0x200002d9
 8002ed0:	200002e6 	.word	0x200002e6

08002ed4 <TSX>:
void TSX() {
 8002ed4:	b508      	push	{r3, lr}
	updateZ(S);
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <TSX+0x24>)
	P[1] = (d == 0);
 8002ed8:	4908      	ldr	r1, [pc, #32]	; (8002efc <TSX+0x28>)
	updateZ(S);
 8002eda:	781a      	ldrb	r2, [r3, #0]
	P[1] = (d == 0);
 8002edc:	fab2 f382 	clz	r3, r2
 8002ee0:	095b      	lsrs	r3, r3, #5
	updateN(S);
 8002ee2:	4610      	mov	r0, r2
	P[1] = (d == 0);
 8002ee4:	704b      	strb	r3, [r1, #1]
	updateN(S);
 8002ee6:	f7ff fe51 	bl	8002b8c <updateN>
	X = S;
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <TSX+0x2c>)
 8002eec:	701a      	strb	r2, [r3, #0]
}
 8002eee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8002ef2:	f7ff bca3 	b.w	800283c <tick>
 8002ef6:	bf00      	nop
 8002ef8:	200002e4 	.word	0x200002e4
 8002efc:	200002d9 	.word	0x200002d9
 8002f00:	200002e5 	.word	0x200002e5

08002f04 <PHP>:
void PHP() {
 8002f04:	b508      	push	{r3, lr}
	tick();
 8002f06:	f7ff fc99 	bl	800283c <tick>
	push(getFlags() | 0x30);
 8002f0a:	f7ff fe1b 	bl	8002b44 <getFlags>
 8002f0e:	f040 0030 	orr.w	r0, r0, #48	; 0x30
 8002f12:	b2c0      	uxtb	r0, r0
 8002f14:	f7ff fde8 	bl	8002ae8 <push>
}
 8002f18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8002f1c:	f7ff bc8e 	b.w	800283c <tick>

08002f20 <PLP>:
void PLP() {
 8002f20:	b508      	push	{r3, lr}
	tick();
 8002f22:	f7ff fc8b 	bl	800283c <tick>
	tick();
 8002f26:	f7ff fc89 	bl	800283c <tick>
	setFlags(pull());
 8002f2a:	f7ff fde9 	bl	8002b00 <pull>
 8002f2e:	f7ff fdf3 	bl	8002b18 <setFlags>
}
 8002f32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8002f36:	f7ff bc81 	b.w	800283c <tick>
	...

08002f3c <PHA>:
void PHA() {
 8002f3c:	b508      	push	{r3, lr}
	tick();
 8002f3e:	f7ff fc7d 	bl	800283c <tick>
	push(A);
 8002f42:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <PHA+0x18>)
 8002f44:	7818      	ldrb	r0, [r3, #0]
 8002f46:	f7ff fdcf 	bl	8002ae8 <push>
}
 8002f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8002f4e:	f7ff bc75 	b.w	800283c <tick>
 8002f52:	bf00      	nop
 8002f54:	200002d8 	.word	0x200002d8

08002f58 <PLA>:
void PLA() {
 8002f58:	b508      	push	{r3, lr}
	tick();
 8002f5a:	f7ff fc6f 	bl	800283c <tick>
	tick();
 8002f5e:	f7ff fc6d 	bl	800283c <tick>
	A = pull();
 8002f62:	f7ff fdcd 	bl	8002b00 <pull>
 8002f66:	4a06      	ldr	r2, [pc, #24]	; (8002f80 <PLA+0x28>)
	P[1] = (d == 0);
 8002f68:	fab0 f380 	clz	r3, r0
	A = pull();
 8002f6c:	7010      	strb	r0, [r2, #0]
	P[1] = (d == 0);
 8002f6e:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <PLA+0x2c>)
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	7053      	strb	r3, [r2, #1]
	updateN(A);
 8002f74:	f7ff fe0a 	bl	8002b8c <updateN>
}
 8002f78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8002f7c:	f7ff bc5e 	b.w	800283c <tick>
 8002f80:	200002d8 	.word	0x200002d8
 8002f84:	200002d9 	.word	0x200002d9

08002f88 <ADC_>:
void ADC_(mode m) {
 8002f88:	b570      	push	{r4, r5, r6, lr}
	u8 d = rd(m());
 8002f8a:	4780      	blx	r0
 8002f8c:	f7ff fc5e 	bl	800284c <rd>
	u16 s = A + d + P[0];
 8002f90:	4c0e      	ldr	r4, [pc, #56]	; (8002fcc <ADC_+0x44>)
 8002f92:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <ADC_+0x48>)
	u8 d = rd(m());
 8002f94:	4601      	mov	r1, r0
	u16 s = A + d + P[0];
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	7820      	ldrb	r0, [r4, #0]
 8002f9a:	4402      	add	r2, r0
 8002f9c:	440a      	add	r2, r1
 8002f9e:	b292      	uxth	r2, r2
	P[0] = (r > 0xFF);
 8002fa0:	2aff      	cmp	r2, #255	; 0xff
 8002fa2:	bf94      	ite	ls
 8002fa4:	2500      	movls	r5, #0
 8002fa6:	2501      	movhi	r5, #1
 8002fa8:	701d      	strb	r5, [r3, #0]
	P[1] = (d == 0);
 8002faa:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 8002fae:	bf0c      	ite	eq
 8002fb0:	2601      	moveq	r6, #1
 8002fb2:	2600      	movne	r6, #0
 8002fb4:	705e      	strb	r6, [r3, #1]
	updateV(A, d, s);
 8002fb6:	f7ff fddd 	bl	8002b74 <updateV>
	updateN((u8)s);
 8002fba:	4628      	mov	r0, r5
 8002fbc:	f7ff fde6 	bl	8002b8c <updateN>
	A = (u8)s;
 8002fc0:	7025      	strb	r5, [r4, #0]
}
 8002fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tick();
 8002fc6:	f7ff bc39 	b.w	800283c <tick>
 8002fca:	bf00      	nop
 8002fcc:	200002d8 	.word	0x200002d8
 8002fd0:	200002d9 	.word	0x200002d9

08002fd4 <SBC>:
void SBC(mode m) {
 8002fd4:	b570      	push	{r4, r5, r6, lr}
	u8 d = rd(m());
 8002fd6:	4780      	blx	r0
 8002fd8:	f7ff fc38 	bl	800284c <rd>
	u16 s = A + (d ^ 0xFF) + P[0];
 8002fdc:	4c0e      	ldr	r4, [pc, #56]	; (8003018 <SBC+0x44>)
 8002fde:	4b0f      	ldr	r3, [pc, #60]	; (800301c <SBC+0x48>)
 8002fe0:	7826      	ldrb	r6, [r4, #0]
 8002fe2:	43c1      	mvns	r1, r0
 8002fe4:	b2c9      	uxtb	r1, r1
 8002fe6:	7818      	ldrb	r0, [r3, #0]
 8002fe8:	1872      	adds	r2, r6, r1
 8002fea:	4402      	add	r2, r0
	P[0] = (r > 0xFF);
 8002fec:	2aff      	cmp	r2, #255	; 0xff
 8002fee:	bf94      	ite	ls
 8002ff0:	2000      	movls	r0, #0
 8002ff2:	2001      	movhi	r0, #1
	P[1] = (d == 0);
 8002ff4:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
	P[0] = (r > 0xFF);
 8002ff8:	7018      	strb	r0, [r3, #0]
	P[1] = (d == 0);
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2001      	moveq	r0, #1
 8002ffe:	2000      	movne	r0, #0
 8003000:	7058      	strb	r0, [r3, #1]
	updateV(A, (d ^ 0xFF), s);
 8003002:	4630      	mov	r0, r6
 8003004:	f7ff fdb6 	bl	8002b74 <updateV>
	updateN((u8)s);
 8003008:	4628      	mov	r0, r5
 800300a:	f7ff fdbf 	bl	8002b8c <updateN>
	A = (u8)s;
 800300e:	7025      	strb	r5, [r4, #0]
}
 8003010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tick();
 8003014:	f7ff bc12 	b.w	800283c <tick>
 8003018:	200002d8 	.word	0x200002d8
 800301c:	200002d9 	.word	0x200002d9

08003020 <AND>:
void AND(mode m) {
 8003020:	b508      	push	{r3, lr}
	u8 d = rd(m());
 8003022:	4780      	blx	r0
 8003024:	f7ff fc12 	bl	800284c <rd>
	A &= d;
 8003028:	4a07      	ldr	r2, [pc, #28]	; (8003048 <AND+0x28>)
 800302a:	7813      	ldrb	r3, [r2, #0]
 800302c:	4018      	ands	r0, r3
 800302e:	7010      	strb	r0, [r2, #0]
	P[1] = (d == 0);
 8003030:	fab0 f380 	clz	r3, r0
 8003034:	4a05      	ldr	r2, [pc, #20]	; (800304c <AND+0x2c>)
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	7053      	strb	r3, [r2, #1]
	updateN(A);
 800303a:	f7ff fda7 	bl	8002b8c <updateN>
}
 800303e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8003042:	f7ff bbfb 	b.w	800283c <tick>
 8003046:	bf00      	nop
 8003048:	200002d8 	.word	0x200002d8
 800304c:	200002d9 	.word	0x200002d9

08003050 <EOR>:
void EOR(mode m) {
 8003050:	b508      	push	{r3, lr}
	u8 d = rd(m());
 8003052:	4780      	blx	r0
 8003054:	f7ff fbfa 	bl	800284c <rd>
	A ^= d;
 8003058:	4908      	ldr	r1, [pc, #32]	; (800307c <EOR+0x2c>)
 800305a:	780a      	ldrb	r2, [r1, #0]
 800305c:	ea80 0302 	eor.w	r3, r0, r2
	P[1] = (d == 0);
 8003060:	1a82      	subs	r2, r0, r2
 8003062:	4250      	negs	r0, r2
 8003064:	4150      	adcs	r0, r2
 8003066:	4a06      	ldr	r2, [pc, #24]	; (8003080 <EOR+0x30>)
	A ^= d;
 8003068:	b2db      	uxtb	r3, r3
	P[1] = (d == 0);
 800306a:	7050      	strb	r0, [r2, #1]
	updateN(A);
 800306c:	4618      	mov	r0, r3
	A ^= d;
 800306e:	700b      	strb	r3, [r1, #0]
	updateN(A);
 8003070:	f7ff fd8c 	bl	8002b8c <updateN>
}
 8003074:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8003078:	f7ff bbe0 	b.w	800283c <tick>
 800307c:	200002d8 	.word	0x200002d8
 8003080:	200002d9 	.word	0x200002d9

08003084 <ORA>:
void ORA(mode m) {
 8003084:	b508      	push	{r3, lr}
	u8 d = rd(m());
 8003086:	4780      	blx	r0
 8003088:	f7ff fbe0 	bl	800284c <rd>
	A |= d;
 800308c:	4a07      	ldr	r2, [pc, #28]	; (80030ac <ORA+0x28>)
 800308e:	7813      	ldrb	r3, [r2, #0]
 8003090:	4318      	orrs	r0, r3
 8003092:	b2c0      	uxtb	r0, r0
 8003094:	7010      	strb	r0, [r2, #0]
	P[1] = (d == 0);
 8003096:	fab0 f380 	clz	r3, r0
 800309a:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <ORA+0x2c>)
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	7053      	strb	r3, [r2, #1]
	updateN(A);
 80030a0:	f7ff fd74 	bl	8002b8c <updateN>
}
 80030a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 80030a8:	f7ff bbc8 	b.w	800283c <tick>
 80030ac:	200002d8 	.word	0x200002d8
 80030b0:	200002d9 	.word	0x200002d9

080030b4 <BIT>:
void BIT(mode m) {
 80030b4:	b508      	push	{r3, lr}
	u8 d = rd(m());
 80030b6:	4780      	blx	r0
 80030b8:	f7ff fbc8 	bl	800284c <rd>
	updateZ(A & d);
 80030bc:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <BIT+0x2c>)
	P[1] = (d == 0);
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <BIT+0x30>)
	updateZ(A & d);
 80030c0:	7812      	ldrb	r2, [r2, #0]
	P[1] = (d == 0);
 80030c2:	4210      	tst	r0, r2
 80030c4:	bf0c      	ite	eq
 80030c6:	2201      	moveq	r2, #1
 80030c8:	2200      	movne	r2, #0
 80030ca:	705a      	strb	r2, [r3, #1]
	P[7] = (d & 0x80) >> 7;
 80030cc:	f3c0 12c0 	ubfx	r2, r0, #7, #1
	P[6] = (d & 0x40) >> 6;
 80030d0:	f3c0 1080 	ubfx	r0, r0, #6, #1
	P[7] = (d & 0x80) >> 7;
 80030d4:	71da      	strb	r2, [r3, #7]
	P[6] = (d & 0x40) >> 6;
 80030d6:	7198      	strb	r0, [r3, #6]
}
 80030d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 80030dc:	f7ff bbae 	b.w	800283c <tick>
 80030e0:	200002d8 	.word	0x200002d8
 80030e4:	200002d9 	.word	0x200002d9

080030e8 <CMP>:
void CMP(mode m) {
 80030e8:	b508      	push	{r3, lr}
	u8 d = rd(m());
 80030ea:	4780      	blx	r0
 80030ec:	f7ff fbae 	bl	800284c <rd>
	u16 s = A + (d ^ 0xFF) + 1;
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <CMP+0x3c>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	43c0      	mvns	r0, r0
 80030f6:	3301      	adds	r3, #1
 80030f8:	fa53 f080 	uxtab	r0, r3, r0
 80030fc:	b280      	uxth	r0, r0
	P[0] = (r > 0xFF);
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <CMP+0x40>)
 8003100:	28ff      	cmp	r0, #255	; 0xff
 8003102:	bf94      	ite	ls
 8003104:	2200      	movls	r2, #0
 8003106:	2201      	movhi	r2, #1
	P[1] = (d == 0);
 8003108:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
	P[0] = (r > 0xFF);
 800310c:	701a      	strb	r2, [r3, #0]
	P[1] = (d == 0);
 800310e:	bf0c      	ite	eq
 8003110:	2201      	moveq	r2, #1
 8003112:	2200      	movne	r2, #0
 8003114:	705a      	strb	r2, [r3, #1]
	updateN((u8)s);
 8003116:	f7ff fd39 	bl	8002b8c <updateN>
}
 800311a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 800311e:	f7ff bb8d 	b.w	800283c <tick>
 8003122:	bf00      	nop
 8003124:	200002d8 	.word	0x200002d8
 8003128:	200002d9 	.word	0x200002d9

0800312c <CPX>:
void CPX(mode m) {
 800312c:	b508      	push	{r3, lr}
	u8 d = rd(m());
 800312e:	4780      	blx	r0
 8003130:	f7ff fb8c 	bl	800284c <rd>
	u16 s = X + (d ^ 0xFF) + 1;
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <CPX+0x3c>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	43c0      	mvns	r0, r0
 800313a:	3301      	adds	r3, #1
 800313c:	fa53 f080 	uxtab	r0, r3, r0
 8003140:	b280      	uxth	r0, r0
	P[0] = (r > 0xFF);
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <CPX+0x40>)
 8003144:	28ff      	cmp	r0, #255	; 0xff
 8003146:	bf94      	ite	ls
 8003148:	2200      	movls	r2, #0
 800314a:	2201      	movhi	r2, #1
	P[1] = (d == 0);
 800314c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
	P[0] = (r > 0xFF);
 8003150:	701a      	strb	r2, [r3, #0]
	P[1] = (d == 0);
 8003152:	bf0c      	ite	eq
 8003154:	2201      	moveq	r2, #1
 8003156:	2200      	movne	r2, #0
 8003158:	705a      	strb	r2, [r3, #1]
	updateN((u8)s);
 800315a:	f7ff fd17 	bl	8002b8c <updateN>
}
 800315e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8003162:	f7ff bb6b 	b.w	800283c <tick>
 8003166:	bf00      	nop
 8003168:	200002e5 	.word	0x200002e5
 800316c:	200002d9 	.word	0x200002d9

08003170 <CPY>:
void CPY(mode m) {
 8003170:	b508      	push	{r3, lr}
	u8 d = rd(m());
 8003172:	4780      	blx	r0
 8003174:	f7ff fb6a 	bl	800284c <rd>
	u16 s = Y + (d ^ 0xFF) + 1;
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <CPY+0x3c>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	43c0      	mvns	r0, r0
 800317e:	3301      	adds	r3, #1
 8003180:	fa53 f080 	uxtab	r0, r3, r0
 8003184:	b280      	uxth	r0, r0
	P[0] = (r > 0xFF);
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <CPY+0x40>)
 8003188:	28ff      	cmp	r0, #255	; 0xff
 800318a:	bf94      	ite	ls
 800318c:	2200      	movls	r2, #0
 800318e:	2201      	movhi	r2, #1
	P[1] = (d == 0);
 8003190:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
	P[0] = (r > 0xFF);
 8003194:	701a      	strb	r2, [r3, #0]
	P[1] = (d == 0);
 8003196:	bf0c      	ite	eq
 8003198:	2201      	moveq	r2, #1
 800319a:	2200      	movne	r2, #0
 800319c:	705a      	strb	r2, [r3, #1]
	updateN((u8)s);
 800319e:	f7ff fcf5 	bl	8002b8c <updateN>
}
 80031a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 80031a6:	f7ff bb49 	b.w	800283c <tick>
 80031aa:	bf00      	nop
 80031ac:	200002e6 	.word	0x200002e6
 80031b0:	200002d9 	.word	0x200002d9

080031b4 <INC>:
void INC(mode m) {
 80031b4:	b510      	push	{r4, lr}
	u16 addr = m();
 80031b6:	4780      	blx	r0
 80031b8:	4604      	mov	r4, r0
	u8 d = rd(addr);
 80031ba:	f7ff fb47 	bl	800284c <rd>
	tick();
 80031be:	f7ff fb3d 	bl	800283c <tick>
	d++;
 80031c2:	1c41      	adds	r1, r0, #1
	P[1] = (d == 0);
 80031c4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <INC+0x38>)
 80031ca:	bf0c      	ite	eq
 80031cc:	2201      	moveq	r2, #1
 80031ce:	2200      	movne	r2, #0
	updateN(d);
 80031d0:	4608      	mov	r0, r1
	P[1] = (d == 0);
 80031d2:	705a      	strb	r2, [r3, #1]
	updateN(d);
 80031d4:	f7ff fcda 	bl	8002b8c <updateN>
	tick();
 80031d8:	f7ff fb30 	bl	800283c <tick>
	wr(addr, d);
 80031dc:	4620      	mov	r0, r4
 80031de:	f7ff fc6d 	bl	8002abc <wr>
}
 80031e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tick();
 80031e6:	f7ff bb29 	b.w	800283c <tick>
 80031ea:	bf00      	nop
 80031ec:	200002d9 	.word	0x200002d9

080031f0 <INX>:
void INX() {
 80031f0:	b508      	push	{r3, lr}
	X++;
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <INX+0x24>)
	P[1] = (d == 0);
 80031f4:	4a08      	ldr	r2, [pc, #32]	; (8003218 <INX+0x28>)
	X++;
 80031f6:	7818      	ldrb	r0, [r3, #0]
 80031f8:	3001      	adds	r0, #1
 80031fa:	b2c0      	uxtb	r0, r0
 80031fc:	7018      	strb	r0, [r3, #0]
	P[1] = (d == 0);
 80031fe:	fab0 f380 	clz	r3, r0
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	7053      	strb	r3, [r2, #1]
	updateN(X);
 8003206:	f7ff fcc1 	bl	8002b8c <updateN>
}
 800320a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 800320e:	f7ff bb15 	b.w	800283c <tick>
 8003212:	bf00      	nop
 8003214:	200002e5 	.word	0x200002e5
 8003218:	200002d9 	.word	0x200002d9

0800321c <INY>:
void INY() {
 800321c:	b508      	push	{r3, lr}
	Y++;
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <INY+0x24>)
	P[1] = (d == 0);
 8003220:	4a08      	ldr	r2, [pc, #32]	; (8003244 <INY+0x28>)
	Y++;
 8003222:	7818      	ldrb	r0, [r3, #0]
 8003224:	3001      	adds	r0, #1
 8003226:	b2c0      	uxtb	r0, r0
 8003228:	7018      	strb	r0, [r3, #0]
	P[1] = (d == 0);
 800322a:	fab0 f380 	clz	r3, r0
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	7053      	strb	r3, [r2, #1]
	updateN(Y);
 8003232:	f7ff fcab 	bl	8002b8c <updateN>
}
 8003236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 800323a:	f7ff baff 	b.w	800283c <tick>
 800323e:	bf00      	nop
 8003240:	200002e6 	.word	0x200002e6
 8003244:	200002d9 	.word	0x200002d9

08003248 <DEC>:
void DEC(mode m) {
 8003248:	b510      	push	{r4, lr}
	u16 addr = m();
 800324a:	4780      	blx	r0
 800324c:	4604      	mov	r4, r0
	u8 d = rd(addr);
 800324e:	f7ff fafd 	bl	800284c <rd>
	tick();
 8003252:	f7ff faf3 	bl	800283c <tick>
	d--;
 8003256:	1e41      	subs	r1, r0, #1
	P[1] = (d == 0);
 8003258:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800325c:	4b08      	ldr	r3, [pc, #32]	; (8003280 <DEC+0x38>)
 800325e:	bf0c      	ite	eq
 8003260:	2201      	moveq	r2, #1
 8003262:	2200      	movne	r2, #0
	updateN(d);
 8003264:	4608      	mov	r0, r1
	P[1] = (d == 0);
 8003266:	705a      	strb	r2, [r3, #1]
	updateN(d);
 8003268:	f7ff fc90 	bl	8002b8c <updateN>
	tick();
 800326c:	f7ff fae6 	bl	800283c <tick>
	wr(addr, d);
 8003270:	4620      	mov	r0, r4
 8003272:	f7ff fc23 	bl	8002abc <wr>
}
 8003276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tick();
 800327a:	f7ff badf 	b.w	800283c <tick>
 800327e:	bf00      	nop
 8003280:	200002d9 	.word	0x200002d9

08003284 <DEX>:
void DEX() {
 8003284:	b508      	push	{r3, lr}
	X--;
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <DEX+0x24>)
	P[1] = (d == 0);
 8003288:	4a08      	ldr	r2, [pc, #32]	; (80032ac <DEX+0x28>)
	X--;
 800328a:	7818      	ldrb	r0, [r3, #0]
 800328c:	3801      	subs	r0, #1
 800328e:	b2c0      	uxtb	r0, r0
 8003290:	7018      	strb	r0, [r3, #0]
	P[1] = (d == 0);
 8003292:	fab0 f380 	clz	r3, r0
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	7053      	strb	r3, [r2, #1]
	updateN(X);
 800329a:	f7ff fc77 	bl	8002b8c <updateN>
}
 800329e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 80032a2:	f7ff bacb 	b.w	800283c <tick>
 80032a6:	bf00      	nop
 80032a8:	200002e5 	.word	0x200002e5
 80032ac:	200002d9 	.word	0x200002d9

080032b0 <DEY>:
void DEY() {
 80032b0:	b508      	push	{r3, lr}
	Y--;
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <DEY+0x24>)
	P[1] = (d == 0);
 80032b4:	4a08      	ldr	r2, [pc, #32]	; (80032d8 <DEY+0x28>)
	Y--;
 80032b6:	7818      	ldrb	r0, [r3, #0]
 80032b8:	3801      	subs	r0, #1
 80032ba:	b2c0      	uxtb	r0, r0
 80032bc:	7018      	strb	r0, [r3, #0]
	P[1] = (d == 0);
 80032be:	fab0 f380 	clz	r3, r0
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	7053      	strb	r3, [r2, #1]
	updateN(Y);
 80032c6:	f7ff fc61 	bl	8002b8c <updateN>
}
 80032ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 80032ce:	f7ff bab5 	b.w	800283c <tick>
 80032d2:	bf00      	nop
 80032d4:	200002e6 	.word	0x200002e6
 80032d8:	200002d9 	.word	0x200002d9

080032dc <ASL>:
void ASL(mode m) {
 80032dc:	b510      	push	{r4, lr}
	u16 addr = m();
 80032de:	4780      	blx	r0
 80032e0:	4604      	mov	r4, r0
	u8 d = rd(addr);
 80032e2:	f7ff fab3 	bl	800284c <rd>
	tick();
 80032e6:	f7ff faa9 	bl	800283c <tick>
	P[0] = ((d & 0x80) >> 7);
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <ASL+0x3c>)
	d <<= 1;
 80032ec:	0041      	lsls	r1, r0, #1
	P[0] = ((d & 0x80) >> 7);
 80032ee:	f3c0 12c0 	ubfx	r2, r0, #7, #1
	P[1] = (d == 0);
 80032f2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
	P[0] = ((d & 0x80) >> 7);
 80032f6:	701a      	strb	r2, [r3, #0]
	updateN(d);
 80032f8:	4608      	mov	r0, r1
	P[1] = (d == 0);
 80032fa:	bf0c      	ite	eq
 80032fc:	2201      	moveq	r2, #1
 80032fe:	2200      	movne	r2, #0
 8003300:	705a      	strb	r2, [r3, #1]
	updateN(d);
 8003302:	f7ff fc43 	bl	8002b8c <updateN>
	tick();
 8003306:	f7ff fa99 	bl	800283c <tick>
	wr(addr, d);
 800330a:	4620      	mov	r0, r4
 800330c:	f7ff fbd6 	bl	8002abc <wr>
}
 8003310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tick();
 8003314:	f7ff ba92 	b.w	800283c <tick>
 8003318:	200002d9 	.word	0x200002d9

0800331c <ASL_A>:
void ASL_A() {
 800331c:	b508      	push	{r3, lr}
	P[0] = ((A & 0x80) >> 7);
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <ASL_A+0x28>)
 8003320:	4a09      	ldr	r2, [pc, #36]	; (8003348 <ASL_A+0x2c>)
 8003322:	7818      	ldrb	r0, [r3, #0]
 8003324:	09c1      	lsrs	r1, r0, #7
	A <<= 1;
 8003326:	0040      	lsls	r0, r0, #1
 8003328:	b2c0      	uxtb	r0, r0
 800332a:	7018      	strb	r0, [r3, #0]
	P[1] = (d == 0);
 800332c:	fab0 f380 	clz	r3, r0
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	7053      	strb	r3, [r2, #1]
	P[0] = ((A & 0x80) >> 7);
 8003334:	7011      	strb	r1, [r2, #0]
	updateN(A);
 8003336:	f7ff fc29 	bl	8002b8c <updateN>
}
 800333a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 800333e:	f7ff ba7d 	b.w	800283c <tick>
 8003342:	bf00      	nop
 8003344:	200002d8 	.word	0x200002d8
 8003348:	200002d9 	.word	0x200002d9

0800334c <LSR>:
void LSR(mode m) {
 800334c:	b510      	push	{r4, lr}
	u16 addr = m();
 800334e:	4780      	blx	r0
 8003350:	4604      	mov	r4, r0
	u8 d = rd(addr);
 8003352:	f7ff fa7b 	bl	800284c <rd>
	tick();
 8003356:	f7ff fa71 	bl	800283c <tick>
	P[0] = (d & 0x01);
 800335a:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <LSR+0x3c>)
	d >>= 1;
 800335c:	f3c0 0147 	ubfx	r1, r0, #1, #8
	P[0] = (d & 0x01);
 8003360:	f000 0301 	and.w	r3, r0, #1
 8003364:	7013      	strb	r3, [r2, #0]
	P[1] = (d == 0);
 8003366:	fab1 f381 	clz	r3, r1
 800336a:	095b      	lsrs	r3, r3, #5
	updateN(d);
 800336c:	4608      	mov	r0, r1
	P[1] = (d == 0);
 800336e:	7053      	strb	r3, [r2, #1]
	updateN(d);
 8003370:	f7ff fc0c 	bl	8002b8c <updateN>
	tick();
 8003374:	f7ff fa62 	bl	800283c <tick>
	wr(addr, d);
 8003378:	4620      	mov	r0, r4
 800337a:	f7ff fb9f 	bl	8002abc <wr>
}
 800337e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tick();
 8003382:	f7ff ba5b 	b.w	800283c <tick>
 8003386:	bf00      	nop
 8003388:	200002d9 	.word	0x200002d9

0800338c <LSR_A>:
void LSR_A() {
 800338c:	b508      	push	{r3, lr}
	P[0] = (A & 0x01);
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <LSR_A+0x28>)
 8003390:	4a09      	ldr	r2, [pc, #36]	; (80033b8 <LSR_A+0x2c>)
 8003392:	7818      	ldrb	r0, [r3, #0]
 8003394:	f000 0101 	and.w	r1, r0, #1
	A >>= 1;
 8003398:	0840      	lsrs	r0, r0, #1
 800339a:	7018      	strb	r0, [r3, #0]
	P[1] = (d == 0);
 800339c:	fab0 f380 	clz	r3, r0
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	7053      	strb	r3, [r2, #1]
	P[0] = (A & 0x01);
 80033a4:	7011      	strb	r1, [r2, #0]
	updateN(A);
 80033a6:	f7ff fbf1 	bl	8002b8c <updateN>
}
 80033aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 80033ae:	f7ff ba45 	b.w	800283c <tick>
 80033b2:	bf00      	nop
 80033b4:	200002d8 	.word	0x200002d8
 80033b8:	200002d9 	.word	0x200002d9

080033bc <ROL>:
void ROL(mode m) {
 80033bc:	b510      	push	{r4, lr}
	u16 addr = m();
 80033be:	4780      	blx	r0
 80033c0:	4604      	mov	r4, r0
	u8 d = rd(addr);
 80033c2:	f7ff fa43 	bl	800284c <rd>
	tick();
 80033c6:	f7ff fa39 	bl	800283c <tick>
	u8 c = P[0];
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <ROL+0x40>)
 80033cc:	7819      	ldrb	r1, [r3, #0]
	d = (d << 1) | c;
 80033ce:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
	P[0] = ((d & 0x80) >> 7);
 80033d2:	f3c0 12c0 	ubfx	r2, r0, #7, #1
	P[1] = (d == 0);
 80033d6:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
	P[0] = ((d & 0x80) >> 7);
 80033da:	701a      	strb	r2, [r3, #0]
	updateN(d);
 80033dc:	4608      	mov	r0, r1
	P[1] = (d == 0);
 80033de:	bf0c      	ite	eq
 80033e0:	2201      	moveq	r2, #1
 80033e2:	2200      	movne	r2, #0
 80033e4:	705a      	strb	r2, [r3, #1]
	updateN(d);
 80033e6:	f7ff fbd1 	bl	8002b8c <updateN>
	tick();
 80033ea:	f7ff fa27 	bl	800283c <tick>
	wr(addr, d);
 80033ee:	4620      	mov	r0, r4
 80033f0:	f7ff fb64 	bl	8002abc <wr>
}
 80033f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tick();
 80033f8:	f7ff ba20 	b.w	800283c <tick>
 80033fc:	200002d9 	.word	0x200002d9

08003400 <ROL_A>:
void ROL_A() {
 8003400:	b510      	push	{r4, lr}
	u8 c = P[0];
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <ROL_A+0x2c>)
	P[0] = ((A & 0x80) >> 7);
 8003404:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <ROL_A+0x30>)
	u8 c = P[0];
 8003406:	7818      	ldrb	r0, [r3, #0]
	P[0] = ((A & 0x80) >> 7);
 8003408:	7811      	ldrb	r1, [r2, #0]
	A = (A << 1) | c;
 800340a:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
 800340e:	b2c0      	uxtb	r0, r0
 8003410:	7010      	strb	r0, [r2, #0]
	P[1] = (d == 0);
 8003412:	fab0 f280 	clz	r2, r0
	P[0] = ((A & 0x80) >> 7);
 8003416:	09cc      	lsrs	r4, r1, #7
	P[1] = (d == 0);
 8003418:	0952      	lsrs	r2, r2, #5
	P[0] = ((A & 0x80) >> 7);
 800341a:	701c      	strb	r4, [r3, #0]
	P[1] = (d == 0);
 800341c:	705a      	strb	r2, [r3, #1]
	updateN(A);
 800341e:	f7ff fbb5 	bl	8002b8c <updateN>
}
 8003422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tick();
 8003426:	f7ff ba09 	b.w	800283c <tick>
 800342a:	bf00      	nop
 800342c:	200002d9 	.word	0x200002d9
 8003430:	200002d8 	.word	0x200002d8

08003434 <ROR>:
void ROR(mode m) {
 8003434:	b510      	push	{r4, lr}
	u16 addr = m();
 8003436:	4780      	blx	r0
 8003438:	4604      	mov	r4, r0
	u8 d = rd(addr);
 800343a:	f7ff fa07 	bl	800284c <rd>
	tick();
 800343e:	f7ff f9fd 	bl	800283c <tick>
	u8 c = P[0];
 8003442:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <ROR+0x44>)
 8003444:	7819      	ldrb	r1, [r3, #0]
	d = (d >> 1) | (c << 7);
 8003446:	01c9      	lsls	r1, r1, #7
 8003448:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
	P[0] = (d & 0x01);
 800344c:	f000 0201 	and.w	r2, r0, #1
	P[1] = (d == 0);
 8003450:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
	P[0] = (d & 0x01);
 8003454:	701a      	strb	r2, [r3, #0]
	updateN(d);
 8003456:	4608      	mov	r0, r1
	P[1] = (d == 0);
 8003458:	bf0c      	ite	eq
 800345a:	2201      	moveq	r2, #1
 800345c:	2200      	movne	r2, #0
 800345e:	705a      	strb	r2, [r3, #1]
	updateN(d);
 8003460:	f7ff fb94 	bl	8002b8c <updateN>
	tick();
 8003464:	f7ff f9ea 	bl	800283c <tick>
	wr(addr, d);
 8003468:	4620      	mov	r0, r4
 800346a:	f7ff fb27 	bl	8002abc <wr>
}
 800346e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tick();
 8003472:	f7ff b9e3 	b.w	800283c <tick>
 8003476:	bf00      	nop
 8003478:	200002d9 	.word	0x200002d9

0800347c <ROR_A>:
void ROR_A() {
 800347c:	b510      	push	{r4, lr}
	u8 c = P[0];
 800347e:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <ROR_A+0x30>)
	P[0] = (A & 0x01);
 8003480:	4a0b      	ldr	r2, [pc, #44]	; (80034b0 <ROR_A+0x34>)
	u8 c = P[0];
 8003482:	7818      	ldrb	r0, [r3, #0]
	P[0] = (A & 0x01);
 8003484:	7811      	ldrb	r1, [r2, #0]
	A = (A >> 1) | (c << 7);
 8003486:	01c0      	lsls	r0, r0, #7
 8003488:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
 800348c:	b2c0      	uxtb	r0, r0
 800348e:	7010      	strb	r0, [r2, #0]
	P[1] = (d == 0);
 8003490:	fab0 f280 	clz	r2, r0
	P[0] = (A & 0x01);
 8003494:	f001 0401 	and.w	r4, r1, #1
	P[1] = (d == 0);
 8003498:	0952      	lsrs	r2, r2, #5
	P[0] = (A & 0x01);
 800349a:	701c      	strb	r4, [r3, #0]
	P[1] = (d == 0);
 800349c:	705a      	strb	r2, [r3, #1]
	updateN(A);
 800349e:	f7ff fb75 	bl	8002b8c <updateN>
}
 80034a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tick();
 80034a6:	f7ff b9c9 	b.w	800283c <tick>
 80034aa:	bf00      	nop
 80034ac:	200002d9 	.word	0x200002d9
 80034b0:	200002d8 	.word	0x200002d8

080034b4 <JMP>:
void JMP(mode m) {
 80034b4:	b508      	push	{r3, lr}
	PC = m();
 80034b6:	4780      	blx	r0
 80034b8:	4b01      	ldr	r3, [pc, #4]	; (80034c0 <JMP+0xc>)
 80034ba:	8018      	strh	r0, [r3, #0]
 80034bc:	bd08      	pop	{r3, pc}
 80034be:	bf00      	nop
 80034c0:	200002e2 	.word	0x200002e2

080034c4 <JSR>:
void JSR() {
 80034c4:	b538      	push	{r3, r4, r5, lr}
	u8 addrl = rd(PC);
 80034c6:	4c10      	ldr	r4, [pc, #64]	; (8003508 <JSR+0x44>)
 80034c8:	8820      	ldrh	r0, [r4, #0]
 80034ca:	f7ff f9bf 	bl	800284c <rd>
 80034ce:	4605      	mov	r5, r0
	PC += 1;
 80034d0:	8820      	ldrh	r0, [r4, #0]
 80034d2:	3001      	adds	r0, #1
 80034d4:	b280      	uxth	r0, r0
 80034d6:	8020      	strh	r0, [r4, #0]
	tick();
 80034d8:	f7ff f9b0 	bl	800283c <tick>
	tick();
 80034dc:	f7ff f9ae 	bl	800283c <tick>
	push(PC >> 8);
 80034e0:	0a00      	lsrs	r0, r0, #8
 80034e2:	f7ff fb01 	bl	8002ae8 <push>
	tick();
 80034e6:	f7ff f9a9 	bl	800283c <tick>
	push(PC & 0xFF);
 80034ea:	7820      	ldrb	r0, [r4, #0]
 80034ec:	f7ff fafc 	bl	8002ae8 <push>
	tick();
 80034f0:	f7ff f9a4 	bl	800283c <tick>
	u8 addrh = rd(PC);
 80034f4:	8820      	ldrh	r0, [r4, #0]
 80034f6:	f7ff f9a9 	bl	800284c <rd>
	PC = addrl | (addrh << 8);
 80034fa:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 80034fe:	8020      	strh	r0, [r4, #0]
}
 8003500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tick();
 8003504:	f7ff b99a 	b.w	800283c <tick>
 8003508:	200002e2 	.word	0x200002e2

0800350c <RTS>:
void RTS() {
 800350c:	b510      	push	{r4, lr}
	tick();
 800350e:	f7ff f995 	bl	800283c <tick>
	tick();
 8003512:	f7ff f993 	bl	800283c <tick>
	u8 addrl = pull();
 8003516:	f7ff faf3 	bl	8002b00 <pull>
 800351a:	4604      	mov	r4, r0
	tick();
 800351c:	f7ff f98e 	bl	800283c <tick>
	u8 addrh = pull();
 8003520:	f7ff faee 	bl	8002b00 <pull>
	tick();
 8003524:	f7ff f98a 	bl	800283c <tick>
	PC += 1;
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <RTS+0x30>)
	PC = addrl | (addrh << 8);
 800352a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	PC += 1;
 800352e:	3401      	adds	r4, #1
 8003530:	801c      	strh	r4, [r3, #0]
}
 8003532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tick();
 8003536:	f7ff b981 	b.w	800283c <tick>
 800353a:	bf00      	nop
 800353c:	200002e2 	.word	0x200002e2

08003540 <RTI>:
void RTI() {
 8003540:	b510      	push	{r4, lr}
	tick();
 8003542:	f7ff f97b 	bl	800283c <tick>
	tick();
 8003546:	f7ff f979 	bl	800283c <tick>
	setFlags(pull());
 800354a:	f7ff fad9 	bl	8002b00 <pull>
 800354e:	f7ff fae3 	bl	8002b18 <setFlags>
	tick();
 8003552:	f7ff f973 	bl	800283c <tick>
	u8 addrl = pull();
 8003556:	f7ff fad3 	bl	8002b00 <pull>
 800355a:	4604      	mov	r4, r0
	tick();
 800355c:	f7ff f96e 	bl	800283c <tick>
	u8 addrh = pull();
 8003560:	f7ff face 	bl	8002b00 <pull>
	PC = addrl | (addrh << 8);
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <RTI+0x34>)
 8003566:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 800356a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PC = addrl | (addrh << 8);
 800356e:	8018      	strh	r0, [r3, #0]
	tick();
 8003570:	f7ff b964 	b.w	800283c <tick>
 8003574:	200002e2 	.word	0x200002e2

08003578 <BPL>:
	if (!P[7]) {
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <BPL+0x18>)
 800357a:	79db      	ldrb	r3, [r3, #7]
 800357c:	b90b      	cbnz	r3, 8003582 <BPL+0xa>
 800357e:	f7ff b955 	b.w	800282c <BCC.part.6>
		PC++;
 8003582:	4a04      	ldr	r2, [pc, #16]	; (8003594 <BPL+0x1c>)
 8003584:	8813      	ldrh	r3, [r2, #0]
 8003586:	3301      	adds	r3, #1
 8003588:	8013      	strh	r3, [r2, #0]
		tick();
 800358a:	f7ff b957 	b.w	800283c <tick>
 800358e:	bf00      	nop
 8003590:	200002d9 	.word	0x200002d9
 8003594:	200002e2 	.word	0x200002e2

08003598 <BMI>:
	if (P[7]) {
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <BMI+0x18>)
 800359a:	79db      	ldrb	r3, [r3, #7]
 800359c:	b10b      	cbz	r3, 80035a2 <BMI+0xa>
 800359e:	f7ff b945 	b.w	800282c <BCC.part.6>
		PC++;
 80035a2:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <BMI+0x1c>)
 80035a4:	8813      	ldrh	r3, [r2, #0]
 80035a6:	3301      	adds	r3, #1
 80035a8:	8013      	strh	r3, [r2, #0]
		tick();
 80035aa:	f7ff b947 	b.w	800283c <tick>
 80035ae:	bf00      	nop
 80035b0:	200002d9 	.word	0x200002d9
 80035b4:	200002e2 	.word	0x200002e2

080035b8 <BVC>:
	if (!P[6]) {
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <BVC+0x18>)
 80035ba:	799b      	ldrb	r3, [r3, #6]
 80035bc:	b90b      	cbnz	r3, 80035c2 <BVC+0xa>
 80035be:	f7ff b935 	b.w	800282c <BCC.part.6>
		PC++;
 80035c2:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <BVC+0x1c>)
 80035c4:	8813      	ldrh	r3, [r2, #0]
 80035c6:	3301      	adds	r3, #1
 80035c8:	8013      	strh	r3, [r2, #0]
		tick();
 80035ca:	f7ff b937 	b.w	800283c <tick>
 80035ce:	bf00      	nop
 80035d0:	200002d9 	.word	0x200002d9
 80035d4:	200002e2 	.word	0x200002e2

080035d8 <BVS>:
	if (P[6]) {
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <BVS+0x18>)
 80035da:	799b      	ldrb	r3, [r3, #6]
 80035dc:	b10b      	cbz	r3, 80035e2 <BVS+0xa>
 80035de:	f7ff b925 	b.w	800282c <BCC.part.6>
		PC++;
 80035e2:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <BVS+0x1c>)
 80035e4:	8813      	ldrh	r3, [r2, #0]
 80035e6:	3301      	adds	r3, #1
 80035e8:	8013      	strh	r3, [r2, #0]
		tick();
 80035ea:	f7ff b927 	b.w	800283c <tick>
 80035ee:	bf00      	nop
 80035f0:	200002d9 	.word	0x200002d9
 80035f4:	200002e2 	.word	0x200002e2

080035f8 <BCC>:
	if (!P[0]) {
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <BCC+0x18>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	b90b      	cbnz	r3, 8003602 <BCC+0xa>
 80035fe:	f7ff b915 	b.w	800282c <BCC.part.6>
		PC++;
 8003602:	4a04      	ldr	r2, [pc, #16]	; (8003614 <BCC+0x1c>)
 8003604:	8813      	ldrh	r3, [r2, #0]
 8003606:	3301      	adds	r3, #1
 8003608:	8013      	strh	r3, [r2, #0]
		tick();
 800360a:	f7ff b917 	b.w	800283c <tick>
 800360e:	bf00      	nop
 8003610:	200002d9 	.word	0x200002d9
 8003614:	200002e2 	.word	0x200002e2

08003618 <BCS>:
	if (P[0]) {
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <BCS+0x18>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	b10b      	cbz	r3, 8003622 <BCS+0xa>
 800361e:	f7ff b905 	b.w	800282c <BCC.part.6>
		PC++;
 8003622:	4a04      	ldr	r2, [pc, #16]	; (8003634 <BCS+0x1c>)
 8003624:	8813      	ldrh	r3, [r2, #0]
 8003626:	3301      	adds	r3, #1
 8003628:	8013      	strh	r3, [r2, #0]
		tick();
 800362a:	f7ff b907 	b.w	800283c <tick>
 800362e:	bf00      	nop
 8003630:	200002d9 	.word	0x200002d9
 8003634:	200002e2 	.word	0x200002e2

08003638 <BNE>:
	if (!P[1]) {
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <BNE+0x18>)
 800363a:	785b      	ldrb	r3, [r3, #1]
 800363c:	b90b      	cbnz	r3, 8003642 <BNE+0xa>
 800363e:	f7ff b8f5 	b.w	800282c <BCC.part.6>
		PC++;
 8003642:	4a04      	ldr	r2, [pc, #16]	; (8003654 <BNE+0x1c>)
 8003644:	8813      	ldrh	r3, [r2, #0]
 8003646:	3301      	adds	r3, #1
 8003648:	8013      	strh	r3, [r2, #0]
		tick();
 800364a:	f7ff b8f7 	b.w	800283c <tick>
 800364e:	bf00      	nop
 8003650:	200002d9 	.word	0x200002d9
 8003654:	200002e2 	.word	0x200002e2

08003658 <BEQ>:
	if (P[1]) {
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <BEQ+0x18>)
 800365a:	785b      	ldrb	r3, [r3, #1]
 800365c:	b10b      	cbz	r3, 8003662 <BEQ+0xa>
 800365e:	f7ff b8e5 	b.w	800282c <BCC.part.6>
	}
	else {
		PC++;
 8003662:	4a04      	ldr	r2, [pc, #16]	; (8003674 <BEQ+0x1c>)
 8003664:	8813      	ldrh	r3, [r2, #0]
 8003666:	3301      	adds	r3, #1
 8003668:	8013      	strh	r3, [r2, #0]
		tick();
 800366a:	f7ff b8e7 	b.w	800283c <tick>
 800366e:	bf00      	nop
 8003670:	200002d9 	.word	0x200002d9
 8003674:	200002e2 	.word	0x200002e2

08003678 <CLC>:
	}
}

// Status register operations
void CLC() {
	P[0] = 0;
 8003678:	4b02      	ldr	r3, [pc, #8]	; (8003684 <CLC+0xc>)
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
	tick();
 800367e:	f7ff b8dd 	b.w	800283c <tick>
 8003682:	bf00      	nop
 8003684:	200002d9 	.word	0x200002d9

08003688 <CLI>:
}

void CLI() {
	P[2] = 0;
 8003688:	4b02      	ldr	r3, [pc, #8]	; (8003694 <CLI+0xc>)
 800368a:	2200      	movs	r2, #0
 800368c:	709a      	strb	r2, [r3, #2]
	tick();
 800368e:	f7ff b8d5 	b.w	800283c <tick>
 8003692:	bf00      	nop
 8003694:	200002d9 	.word	0x200002d9

08003698 <CLV>:
}

void CLV() {
	P[6] = 0;
 8003698:	4b02      	ldr	r3, [pc, #8]	; (80036a4 <CLV+0xc>)
 800369a:	2200      	movs	r2, #0
 800369c:	719a      	strb	r2, [r3, #6]
	tick();
 800369e:	f7ff b8cd 	b.w	800283c <tick>
 80036a2:	bf00      	nop
 80036a4:	200002d9 	.word	0x200002d9

080036a8 <CLD>:
}

void CLD() {
	P[3] = 0;
 80036a8:	4b02      	ldr	r3, [pc, #8]	; (80036b4 <CLD+0xc>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	70da      	strb	r2, [r3, #3]
	tick();
 80036ae:	f7ff b8c5 	b.w	800283c <tick>
 80036b2:	bf00      	nop
 80036b4:	200002d9 	.word	0x200002d9

080036b8 <SEC>:
}

void SEC() {
	P[0] = 1;
 80036b8:	4b02      	ldr	r3, [pc, #8]	; (80036c4 <SEC+0xc>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]
	tick();
 80036be:	f7ff b8bd 	b.w	800283c <tick>
 80036c2:	bf00      	nop
 80036c4:	200002d9 	.word	0x200002d9

080036c8 <SEI>:
}

void SEI() {
	P[2] = 1;
 80036c8:	4b02      	ldr	r3, [pc, #8]	; (80036d4 <SEI+0xc>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	709a      	strb	r2, [r3, #2]
	tick();
 80036ce:	f7ff b8b5 	b.w	800283c <tick>
 80036d2:	bf00      	nop
 80036d4:	200002d9 	.word	0x200002d9

080036d8 <SED>:
}

void SED() {
	P[3] = 1;
 80036d8:	4b02      	ldr	r3, [pc, #8]	; (80036e4 <SED+0xc>)
 80036da:	2201      	movs	r2, #1
 80036dc:	70da      	strb	r2, [r3, #3]
	tick();
 80036de:	f7ff b8ad 	b.w	800283c <tick>
 80036e2:	bf00      	nop
 80036e4:	200002d9 	.word	0x200002d9

080036e8 <cpu_init>:
	tick();
}

/* CPU Execution */

void cpu_init() {
 80036e8:	b508      	push	{r3, lr}
	setFlags(0x24);
 80036ea:	2024      	movs	r0, #36	; 0x24
 80036ec:	f7ff fa14 	bl	8002b18 <setFlags>
	A = 0x00;
 80036f0:	4a08      	ldr	r2, [pc, #32]	; (8003714 <cpu_init+0x2c>)
 80036f2:	2300      	movs	r3, #0
 80036f4:	7013      	strb	r3, [r2, #0]
	X = 0x00;
 80036f6:	4a08      	ldr	r2, [pc, #32]	; (8003718 <cpu_init+0x30>)
 80036f8:	7013      	strb	r3, [r2, #0]
	Y = 0x00;
 80036fa:	4a08      	ldr	r2, [pc, #32]	; (800371c <cpu_init+0x34>)
 80036fc:	7013      	strb	r3, [r2, #0]
	S = 0x00;
 80036fe:	4a08      	ldr	r2, [pc, #32]	; (8003720 <cpu_init+0x38>)
 8003700:	7013      	strb	r3, [r2, #0]
	nmi = irq = 0;
 8003702:	4a08      	ldr	r2, [pc, #32]	; (8003724 <cpu_init+0x3c>)
 8003704:	7013      	strb	r3, [r2, #0]
 8003706:	4a08      	ldr	r2, [pc, #32]	; (8003728 <cpu_init+0x40>)
 8003708:	7013      	strb	r3, [r2, #0]
	INT_RESET();
}
 800370a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	INT_RESET();
 800370e:	f7ff ba7b 	b.w	8002c08 <INT_RESET>
 8003712:	bf00      	nop
 8003714:	200002d8 	.word	0x200002d8
 8003718:	200002e5 	.word	0x200002e5
 800371c:	200002e6 	.word	0x200002e6
 8003720:	200002e4 	.word	0x200002e4
 8003724:	200002ec 	.word	0x200002ec
 8003728:	200002ed 	.word	0x200002ed

0800372c <exec_inst>:

void exec_inst() {
 800372c:	b508      	push	{r3, lr}
	// Fetch
	u8 op = rd(PC++);
 800372e:	4b04      	ldr	r3, [pc, #16]	; (8003740 <exec_inst+0x14>)
 8003730:	8818      	ldrh	r0, [r3, #0]
 8003732:	1c42      	adds	r2, r0, #1
 8003734:	801a      	strh	r2, [r3, #0]
 8003736:	f7ff f889 	bl	800284c <rd>
	tick();
 800373a:	f7ff f87f 	bl	800283c <tick>
 800373e:	e001      	b.n	8003744 <exec_inst+0x18>
 8003740:	200002e2 	.word	0x200002e2
	// Decode/Execute
	switch (op) {
 8003744:	28fe      	cmp	r0, #254	; 0xfe
 8003746:	f200 83f2 	bhi.w	8003f2e <exec_inst+0x802>
 800374a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800374e:	00ff      	.short	0x00ff
 8003750:	03f00103 	.word	0x03f00103
 8003754:	03f003f0 	.word	0x03f003f0
 8003758:	010d0108 	.word	0x010d0108
 800375c:	011203f0 	.word	0x011203f0
 8003760:	011b0116 	.word	0x011b0116
 8003764:	03f003f0 	.word	0x03f003f0
 8003768:	0124011f 	.word	0x0124011f
 800376c:	012903f0 	.word	0x012903f0
 8003770:	03f0012e 	.word	0x03f0012e
 8003774:	03f003f0 	.word	0x03f003f0
 8003778:	01380133 	.word	0x01380133
 800377c:	013d03f0 	.word	0x013d03f0
 8003780:	03f00141 	.word	0x03f00141
 8003784:	03f003f0 	.word	0x03f003f0
 8003788:	014b0146 	.word	0x014b0146
 800378c:	015003f0 	.word	0x015003f0
 8003790:	03f00154 	.word	0x03f00154
 8003794:	015903f0 	.word	0x015903f0
 8003798:	0163015e 	.word	0x0163015e
 800379c:	016803f0 	.word	0x016803f0
 80037a0:	0171016c 	.word	0x0171016c
 80037a4:	017503f0 	.word	0x017503f0
 80037a8:	017f017a 	.word	0x017f017a
 80037ac:	018403f0 	.word	0x018403f0
 80037b0:	03f00189 	.word	0x03f00189
 80037b4:	03f003f0 	.word	0x03f003f0
 80037b8:	0193018e 	.word	0x0193018e
 80037bc:	019803f0 	.word	0x019803f0
 80037c0:	03f0019c 	.word	0x03f0019c
 80037c4:	03f003f0 	.word	0x03f003f0
 80037c8:	01a601a1 	.word	0x01a601a1
 80037cc:	01ab03f0 	.word	0x01ab03f0
 80037d0:	03f001af 	.word	0x03f001af
 80037d4:	03f003f0 	.word	0x03f003f0
 80037d8:	01b901b4 	.word	0x01b901b4
 80037dc:	01be03f0 	.word	0x01be03f0
 80037e0:	01c701c2 	.word	0x01c701c2
 80037e4:	01cb03f0 	.word	0x01cb03f0
 80037e8:	01d501d0 	.word	0x01d501d0
 80037ec:	01da03f0 	.word	0x01da03f0
 80037f0:	03f001df 	.word	0x03f001df
 80037f4:	03f003f0 	.word	0x03f003f0
 80037f8:	01e901e4 	.word	0x01e901e4
 80037fc:	01ee03f0 	.word	0x01ee03f0
 8003800:	03f001f2 	.word	0x03f001f2
 8003804:	03f003f0 	.word	0x03f003f0
 8003808:	01fc01f7 	.word	0x01fc01f7
 800380c:	020103f0 	.word	0x020103f0
 8003810:	03f00205 	.word	0x03f00205
 8003814:	03f003f0 	.word	0x03f003f0
 8003818:	020f020a 	.word	0x020f020a
 800381c:	021403f0 	.word	0x021403f0
 8003820:	021d0218 	.word	0x021d0218
 8003824:	022103f0 	.word	0x022103f0
 8003828:	022b0226 	.word	0x022b0226
 800382c:	023003f0 	.word	0x023003f0
 8003830:	03f00235 	.word	0x03f00235
 8003834:	03f003f0 	.word	0x03f003f0
 8003838:	023f023a 	.word	0x023f023a
 800383c:	024403f0 	.word	0x024403f0
 8003840:	03f00248 	.word	0x03f00248
 8003844:	03f003f0 	.word	0x03f003f0
 8003848:	0252024d 	.word	0x0252024d
 800384c:	03f003f0 	.word	0x03f003f0
 8003850:	03f00257 	.word	0x03f00257
 8003854:	025c03f0 	.word	0x025c03f0
 8003858:	02660261 	.word	0x02660261
 800385c:	026b03f0 	.word	0x026b03f0
 8003860:	026f03f0 	.word	0x026f03f0
 8003864:	027303f0 	.word	0x027303f0
 8003868:	027d0278 	.word	0x027d0278
 800386c:	028203f0 	.word	0x028203f0
 8003870:	03f00287 	.word	0x03f00287
 8003874:	028c03f0 	.word	0x028c03f0
 8003878:	02960291 	.word	0x02960291
 800387c:	029b03f0 	.word	0x029b03f0
 8003880:	02a4029f 	.word	0x02a4029f
 8003884:	03f003f0 	.word	0x03f003f0
 8003888:	03f002a8 	.word	0x03f002a8
 800388c:	02ad03f0 	.word	0x02ad03f0
 8003890:	02d302b2 	.word	0x02d302b2
 8003894:	02d803f0 	.word	0x02d803f0
 8003898:	02e202dd 	.word	0x02e202dd
 800389c:	02e703f0 	.word	0x02e703f0
 80038a0:	02f002eb 	.word	0x02f002eb
 80038a4:	02f403f0 	.word	0x02f403f0
 80038a8:	02fe02f9 	.word	0x02fe02f9
 80038ac:	030303f0 	.word	0x030303f0
 80038b0:	03f00308 	.word	0x03f00308
 80038b4:	030d03f0 	.word	0x030d03f0
 80038b8:	03170312 	.word	0x03170312
 80038bc:	031c03f0 	.word	0x031c03f0
 80038c0:	03250320 	.word	0x03250320
 80038c4:	032903f0 	.word	0x032903f0
 80038c8:	0333032e 	.word	0x0333032e
 80038cc:	033803f0 	.word	0x033803f0
 80038d0:	03f0033d 	.word	0x03f0033d
 80038d4:	034203f0 	.word	0x034203f0
 80038d8:	034c0347 	.word	0x034c0347
 80038dc:	035103f0 	.word	0x035103f0
 80038e0:	035a0355 	.word	0x035a0355
 80038e4:	035e03f0 	.word	0x035e03f0
 80038e8:	03680363 	.word	0x03680363
 80038ec:	036d03f0 	.word	0x036d03f0
 80038f0:	03f00372 	.word	0x03f00372
 80038f4:	03f003f0 	.word	0x03f003f0
 80038f8:	037c0377 	.word	0x037c0377
 80038fc:	038103f0 	.word	0x038103f0
 8003900:	03f00385 	.word	0x03f00385
 8003904:	03f003f0 	.word	0x03f003f0
 8003908:	038f038a 	.word	0x038f038a
 800390c:	039403f0 	.word	0x039403f0
 8003910:	03f00399 	.word	0x03f00399
 8003914:	039e03f0 	.word	0x039e03f0
 8003918:	03a803a3 	.word	0x03a803a3
 800391c:	03ad03f0 	.word	0x03ad03f0
 8003920:	03b603b1 	.word	0x03b603b1
 8003924:	03ba03f0 	.word	0x03ba03f0
 8003928:	03c403bf 	.word	0x03c403bf
 800392c:	03c903f0 	.word	0x03c903f0
 8003930:	03f003ce 	.word	0x03f003ce
 8003934:	03f003f0 	.word	0x03f003f0
 8003938:	03d803d3 	.word	0x03d803d3
 800393c:	03dd03f0 	.word	0x03dd03f0
 8003940:	03f003e1 	.word	0x03f003e1
 8003944:	03f003f0 	.word	0x03f003f0
 8003948:	03eb03e6 	.word	0x03eb03e6
		{
			printf("Invalid instruction!\n");
			return NOP();
		}
	}
}
 800394c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x00: return BRK()        ; case 0x01: return ORA(xind)    ;
 8003950:	f7ff b9be 	b.w	8002cd0 <BRK>
 8003954:	48d9      	ldr	r0, [pc, #868]	; (8003cbc <exec_inst+0x590>)
}
 8003956:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x00: return BRK()        ; case 0x01: return ORA(xind)    ;
 800395a:	f7ff bb93 	b.w	8003084 <ORA>
		case 0x05: return ORA(zp)      ; case 0x06: return ASL(zp)      ;
 800395e:	48d8      	ldr	r0, [pc, #864]	; (8003cc0 <exec_inst+0x594>)
}
 8003960:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x05: return ORA(zp)      ; case 0x06: return ASL(zp)      ;
 8003964:	f7ff bb8e 	b.w	8003084 <ORA>
 8003968:	48d5      	ldr	r0, [pc, #852]	; (8003cc0 <exec_inst+0x594>)
}
 800396a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x05: return ORA(zp)      ; case 0x06: return ASL(zp)      ;
 800396e:	f7ff bcb5 	b.w	80032dc <ASL>
}
 8003972:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x08: return PHP()        ; case 0x09: return ORA(imm)     ;
 8003976:	f7ff bac5 	b.w	8002f04 <PHP>
 800397a:	48d2      	ldr	r0, [pc, #840]	; (8003cc4 <exec_inst+0x598>)
}
 800397c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x08: return PHP()        ; case 0x09: return ORA(imm)     ;
 8003980:	f7ff bb80 	b.w	8003084 <ORA>
}
 8003984:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x0A: return ASL_A()      ; case 0x0D: return ORA(absl)    ;
 8003988:	f7ff bcc8 	b.w	800331c <ASL_A>
 800398c:	48ce      	ldr	r0, [pc, #824]	; (8003cc8 <exec_inst+0x59c>)
}
 800398e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x0A: return ASL_A()      ; case 0x0D: return ORA(absl)    ;
 8003992:	f7ff bb77 	b.w	8003084 <ORA>
		case 0x0E: return ASL(absl)    ; case 0x10: return BPL(rel)     ;
 8003996:	48cc      	ldr	r0, [pc, #816]	; (8003cc8 <exec_inst+0x59c>)
}
 8003998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x0E: return ASL(absl)    ; case 0x10: return BPL(rel)     ;
 800399c:	f7ff bc9e 	b.w	80032dc <ASL>
 80039a0:	48ca      	ldr	r0, [pc, #808]	; (8003ccc <exec_inst+0x5a0>)
}
 80039a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x0E: return ASL(absl)    ; case 0x10: return BPL(rel)     ;
 80039a6:	f7ff bde7 	b.w	8003578 <BPL>
		case 0x11: return ORA(indy_rd) ; case 0x15: return ORA(zpx)     ;
 80039aa:	48c9      	ldr	r0, [pc, #804]	; (8003cd0 <exec_inst+0x5a4>)
}
 80039ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x11: return ORA(indy_rd) ; case 0x15: return ORA(zpx)     ;
 80039b0:	f7ff bb68 	b.w	8003084 <ORA>
 80039b4:	48c7      	ldr	r0, [pc, #796]	; (8003cd4 <exec_inst+0x5a8>)
}
 80039b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x11: return ORA(indy_rd) ; case 0x15: return ORA(zpx)     ;
 80039ba:	f7ff bb63 	b.w	8003084 <ORA>
		case 0x16: return ASL(zpx)     ; case 0x18: return CLC()        ;
 80039be:	48c5      	ldr	r0, [pc, #788]	; (8003cd4 <exec_inst+0x5a8>)
}
 80039c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x16: return ASL(zpx)     ; case 0x18: return CLC()        ;
 80039c4:	f7ff bc8a 	b.w	80032dc <ASL>
}
 80039c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x16: return ASL(zpx)     ; case 0x18: return CLC()        ;
 80039cc:	f7ff be54 	b.w	8003678 <CLC>
		case 0x19: return ORA(absy_rd) ; case 0x1D: return ORA(absx_rd) ;
 80039d0:	48c1      	ldr	r0, [pc, #772]	; (8003cd8 <exec_inst+0x5ac>)
}
 80039d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x19: return ORA(absy_rd) ; case 0x1D: return ORA(absx_rd) ;
 80039d6:	f7ff bb55 	b.w	8003084 <ORA>
 80039da:	48c0      	ldr	r0, [pc, #768]	; (8003cdc <exec_inst+0x5b0>)
}
 80039dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x19: return ORA(absy_rd) ; case 0x1D: return ORA(absx_rd) ;
 80039e0:	f7ff bb50 	b.w	8003084 <ORA>
		case 0x1E: return ASL(absx_wr) ; case 0x20: return JSR()        ;
 80039e4:	48be      	ldr	r0, [pc, #760]	; (8003ce0 <exec_inst+0x5b4>)
}
 80039e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x1E: return ASL(absx_wr) ; case 0x20: return JSR()        ;
 80039ea:	f7ff bc77 	b.w	80032dc <ASL>
}
 80039ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x1E: return ASL(absx_wr) ; case 0x20: return JSR()        ;
 80039f2:	f7ff bd67 	b.w	80034c4 <JSR>
		case 0x21: return AND(xind)    ; case 0x24: return BIT(zp)      ;
 80039f6:	48b1      	ldr	r0, [pc, #708]	; (8003cbc <exec_inst+0x590>)
}
 80039f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x21: return AND(xind)    ; case 0x24: return BIT(zp)      ;
 80039fc:	f7ff bb10 	b.w	8003020 <AND>
 8003a00:	48af      	ldr	r0, [pc, #700]	; (8003cc0 <exec_inst+0x594>)
}
 8003a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x21: return AND(xind)    ; case 0x24: return BIT(zp)      ;
 8003a06:	f7ff bb55 	b.w	80030b4 <BIT>
		case 0x25: return AND(zp)      ; case 0x26: return ROL(zp)      ;
 8003a0a:	48ad      	ldr	r0, [pc, #692]	; (8003cc0 <exec_inst+0x594>)
}
 8003a0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x25: return AND(zp)      ; case 0x26: return ROL(zp)      ;
 8003a10:	f7ff bb06 	b.w	8003020 <AND>
 8003a14:	48aa      	ldr	r0, [pc, #680]	; (8003cc0 <exec_inst+0x594>)
}
 8003a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x25: return AND(zp)      ; case 0x26: return ROL(zp)      ;
 8003a1a:	f7ff bccf 	b.w	80033bc <ROL>
}
 8003a1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x28: return PLP()        ; case 0x29: return AND(imm)     ;
 8003a22:	f7ff ba7d 	b.w	8002f20 <PLP>
 8003a26:	48a7      	ldr	r0, [pc, #668]	; (8003cc4 <exec_inst+0x598>)
}
 8003a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x28: return PLP()        ; case 0x29: return AND(imm)     ;
 8003a2c:	f7ff baf8 	b.w	8003020 <AND>
}
 8003a30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x2A: return ROL_A()      ; case 0x2C: return BIT(absl)    ;
 8003a34:	f7ff bce4 	b.w	8003400 <ROL_A>
 8003a38:	48a3      	ldr	r0, [pc, #652]	; (8003cc8 <exec_inst+0x59c>)
}
 8003a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x2A: return ROL_A()      ; case 0x2C: return BIT(absl)    ;
 8003a3e:	f7ff bb39 	b.w	80030b4 <BIT>
		case 0x2D: return AND(absl)    ; case 0x2E: return ROL(absl)    ;
 8003a42:	48a1      	ldr	r0, [pc, #644]	; (8003cc8 <exec_inst+0x59c>)
}
 8003a44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x2D: return AND(absl)    ; case 0x2E: return ROL(absl)    ;
 8003a48:	f7ff baea 	b.w	8003020 <AND>
 8003a4c:	489e      	ldr	r0, [pc, #632]	; (8003cc8 <exec_inst+0x59c>)
}
 8003a4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x2D: return AND(absl)    ; case 0x2E: return ROL(absl)    ;
 8003a52:	f7ff bcb3 	b.w	80033bc <ROL>
		case 0x30: return BMI(rel)     ; case 0x31: return AND(indy_rd) ;
 8003a56:	489d      	ldr	r0, [pc, #628]	; (8003ccc <exec_inst+0x5a0>)
}
 8003a58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x30: return BMI(rel)     ; case 0x31: return AND(indy_rd) ;
 8003a5c:	f7ff bd9c 	b.w	8003598 <BMI>
 8003a60:	489b      	ldr	r0, [pc, #620]	; (8003cd0 <exec_inst+0x5a4>)
}
 8003a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x30: return BMI(rel)     ; case 0x31: return AND(indy_rd) ;
 8003a66:	f7ff badb 	b.w	8003020 <AND>
		case 0x35: return AND(zpx)     ; case 0x36: return ROL(zpx)     ;
 8003a6a:	489a      	ldr	r0, [pc, #616]	; (8003cd4 <exec_inst+0x5a8>)
}
 8003a6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x35: return AND(zpx)     ; case 0x36: return ROL(zpx)     ;
 8003a70:	f7ff bad6 	b.w	8003020 <AND>
 8003a74:	4897      	ldr	r0, [pc, #604]	; (8003cd4 <exec_inst+0x5a8>)
}
 8003a76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x35: return AND(zpx)     ; case 0x36: return ROL(zpx)     ;
 8003a7a:	f7ff bc9f 	b.w	80033bc <ROL>
}
 8003a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x38: return SEC()        ; case 0x39: return AND(absy_rd) ;
 8003a82:	f7ff be19 	b.w	80036b8 <SEC>
 8003a86:	4894      	ldr	r0, [pc, #592]	; (8003cd8 <exec_inst+0x5ac>)
}
 8003a88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x38: return SEC()        ; case 0x39: return AND(absy_rd) ;
 8003a8c:	f7ff bac8 	b.w	8003020 <AND>
		case 0x3D: return AND(absx_rd) ; case 0x3E: return ROL(absx_wr) ;
 8003a90:	4892      	ldr	r0, [pc, #584]	; (8003cdc <exec_inst+0x5b0>)
}
 8003a92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x3D: return AND(absx_rd) ; case 0x3E: return ROL(absx_wr) ;
 8003a96:	f7ff bac3 	b.w	8003020 <AND>
 8003a9a:	4891      	ldr	r0, [pc, #580]	; (8003ce0 <exec_inst+0x5b4>)
}
 8003a9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x3D: return AND(absx_rd) ; case 0x3E: return ROL(absx_wr) ;
 8003aa0:	f7ff bc8c 	b.w	80033bc <ROL>
}
 8003aa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x40: return RTI()        ; case 0x41: return EOR(xind)    ;
 8003aa8:	f7ff bd4a 	b.w	8003540 <RTI>
 8003aac:	4883      	ldr	r0, [pc, #524]	; (8003cbc <exec_inst+0x590>)
}
 8003aae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x40: return RTI()        ; case 0x41: return EOR(xind)    ;
 8003ab2:	f7ff bacd 	b.w	8003050 <EOR>
		case 0x45: return EOR(zp)      ; case 0x46: return LSR(zp)      ;
 8003ab6:	4882      	ldr	r0, [pc, #520]	; (8003cc0 <exec_inst+0x594>)
}
 8003ab8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x45: return EOR(zp)      ; case 0x46: return LSR(zp)      ;
 8003abc:	f7ff bac8 	b.w	8003050 <EOR>
 8003ac0:	487f      	ldr	r0, [pc, #508]	; (8003cc0 <exec_inst+0x594>)
}
 8003ac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x45: return EOR(zp)      ; case 0x46: return LSR(zp)      ;
 8003ac6:	f7ff bc41 	b.w	800334c <LSR>
}
 8003aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x48: return PHA()        ; case 0x49: return EOR(imm)     ;
 8003ace:	f7ff ba35 	b.w	8002f3c <PHA>
 8003ad2:	487c      	ldr	r0, [pc, #496]	; (8003cc4 <exec_inst+0x598>)
}
 8003ad4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x48: return PHA()        ; case 0x49: return EOR(imm)     ;
 8003ad8:	f7ff baba 	b.w	8003050 <EOR>
}
 8003adc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x4A: return LSR_A()      ; case 0x4C: return JMP(absl)    ;
 8003ae0:	f7ff bc54 	b.w	800338c <LSR_A>
 8003ae4:	4878      	ldr	r0, [pc, #480]	; (8003cc8 <exec_inst+0x59c>)
}
 8003ae6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x4A: return LSR_A()      ; case 0x4C: return JMP(absl)    ;
 8003aea:	f7ff bce3 	b.w	80034b4 <JMP>
		case 0x4D: return EOR(absl)    ; case 0x4E: return LSR(absl)    ;
 8003aee:	4876      	ldr	r0, [pc, #472]	; (8003cc8 <exec_inst+0x59c>)
}
 8003af0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x4D: return EOR(absl)    ; case 0x4E: return LSR(absl)    ;
 8003af4:	f7ff baac 	b.w	8003050 <EOR>
 8003af8:	4873      	ldr	r0, [pc, #460]	; (8003cc8 <exec_inst+0x59c>)
}
 8003afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x4D: return EOR(absl)    ; case 0x4E: return LSR(absl)    ;
 8003afe:	f7ff bc25 	b.w	800334c <LSR>
		case 0x50: return BVC(rel)     ; case 0x51: return EOR(indy_rd) ;
 8003b02:	4872      	ldr	r0, [pc, #456]	; (8003ccc <exec_inst+0x5a0>)
}
 8003b04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x50: return BVC(rel)     ; case 0x51: return EOR(indy_rd) ;
 8003b08:	f7ff bd56 	b.w	80035b8 <BVC>
 8003b0c:	4870      	ldr	r0, [pc, #448]	; (8003cd0 <exec_inst+0x5a4>)
}
 8003b0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x50: return BVC(rel)     ; case 0x51: return EOR(indy_rd) ;
 8003b12:	f7ff ba9d 	b.w	8003050 <EOR>
		case 0x55: return EOR(zpx)     ; case 0x56: return LSR(zpx)     ;
 8003b16:	486f      	ldr	r0, [pc, #444]	; (8003cd4 <exec_inst+0x5a8>)
}
 8003b18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x55: return EOR(zpx)     ; case 0x56: return LSR(zpx)     ;
 8003b1c:	f7ff ba98 	b.w	8003050 <EOR>
 8003b20:	486c      	ldr	r0, [pc, #432]	; (8003cd4 <exec_inst+0x5a8>)
}
 8003b22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x55: return EOR(zpx)     ; case 0x56: return LSR(zpx)     ;
 8003b26:	f7ff bc11 	b.w	800334c <LSR>
}
 8003b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x58: return CLI()        ; case 0x59: return EOR(absy_rd) ;
 8003b2e:	f7ff bdab 	b.w	8003688 <CLI>
 8003b32:	4869      	ldr	r0, [pc, #420]	; (8003cd8 <exec_inst+0x5ac>)
}
 8003b34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x58: return CLI()        ; case 0x59: return EOR(absy_rd) ;
 8003b38:	f7ff ba8a 	b.w	8003050 <EOR>
		case 0x5D: return EOR(absx_rd) ; case 0x5E: return LSR(absx_wr) ;
 8003b3c:	4867      	ldr	r0, [pc, #412]	; (8003cdc <exec_inst+0x5b0>)
}
 8003b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x5D: return EOR(absx_rd) ; case 0x5E: return LSR(absx_wr) ;
 8003b42:	f7ff ba85 	b.w	8003050 <EOR>
 8003b46:	4866      	ldr	r0, [pc, #408]	; (8003ce0 <exec_inst+0x5b4>)
}
 8003b48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x5D: return EOR(absx_rd) ; case 0x5E: return LSR(absx_wr) ;
 8003b4c:	f7ff bbfe 	b.w	800334c <LSR>
}
 8003b50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x60: return RTS()        ; case 0x61: return ADC_(xind)   ;
 8003b54:	f7ff bcda 	b.w	800350c <RTS>
 8003b58:	4858      	ldr	r0, [pc, #352]	; (8003cbc <exec_inst+0x590>)
}
 8003b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x60: return RTS()        ; case 0x61: return ADC_(xind)   ;
 8003b5e:	f7ff ba13 	b.w	8002f88 <ADC_>
		case 0x65: return ADC_(zp)     ; case 0x66: return ROR(zp)      ;
 8003b62:	4857      	ldr	r0, [pc, #348]	; (8003cc0 <exec_inst+0x594>)
}
 8003b64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x65: return ADC_(zp)     ; case 0x66: return ROR(zp)      ;
 8003b68:	f7ff ba0e 	b.w	8002f88 <ADC_>
 8003b6c:	4854      	ldr	r0, [pc, #336]	; (8003cc0 <exec_inst+0x594>)
}
 8003b6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x65: return ADC_(zp)     ; case 0x66: return ROR(zp)      ;
 8003b72:	f7ff bc5f 	b.w	8003434 <ROR>
}
 8003b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x68: return PLA()        ; case 0x69: return ADC_(imm)    ;
 8003b7a:	f7ff b9ed 	b.w	8002f58 <PLA>
 8003b7e:	4851      	ldr	r0, [pc, #324]	; (8003cc4 <exec_inst+0x598>)
}
 8003b80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x68: return PLA()        ; case 0x69: return ADC_(imm)    ;
 8003b84:	f7ff ba00 	b.w	8002f88 <ADC_>
}
 8003b88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x6A: return ROR_A()      ; case 0x6C: return JMP(ind)     ;
 8003b8c:	f7ff bc76 	b.w	800347c <ROR_A>
 8003b90:	4854      	ldr	r0, [pc, #336]	; (8003ce4 <exec_inst+0x5b8>)
}
 8003b92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x6A: return ROR_A()      ; case 0x6C: return JMP(ind)     ;
 8003b96:	f7ff bc8d 	b.w	80034b4 <JMP>
		case 0x6D: return ADC_(absl)   ; case 0x6E: return ROR(absl)    ;
 8003b9a:	484b      	ldr	r0, [pc, #300]	; (8003cc8 <exec_inst+0x59c>)
}
 8003b9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x6D: return ADC_(absl)   ; case 0x6E: return ROR(absl)    ;
 8003ba0:	f7ff b9f2 	b.w	8002f88 <ADC_>
 8003ba4:	4848      	ldr	r0, [pc, #288]	; (8003cc8 <exec_inst+0x59c>)
}
 8003ba6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x6D: return ADC_(absl)   ; case 0x6E: return ROR(absl)    ;
 8003baa:	f7ff bc43 	b.w	8003434 <ROR>
		case 0x70: return BVS(rel)     ; case 0x71: return ADC_(indy_rd);
 8003bae:	4847      	ldr	r0, [pc, #284]	; (8003ccc <exec_inst+0x5a0>)
}
 8003bb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x70: return BVS(rel)     ; case 0x71: return ADC_(indy_rd);
 8003bb4:	f7ff bd10 	b.w	80035d8 <BVS>
 8003bb8:	4845      	ldr	r0, [pc, #276]	; (8003cd0 <exec_inst+0x5a4>)
}
 8003bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x70: return BVS(rel)     ; case 0x71: return ADC_(indy_rd);
 8003bbe:	f7ff b9e3 	b.w	8002f88 <ADC_>
		case 0x75: return ADC_(zpx)    ; case 0x76: return ROR(zpx)     ;
 8003bc2:	4844      	ldr	r0, [pc, #272]	; (8003cd4 <exec_inst+0x5a8>)
}
 8003bc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x75: return ADC_(zpx)    ; case 0x76: return ROR(zpx)     ;
 8003bc8:	f7ff b9de 	b.w	8002f88 <ADC_>
 8003bcc:	4841      	ldr	r0, [pc, #260]	; (8003cd4 <exec_inst+0x5a8>)
}
 8003bce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x75: return ADC_(zpx)    ; case 0x76: return ROR(zpx)     ;
 8003bd2:	f7ff bc2f 	b.w	8003434 <ROR>
}
 8003bd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x78: return SEI()        ; case 0x79: return ADC_(absy_rd);
 8003bda:	f7ff bd75 	b.w	80036c8 <SEI>
 8003bde:	483e      	ldr	r0, [pc, #248]	; (8003cd8 <exec_inst+0x5ac>)
}
 8003be0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x78: return SEI()        ; case 0x79: return ADC_(absy_rd);
 8003be4:	f7ff b9d0 	b.w	8002f88 <ADC_>
		case 0x7D: return ADC_(absx_rd); case 0x7E: return ROR(absx_wr) ;
 8003be8:	483c      	ldr	r0, [pc, #240]	; (8003cdc <exec_inst+0x5b0>)
}
 8003bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x7D: return ADC_(absx_rd); case 0x7E: return ROR(absx_wr) ;
 8003bee:	f7ff b9cb 	b.w	8002f88 <ADC_>
 8003bf2:	483b      	ldr	r0, [pc, #236]	; (8003ce0 <exec_inst+0x5b4>)
}
 8003bf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x7D: return ADC_(absx_rd); case 0x7E: return ROR(absx_wr) ;
 8003bf8:	f7ff bc1c 	b.w	8003434 <ROR>
		case 0x81: return STA(xind)    ; case 0x84: return STY(zp)      ;
 8003bfc:	482f      	ldr	r0, [pc, #188]	; (8003cbc <exec_inst+0x590>)
}
 8003bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x81: return STA(xind)    ; case 0x84: return STY(zp)      ;
 8003c02:	f7ff b8d9 	b.w	8002db8 <STA>
 8003c06:	482e      	ldr	r0, [pc, #184]	; (8003cc0 <exec_inst+0x594>)
}
 8003c08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x81: return STA(xind)    ; case 0x84: return STY(zp)      ;
 8003c0c:	f7ff b8ec 	b.w	8002de8 <STY>
		case 0x85: return STA(zp)      ; case 0x86: return STX(zp)      ;
 8003c10:	482b      	ldr	r0, [pc, #172]	; (8003cc0 <exec_inst+0x594>)
}
 8003c12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x85: return STA(zp)      ; case 0x86: return STX(zp)      ;
 8003c16:	f7ff b8cf 	b.w	8002db8 <STA>
 8003c1a:	4829      	ldr	r0, [pc, #164]	; (8003cc0 <exec_inst+0x594>)
}
 8003c1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x85: return STA(zp)      ; case 0x86: return STX(zp)      ;
 8003c20:	f7ff b8d6 	b.w	8002dd0 <STX>
}
 8003c24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x88: return DEY()        ; case 0x8A: return TXA()        ;
 8003c28:	f7ff bb42 	b.w	80032b0 <DEY>
}
 8003c2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x88: return DEY()        ; case 0x8A: return TXA()        ;
 8003c30:	f7ff b8e6 	b.w	8002e00 <TXA>
		case 0x8C: return STY(absl)    ; case 0x8D: return STA(absl)    ;
 8003c34:	4824      	ldr	r0, [pc, #144]	; (8003cc8 <exec_inst+0x59c>)
}
 8003c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x8C: return STY(absl)    ; case 0x8D: return STA(absl)    ;
 8003c3a:	f7ff b8d5 	b.w	8002de8 <STY>
 8003c3e:	4822      	ldr	r0, [pc, #136]	; (8003cc8 <exec_inst+0x59c>)
}
 8003c40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x8C: return STY(absl)    ; case 0x8D: return STA(absl)    ;
 8003c44:	f7ff b8b8 	b.w	8002db8 <STA>
		case 0x8E: return STX(absl)    ; case 0x90: return BCC(rel)     ;
 8003c48:	481f      	ldr	r0, [pc, #124]	; (8003cc8 <exec_inst+0x59c>)
}
 8003c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x8E: return STX(absl)    ; case 0x90: return BCC(rel)     ;
 8003c4e:	f7ff b8bf 	b.w	8002dd0 <STX>
 8003c52:	481e      	ldr	r0, [pc, #120]	; (8003ccc <exec_inst+0x5a0>)
}
 8003c54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x8E: return STX(absl)    ; case 0x90: return BCC(rel)     ;
 8003c58:	f7ff bcce 	b.w	80035f8 <BCC>
		case 0x91: return STA(indy_wr) ; case 0x94: return STY(zpx)     ;
 8003c5c:	4822      	ldr	r0, [pc, #136]	; (8003ce8 <exec_inst+0x5bc>)
}
 8003c5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x91: return STA(indy_wr) ; case 0x94: return STY(zpx)     ;
 8003c62:	f7ff b8a9 	b.w	8002db8 <STA>
 8003c66:	481b      	ldr	r0, [pc, #108]	; (8003cd4 <exec_inst+0x5a8>)
}
 8003c68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x91: return STA(indy_wr) ; case 0x94: return STY(zpx)     ;
 8003c6c:	f7ff b8bc 	b.w	8002de8 <STY>
		case 0x95: return STA(zpx)     ; case 0x96: return STX(zpy)     ;
 8003c70:	4818      	ldr	r0, [pc, #96]	; (8003cd4 <exec_inst+0x5a8>)
}
 8003c72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x95: return STA(zpx)     ; case 0x96: return STX(zpy)     ;
 8003c76:	f7ff b89f 	b.w	8002db8 <STA>
 8003c7a:	481c      	ldr	r0, [pc, #112]	; (8003cec <exec_inst+0x5c0>)
}
 8003c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x95: return STA(zpx)     ; case 0x96: return STX(zpy)     ;
 8003c80:	f7ff b8a6 	b.w	8002dd0 <STX>
}
 8003c84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x98: return TYA()        ; case 0x99: return STA(absy_wr) ;
 8003c88:	f7ff b8dc 	b.w	8002e44 <TYA>
 8003c8c:	4818      	ldr	r0, [pc, #96]	; (8003cf0 <exec_inst+0x5c4>)
}
 8003c8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x98: return TYA()        ; case 0x99: return STA(absy_wr) ;
 8003c92:	f7ff b891 	b.w	8002db8 <STA>
}
 8003c96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x9A: return TXS()        ; case 0x9D: return STA(absx_wr) ;
 8003c9a:	f7ff b8c9 	b.w	8002e30 <TXS>
 8003c9e:	4810      	ldr	r0, [pc, #64]	; (8003ce0 <exec_inst+0x5b4>)
}
 8003ca0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0x9A: return TXS()        ; case 0x9D: return STA(absx_wr) ;
 8003ca4:	f7ff b888 	b.w	8002db8 <STA>
		case 0xA0: return LDY(imm)     ; case 0xA1: return LDA(xind)    ;
 8003ca8:	4806      	ldr	r0, [pc, #24]	; (8003cc4 <exec_inst+0x598>)
}
 8003caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xA0: return LDY(imm)     ; case 0xA1: return LDA(xind)    ;
 8003cae:	f7ff b86d 	b.w	8002d8c <LDY>
 8003cb2:	4802      	ldr	r0, [pc, #8]	; (8003cbc <exec_inst+0x590>)
}
 8003cb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xA0: return LDY(imm)     ; case 0xA1: return LDA(xind)    ;
 8003cb8:	f7ff b83c 	b.w	8002d34 <LDA>
 8003cbc:	08002a0b 	.word	0x08002a0b
 8003cc0:	08002871 	.word	0x08002871
 8003cc4:	0800281d 	.word	0x0800281d
 8003cc8:	080028b1 	.word	0x080028b1
 8003ccc:	080028c9 	.word	0x080028c9
 8003cd0:	08002a35 	.word	0x08002a35
 8003cd4:	08002881 	.word	0x08002881
 8003cd8:	0800295d 	.word	0x0800295d
 8003cdc:	080028ed 	.word	0x080028ed
 8003ce0:	08002925 	.word	0x08002925
 8003ce4:	080029cd 	.word	0x080029cd
 8003ce8:	08002a79 	.word	0x08002a79
 8003cec:	08002899 	.word	0x08002899
 8003cf0:	08002995 	.word	0x08002995
		case 0xA2: return LDX(imm)     ; case 0xA4: return LDY(zp)      ;
 8003cf4:	4891      	ldr	r0, [pc, #580]	; (8003f3c <exec_inst+0x810>)
}
 8003cf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xA2: return LDX(imm)     ; case 0xA4: return LDY(zp)      ;
 8003cfa:	f7ff b831 	b.w	8002d60 <LDX>
 8003cfe:	4890      	ldr	r0, [pc, #576]	; (8003f40 <exec_inst+0x814>)
}
 8003d00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xA2: return LDX(imm)     ; case 0xA4: return LDY(zp)      ;
 8003d04:	f7ff b842 	b.w	8002d8c <LDY>
		case 0xA5: return LDA(zp)      ; case 0xA6: return LDX(zp)      ;
 8003d08:	488d      	ldr	r0, [pc, #564]	; (8003f40 <exec_inst+0x814>)
}
 8003d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xA5: return LDA(zp)      ; case 0xA6: return LDX(zp)      ;
 8003d0e:	f7ff b811 	b.w	8002d34 <LDA>
 8003d12:	488b      	ldr	r0, [pc, #556]	; (8003f40 <exec_inst+0x814>)
}
 8003d14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xA5: return LDA(zp)      ; case 0xA6: return LDX(zp)      ;
 8003d18:	f7ff b822 	b.w	8002d60 <LDX>
}
 8003d1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xA8: return TAY()        ; case 0xA9: return LDA(imm)     ;
 8003d20:	f7ff b8c0 	b.w	8002ea4 <TAY>
 8003d24:	4885      	ldr	r0, [pc, #532]	; (8003f3c <exec_inst+0x810>)
}
 8003d26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xA8: return TAY()        ; case 0xA9: return LDA(imm)     ;
 8003d2a:	f7ff b803 	b.w	8002d34 <LDA>
}
 8003d2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xAA: return TAX()        ; case 0xAC: return LDY(absl)    ;
 8003d32:	f7ff b89f 	b.w	8002e74 <TAX>
 8003d36:	4883      	ldr	r0, [pc, #524]	; (8003f44 <exec_inst+0x818>)
}
 8003d38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xAA: return TAX()        ; case 0xAC: return LDY(absl)    ;
 8003d3c:	f7ff b826 	b.w	8002d8c <LDY>
		case 0xAD: return LDA(absl)    ; case 0xAE: return LDX(absl)    ;
 8003d40:	4880      	ldr	r0, [pc, #512]	; (8003f44 <exec_inst+0x818>)
}
 8003d42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xAD: return LDA(absl)    ; case 0xAE: return LDX(absl)    ;
 8003d46:	f7fe bff5 	b.w	8002d34 <LDA>
 8003d4a:	487e      	ldr	r0, [pc, #504]	; (8003f44 <exec_inst+0x818>)
}
 8003d4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xAD: return LDA(absl)    ; case 0xAE: return LDX(absl)    ;
 8003d50:	f7ff b806 	b.w	8002d60 <LDX>
		case 0xB0: return BCS(rel)     ; case 0xB1: return LDA(indy_rd) ;
 8003d54:	487c      	ldr	r0, [pc, #496]	; (8003f48 <exec_inst+0x81c>)
}
 8003d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xB0: return BCS(rel)     ; case 0xB1: return LDA(indy_rd) ;
 8003d5a:	f7ff bc5d 	b.w	8003618 <BCS>
 8003d5e:	487b      	ldr	r0, [pc, #492]	; (8003f4c <exec_inst+0x820>)
}
 8003d60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xB0: return BCS(rel)     ; case 0xB1: return LDA(indy_rd) ;
 8003d64:	f7fe bfe6 	b.w	8002d34 <LDA>
		case 0xB4: return LDY(zpx)     ; case 0xB5: return LDA(zpx)     ;
 8003d68:	4879      	ldr	r0, [pc, #484]	; (8003f50 <exec_inst+0x824>)
}
 8003d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xB4: return LDY(zpx)     ; case 0xB5: return LDA(zpx)     ;
 8003d6e:	f7ff b80d 	b.w	8002d8c <LDY>
 8003d72:	4877      	ldr	r0, [pc, #476]	; (8003f50 <exec_inst+0x824>)
}
 8003d74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xB4: return LDY(zpx)     ; case 0xB5: return LDA(zpx)     ;
 8003d78:	f7fe bfdc 	b.w	8002d34 <LDA>
		case 0xB6: return LDX(zpy)     ; case 0xB8: return CLV()        ;
 8003d7c:	4875      	ldr	r0, [pc, #468]	; (8003f54 <exec_inst+0x828>)
}
 8003d7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xB6: return LDX(zpy)     ; case 0xB8: return CLV()        ;
 8003d82:	f7fe bfed 	b.w	8002d60 <LDX>
}
 8003d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xB6: return LDX(zpy)     ; case 0xB8: return CLV()        ;
 8003d8a:	f7ff bc85 	b.w	8003698 <CLV>
		case 0xB9: return LDA(absy_rd) ; case 0xBA: return TSX()        ;
 8003d8e:	4872      	ldr	r0, [pc, #456]	; (8003f58 <exec_inst+0x82c>)
}
 8003d90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xB9: return LDA(absy_rd) ; case 0xBA: return TSX()        ;
 8003d94:	f7fe bfce 	b.w	8002d34 <LDA>
}
 8003d98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xB9: return LDA(absy_rd) ; case 0xBA: return TSX()        ;
 8003d9c:	f7ff b89a 	b.w	8002ed4 <TSX>
		case 0xBC: return LDY(absx_rd) ; case 0xBD: return LDA(absx_rd) ;
 8003da0:	486e      	ldr	r0, [pc, #440]	; (8003f5c <exec_inst+0x830>)
}
 8003da2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xBC: return LDY(absx_rd) ; case 0xBD: return LDA(absx_rd) ;
 8003da6:	f7fe bff1 	b.w	8002d8c <LDY>
 8003daa:	486c      	ldr	r0, [pc, #432]	; (8003f5c <exec_inst+0x830>)
}
 8003dac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xBC: return LDY(absx_rd) ; case 0xBD: return LDA(absx_rd) ;
 8003db0:	f7fe bfc0 	b.w	8002d34 <LDA>
		case 0xBE: return LDX(absy_rd) ; case 0xC0: return CPY(imm)     ;
 8003db4:	4868      	ldr	r0, [pc, #416]	; (8003f58 <exec_inst+0x82c>)
}
 8003db6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xBE: return LDX(absy_rd) ; case 0xC0: return CPY(imm)     ;
 8003dba:	f7fe bfd1 	b.w	8002d60 <LDX>
 8003dbe:	485f      	ldr	r0, [pc, #380]	; (8003f3c <exec_inst+0x810>)
}
 8003dc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xBE: return LDX(absy_rd) ; case 0xC0: return CPY(imm)     ;
 8003dc4:	f7ff b9d4 	b.w	8003170 <CPY>
		case 0xC1: return CMP(xind)    ; case 0xC4: return CPY(zp)      ;
 8003dc8:	4865      	ldr	r0, [pc, #404]	; (8003f60 <exec_inst+0x834>)
}
 8003dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xC1: return CMP(xind)    ; case 0xC4: return CPY(zp)      ;
 8003dce:	f7ff b98b 	b.w	80030e8 <CMP>
 8003dd2:	485b      	ldr	r0, [pc, #364]	; (8003f40 <exec_inst+0x814>)
}
 8003dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xC1: return CMP(xind)    ; case 0xC4: return CPY(zp)      ;
 8003dd8:	f7ff b9ca 	b.w	8003170 <CPY>
		case 0xC5: return CMP(zp)      ; case 0xC6: return DEC(zp)      ;
 8003ddc:	4858      	ldr	r0, [pc, #352]	; (8003f40 <exec_inst+0x814>)
}
 8003dde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xC5: return CMP(zp)      ; case 0xC6: return DEC(zp)      ;
 8003de2:	f7ff b981 	b.w	80030e8 <CMP>
 8003de6:	4856      	ldr	r0, [pc, #344]	; (8003f40 <exec_inst+0x814>)
}
 8003de8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xC5: return CMP(zp)      ; case 0xC6: return DEC(zp)      ;
 8003dec:	f7ff ba2c 	b.w	8003248 <DEC>
}
 8003df0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xC8: return INY()        ; case 0xC9: return CMP(imm)     ;
 8003df4:	f7ff ba12 	b.w	800321c <INY>
 8003df8:	4850      	ldr	r0, [pc, #320]	; (8003f3c <exec_inst+0x810>)
}
 8003dfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xC8: return INY()        ; case 0xC9: return CMP(imm)     ;
 8003dfe:	f7ff b973 	b.w	80030e8 <CMP>
}
 8003e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xCA: return DEX()        ; case 0xCC: return CPY(absl)    ;
 8003e06:	f7ff ba3d 	b.w	8003284 <DEX>
 8003e0a:	484e      	ldr	r0, [pc, #312]	; (8003f44 <exec_inst+0x818>)
}
 8003e0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xCA: return DEX()        ; case 0xCC: return CPY(absl)    ;
 8003e10:	f7ff b9ae 	b.w	8003170 <CPY>
		case 0xCD: return CMP(absl)    ; case 0xCE: return DEC(absl)    ;
 8003e14:	484b      	ldr	r0, [pc, #300]	; (8003f44 <exec_inst+0x818>)
}
 8003e16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xCD: return CMP(absl)    ; case 0xCE: return DEC(absl)    ;
 8003e1a:	f7ff b965 	b.w	80030e8 <CMP>
 8003e1e:	4849      	ldr	r0, [pc, #292]	; (8003f44 <exec_inst+0x818>)
}
 8003e20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xCD: return CMP(absl)    ; case 0xCE: return DEC(absl)    ;
 8003e24:	f7ff ba10 	b.w	8003248 <DEC>
		case 0xD0: return BNE(rel)     ; case 0xD1: return CMP(indy_rd) ;
 8003e28:	4847      	ldr	r0, [pc, #284]	; (8003f48 <exec_inst+0x81c>)
}
 8003e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xD0: return BNE(rel)     ; case 0xD1: return CMP(indy_rd) ;
 8003e2e:	f7ff bc03 	b.w	8003638 <BNE>
 8003e32:	4846      	ldr	r0, [pc, #280]	; (8003f4c <exec_inst+0x820>)
}
 8003e34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xD0: return BNE(rel)     ; case 0xD1: return CMP(indy_rd) ;
 8003e38:	f7ff b956 	b.w	80030e8 <CMP>
		case 0xD5: return CMP(zpx)     ; case 0xD6: return DEC(zpx)     ;
 8003e3c:	4844      	ldr	r0, [pc, #272]	; (8003f50 <exec_inst+0x824>)
}
 8003e3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xD5: return CMP(zpx)     ; case 0xD6: return DEC(zpx)     ;
 8003e42:	f7ff b951 	b.w	80030e8 <CMP>
 8003e46:	4842      	ldr	r0, [pc, #264]	; (8003f50 <exec_inst+0x824>)
}
 8003e48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xD5: return CMP(zpx)     ; case 0xD6: return DEC(zpx)     ;
 8003e4c:	f7ff b9fc 	b.w	8003248 <DEC>
}
 8003e50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xD8: return CLD()        ; case 0xD9: return CMP(absy_rd) ;
 8003e54:	f7ff bc28 	b.w	80036a8 <CLD>
 8003e58:	483f      	ldr	r0, [pc, #252]	; (8003f58 <exec_inst+0x82c>)
}
 8003e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xD8: return CLD()        ; case 0xD9: return CMP(absy_rd) ;
 8003e5e:	f7ff b943 	b.w	80030e8 <CMP>
		case 0xDD: return CMP(absx_rd) ; case 0xDE: return DEC(absx_wr) ;
 8003e62:	483e      	ldr	r0, [pc, #248]	; (8003f5c <exec_inst+0x830>)
}
 8003e64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xDD: return CMP(absx_rd) ; case 0xDE: return DEC(absx_wr) ;
 8003e68:	f7ff b93e 	b.w	80030e8 <CMP>
 8003e6c:	483d      	ldr	r0, [pc, #244]	; (8003f64 <exec_inst+0x838>)
}
 8003e6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xDD: return CMP(absx_rd) ; case 0xDE: return DEC(absx_wr) ;
 8003e72:	f7ff b9e9 	b.w	8003248 <DEC>
		case 0xE0: return CPX(imm)     ; case 0xE1: return SBC(xind)    ;
 8003e76:	4831      	ldr	r0, [pc, #196]	; (8003f3c <exec_inst+0x810>)
}
 8003e78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xE0: return CPX(imm)     ; case 0xE1: return SBC(xind)    ;
 8003e7c:	f7ff b956 	b.w	800312c <CPX>
 8003e80:	4837      	ldr	r0, [pc, #220]	; (8003f60 <exec_inst+0x834>)
}
 8003e82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xE0: return CPX(imm)     ; case 0xE1: return SBC(xind)    ;
 8003e86:	f7ff b8a5 	b.w	8002fd4 <SBC>
		case 0xE4: return CPX(zp)      ; case 0xE5: return SBC(zp)      ;
 8003e8a:	482d      	ldr	r0, [pc, #180]	; (8003f40 <exec_inst+0x814>)
}
 8003e8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xE4: return CPX(zp)      ; case 0xE5: return SBC(zp)      ;
 8003e90:	f7ff b94c 	b.w	800312c <CPX>
 8003e94:	482a      	ldr	r0, [pc, #168]	; (8003f40 <exec_inst+0x814>)
}
 8003e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xE4: return CPX(zp)      ; case 0xE5: return SBC(zp)      ;
 8003e9a:	f7ff b89b 	b.w	8002fd4 <SBC>
		case 0xE6: return INC(zp)      ; case 0xE8: return INX()        ;
 8003e9e:	4828      	ldr	r0, [pc, #160]	; (8003f40 <exec_inst+0x814>)
}
 8003ea0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xE6: return INC(zp)      ; case 0xE8: return INX()        ;
 8003ea4:	f7ff b986 	b.w	80031b4 <INC>
}
 8003ea8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xE6: return INC(zp)      ; case 0xE8: return INX()        ;
 8003eac:	f7ff b9a0 	b.w	80031f0 <INX>
		case 0xE9: return SBC(imm)     ; case 0xEA: return NOP()        ;
 8003eb0:	4822      	ldr	r0, [pc, #136]	; (8003f3c <exec_inst+0x810>)
}
 8003eb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xE9: return SBC(imm)     ; case 0xEA: return NOP()        ;
 8003eb6:	f7ff b88d 	b.w	8002fd4 <SBC>
}
 8003eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8003ebe:	f7fe bcbd 	b.w	800283c <tick>
		case 0xEC: return CPX(absl)    ; case 0xED: return SBC(absl)    ;
 8003ec2:	4820      	ldr	r0, [pc, #128]	; (8003f44 <exec_inst+0x818>)
}
 8003ec4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xEC: return CPX(absl)    ; case 0xED: return SBC(absl)    ;
 8003ec8:	f7ff b930 	b.w	800312c <CPX>
 8003ecc:	481d      	ldr	r0, [pc, #116]	; (8003f44 <exec_inst+0x818>)
}
 8003ece:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xEC: return CPX(absl)    ; case 0xED: return SBC(absl)    ;
 8003ed2:	f7ff b87f 	b.w	8002fd4 <SBC>
		case 0xEE: return INC(absl)    ; case 0xF0: return BEQ(rel)     ;
 8003ed6:	481b      	ldr	r0, [pc, #108]	; (8003f44 <exec_inst+0x818>)
}
 8003ed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xEE: return INC(absl)    ; case 0xF0: return BEQ(rel)     ;
 8003edc:	f7ff b96a 	b.w	80031b4 <INC>
 8003ee0:	4819      	ldr	r0, [pc, #100]	; (8003f48 <exec_inst+0x81c>)
}
 8003ee2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xEE: return INC(absl)    ; case 0xF0: return BEQ(rel)     ;
 8003ee6:	f7ff bbb7 	b.w	8003658 <BEQ>
		case 0xF1: return SBC(indy_rd) ; case 0xF5: return SBC(zpx)     ;
 8003eea:	4818      	ldr	r0, [pc, #96]	; (8003f4c <exec_inst+0x820>)
}
 8003eec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xF1: return SBC(indy_rd) ; case 0xF5: return SBC(zpx)     ;
 8003ef0:	f7ff b870 	b.w	8002fd4 <SBC>
 8003ef4:	4816      	ldr	r0, [pc, #88]	; (8003f50 <exec_inst+0x824>)
}
 8003ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xF1: return SBC(indy_rd) ; case 0xF5: return SBC(zpx)     ;
 8003efa:	f7ff b86b 	b.w	8002fd4 <SBC>
		case 0xF6: return INC(zpx)     ; case 0xF8: return SED()        ;
 8003efe:	4814      	ldr	r0, [pc, #80]	; (8003f50 <exec_inst+0x824>)
}
 8003f00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xF6: return INC(zpx)     ; case 0xF8: return SED()        ;
 8003f04:	f7ff b956 	b.w	80031b4 <INC>
}
 8003f08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xF6: return INC(zpx)     ; case 0xF8: return SED()        ;
 8003f0c:	f7ff bbe4 	b.w	80036d8 <SED>
		case 0xF9: return SBC(absy_rd) ; case 0xFD: return SBC(absx_rd) ;
 8003f10:	4811      	ldr	r0, [pc, #68]	; (8003f58 <exec_inst+0x82c>)
}
 8003f12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xF9: return SBC(absy_rd) ; case 0xFD: return SBC(absx_rd) ;
 8003f16:	f7ff b85d 	b.w	8002fd4 <SBC>
 8003f1a:	4810      	ldr	r0, [pc, #64]	; (8003f5c <exec_inst+0x830>)
}
 8003f1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xF9: return SBC(absy_rd) ; case 0xFD: return SBC(absx_rd) ;
 8003f20:	f7ff b858 	b.w	8002fd4 <SBC>
		case 0xFE: return INC(absx_wr) ;
 8003f24:	480f      	ldr	r0, [pc, #60]	; (8003f64 <exec_inst+0x838>)
}
 8003f26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case 0xFE: return INC(absx_wr) ;
 8003f2a:	f7ff b943 	b.w	80031b4 <INC>
			printf("Invalid instruction!\n");
 8003f2e:	480e      	ldr	r0, [pc, #56]	; (8003f68 <exec_inst+0x83c>)
 8003f30:	f000 fb08 	bl	8004544 <puts>
}
 8003f34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tick();
 8003f38:	f7fe bc80 	b.w	800283c <tick>
 8003f3c:	0800281d 	.word	0x0800281d
 8003f40:	08002871 	.word	0x08002871
 8003f44:	080028b1 	.word	0x080028b1
 8003f48:	080028c9 	.word	0x080028c9
 8003f4c:	08002a35 	.word	0x08002a35
 8003f50:	08002881 	.word	0x08002881
 8003f54:	08002899 	.word	0x08002899
 8003f58:	0800295d 	.word	0x0800295d
 8003f5c:	080028ed 	.word	0x080028ed
 8003f60:	08002a0b 	.word	0x08002a0b
 8003f64:	08002925 	.word	0x08002925
 8003f68:	080051c0 	.word	0x080051c0

08003f6c <cpu_run>:

void cpu_run() {
 8003f6c:	b508      	push	{r3, lr}
	if (nmi) {
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <cpu_run+0x2c>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	b12b      	cbz	r3, 8003f80 <cpu_run+0x14>
		INT_NMI();
 8003f74:	f7fe fe10 	bl	8002b98 <INT_NMI>
	}
	else if (irq && !P[2]) {
		INT_IRQ();
	}
	exec_inst();
}
 8003f78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	exec_inst();
 8003f7c:	f7ff bbd6 	b.w	800372c <exec_inst>
	else if (irq && !P[2]) {
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <cpu_run+0x30>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f7      	beq.n	8003f78 <cpu_run+0xc>
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <cpu_run+0x34>)
 8003f8a:	789b      	ldrb	r3, [r3, #2]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f3      	bne.n	8003f78 <cpu_run+0xc>
		INT_IRQ();
 8003f90:	f7fe fe66 	bl	8002c60 <INT_IRQ>
 8003f94:	e7f0      	b.n	8003f78 <cpu_run+0xc>
 8003f96:	bf00      	nop
 8003f98:	200002ed 	.word	0x200002ed
 8003f9c:	200002ec 	.word	0x200002ec
 8003fa0:	200002d9 	.word	0x200002d9

08003fa4 <mapper_rd>:
static int prgSize, chrSize, prgRamSize;
static bool hasChrRam, hasPrgRam, vram = false;
static u8 mapper;

u8 mapper_rd(u16 addr) {
	if (addr >= 0x8000) {
 8003fa4:	0403      	lsls	r3, r0, #16
 8003fa6:	d510      	bpl.n	8003fca <mapper_rd+0x26>
		return *(prg + ((addr - 0x8000 + prgBank * 0x4000) % (prgSize * 0x4000)));
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <mapper_rd+0x40>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8003fb0:	eb00 3083 	add.w	r0, r0, r3, lsl #14
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <mapper_rd+0x44>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	039b      	lsls	r3, r3, #14
 8003fba:	fb90 f2f3 	sdiv	r2, r0, r3
 8003fbe:	fb03 0012 	mls	r0, r3, r2, r0
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <mapper_rd+0x48>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	5c18      	ldrb	r0, [r3, r0]
 8003fc8:	4770      	bx	lr
	}
	else {
		return hasPrgRam ? *(prgRam + addr - 0x6000) : 0;
 8003fca:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <mapper_rd+0x4c>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	b133      	cbz	r3, 8003fde <mapper_rd+0x3a>
 8003fd0:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <mapper_rd+0x50>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4418      	add	r0, r3
 8003fd6:	f5a0 40c0 	sub.w	r0, r0, #24576	; 0x6000
 8003fda:	7800      	ldrb	r0, [r0, #0]
 8003fdc:	4770      	bx	lr
 8003fde:	4618      	mov	r0, r3
	}
}
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	20000b04 	.word	0x20000b04
 8003fe8:	20000b10 	.word	0x20000b10
 8003fec:	20000b00 	.word	0x20000b00
 8003ff0:	20000afd 	.word	0x20000afd
 8003ff4:	20000b08 	.word	0x20000b08

08003ff8 <mapper_wr>:

void mapper_wr(u16 addr, u8 data) {
 8003ff8:	4770      	bx	lr
	...

08003ffc <loadRomFromSD>:

void chr_wr(u16 addr, u8 data) {
	if (hasChrRam) *(chr + addr) = data;
}

int loadRomFromSD(FATFS* fs, char* filename) {
 8003ffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	FIL rom;
	UINT r;
	if (f_mount(fs, "", 0) != FR_OK) return -1;
 8004000:	2200      	movs	r2, #0
int loadRomFromSD(FATFS* fs, char* filename) {
 8004002:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8004006:	460c      	mov	r4, r1
	if (f_mount(fs, "", 0) != FR_OK) return -1;
 8004008:	4981      	ldr	r1, [pc, #516]	; (8004210 <loadRomFromSD+0x214>)
 800400a:	f7fe f911 	bl	8002230 <f_mount>
 800400e:	2800      	cmp	r0, #0
 8004010:	f040 80ec 	bne.w	80041ec <loadRomFromSD+0x1f0>
	if (f_open(&rom, filename, FA_READ) != FR_OK) return -2;
 8004014:	2201      	movs	r2, #1
 8004016:	4621      	mov	r1, r4
 8004018:	a804      	add	r0, sp, #16
 800401a:	f7fe f93d 	bl	8002298 <f_open>
 800401e:	2800      	cmp	r0, #0
 8004020:	f040 80e7 	bne.w	80041f2 <loadRomFromSD+0x1f6>
	/* Header - 16 bytes */
	// 4 byte magic number
	char magicNumber[5];
	f_gets(magicNumber, 5, &rom);
 8004024:	aa04      	add	r2, sp, #16
 8004026:	2105      	movs	r1, #5
 8004028:	a802      	add	r0, sp, #8
 800402a:	f7fe fb4d 	bl	80026c8 <f_gets>
	if (strcmp(magicNumber, "NES\x1a")) return -3;
 800402e:	4979      	ldr	r1, [pc, #484]	; (8004214 <loadRomFromSD+0x218>)
 8004030:	a802      	add	r0, sp, #8
 8004032:	f7fc f8db 	bl	80001ec <strcmp>
 8004036:	4604      	mov	r4, r0
 8004038:	2800      	cmp	r0, #0
 800403a:	f040 80dd 	bne.w	80041f8 <loadRomFromSD+0x1fc>
	// PRG-ROM size in 16 kb blocks
	u8 byte;
	f_read(&rom, &byte, 1, &r);
 800403e:	ab01      	add	r3, sp, #4
 8004040:	2201      	movs	r2, #1
 8004042:	f10d 0103 	add.w	r1, sp, #3
 8004046:	a804      	add	r0, sp, #16
 8004048:	f7fe fa38 	bl	80024bc <f_read>
	prgSize = byte;
 800404c:	4e72      	ldr	r6, [pc, #456]	; (8004218 <loadRomFromSD+0x21c>)
 800404e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004052:	6033      	str	r3, [r6, #0]
	if (prgSize <= 0) return -4;
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80d2 	beq.w	80041fe <loadRomFromSD+0x202>
	// CHR-ROM in 8 kb blocks
	f_read(&rom, &byte, 1, &r);
 800405a:	ab01      	add	r3, sp, #4
 800405c:	2201      	movs	r2, #1
 800405e:	f10d 0103 	add.w	r1, sp, #3
 8004062:	a804      	add	r0, sp, #16
 8004064:	f7fe fa2a 	bl	80024bc <f_read>
	if (byte != 0) {
 8004068:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800406c:	4f6b      	ldr	r7, [pc, #428]	; (800421c <loadRomFromSD+0x220>)
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 8096 	beq.w	80041a0 <loadRomFromSD+0x1a4>
		chrSize = byte;
 8004074:	603b      	str	r3, [r7, #0]
	else {
		chrSize = 1;
		hasChrRam = true;
	}
	// Flags 6
	f_read(&rom, &byte, 1, &r);
 8004076:	ab01      	add	r3, sp, #4
 8004078:	2201      	movs	r2, #1
 800407a:	f10d 0103 	add.w	r1, sp, #3
 800407e:	a804      	add	r0, sp, #16
 8004080:	f7fe fa1c 	bl	80024bc <f_read>
	// PPU nametable mirroring style
	/*** Set PPU mirroring here, (byte & 0x01) ? vertical : horizontal ***/
	// Presence of PRG RAM
	hasPrgRam = ((byte & 0x02) >> 1) ? true : false;
 8004084:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004088:	4a65      	ldr	r2, [pc, #404]	; (8004220 <loadRomFromSD+0x224>)
 800408a:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800408e:	7011      	strb	r1, [r2, #0]
	// 512 byte trainer before PRG data
	if ((byte & 0x04) >> 2) return -5;
 8004090:	075a      	lsls	r2, r3, #29
 8004092:	f100 80b7 	bmi.w	8004204 <loadRomFromSD+0x208>
	// Ignore nametable mirroring, provide 4-screen VRAM
	vram = ((byte & 0x08) >> 3) ? true : false;
	// Mapper lower nybble
	mapper = byte >> 4;
 8004096:	4d63      	ldr	r5, [pc, #396]	; (8004224 <loadRomFromSD+0x228>)
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	702b      	strb	r3, [r5, #0]
	// Flags 7
	f_read(&rom, &byte, 1, &r);
 800409c:	2201      	movs	r2, #1
 800409e:	ab01      	add	r3, sp, #4
 80040a0:	f10d 0103 	add.w	r1, sp, #3
 80040a4:	a804      	add	r0, sp, #16
 80040a6:	f7fe fa09 	bl	80024bc <f_read>
	// Mapper upper nybble
	mapper |= (byte & 0xF0);
 80040aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80040ae:	782a      	ldrb	r2, [r5, #0]
 80040b0:	f023 030f 	bic.w	r3, r3, #15
 80040b4:	4313      	orrs	r3, r2
 80040b6:	702b      	strb	r3, [r5, #0]
	// Flags 8
	f_read(&rom, &byte, 1, &r);
 80040b8:	2201      	movs	r2, #1
 80040ba:	ab01      	add	r3, sp, #4
 80040bc:	f10d 0103 	add.w	r1, sp, #3
 80040c0:	a804      	add	r0, sp, #16
 80040c2:	f7fe f9fb 	bl	80024bc <f_read>
	// PRG RAM size
	prgRamSize = (byte != 0) ? byte : 1;
 80040c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80040ca:	4a57      	ldr	r2, [pc, #348]	; (8004228 <loadRomFromSD+0x22c>)
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	bf08      	it	eq
 80040d0:	2301      	moveq	r3, #1
 80040d2:	6013      	str	r3, [r2, #0]
	// Flags 9
	f_read(&rom, &byte, 1, &r);
 80040d4:	f10d 0103 	add.w	r1, sp, #3
 80040d8:	ab01      	add	r3, sp, #4
 80040da:	2201      	movs	r2, #1
 80040dc:	a804      	add	r0, sp, #16
 80040de:	46a8      	mov	r8, r5
 80040e0:	f7fe f9ec 	bl	80024bc <f_read>
	// NTSC or PAL
	if (byte != 0) return -6;
 80040e4:	f89d 5003 	ldrb.w	r5, [sp, #3]
 80040e8:	2d00      	cmp	r5, #0
 80040ea:	f040 808e 	bne.w	800420a <loadRomFromSD+0x20e>
	// Flags 10
	f_read(&rom, &byte, 1, &r);
 80040ee:	ab01      	add	r3, sp, #4
 80040f0:	2201      	movs	r2, #1
 80040f2:	f10d 0103 	add.w	r1, sp, #3
 80040f6:	a804      	add	r0, sp, #16
 80040f8:	f7fe f9e0 	bl	80024bc <f_read>
	// Flags 11-15
	f_read(&rom, &byte, 1, &r);
 80040fc:	ab01      	add	r3, sp, #4
 80040fe:	2201      	movs	r2, #1
 8004100:	f10d 0103 	add.w	r1, sp, #3
 8004104:	a804      	add	r0, sp, #16
 8004106:	f7fe f9d9 	bl	80024bc <f_read>
	f_read(&rom, &byte, 1, &r);
 800410a:	ab01      	add	r3, sp, #4
 800410c:	2201      	movs	r2, #1
 800410e:	f10d 0103 	add.w	r1, sp, #3
 8004112:	a804      	add	r0, sp, #16
 8004114:	f7fe f9d2 	bl	80024bc <f_read>
	f_read(&rom, &byte, 1, &r);
 8004118:	ab01      	add	r3, sp, #4
 800411a:	2201      	movs	r2, #1
 800411c:	f10d 0103 	add.w	r1, sp, #3
 8004120:	a804      	add	r0, sp, #16
 8004122:	f7fe f9cb 	bl	80024bc <f_read>
	f_read(&rom, &byte, 1, &r);
 8004126:	ab01      	add	r3, sp, #4
 8004128:	2201      	movs	r2, #1
 800412a:	f10d 0103 	add.w	r1, sp, #3
 800412e:	a804      	add	r0, sp, #16
 8004130:	f7fe f9c4 	bl	80024bc <f_read>
	f_read(&rom, &byte, 1, &r);
 8004134:	ab01      	add	r3, sp, #4
 8004136:	2201      	movs	r2, #1
 8004138:	f10d 0103 	add.w	r1, sp, #3
 800413c:	a804      	add	r0, sp, #16
 800413e:	f7fe f9bd 	bl	80024bc <f_read>

	// Load PRG data
	prg = malloc(prgSize * 0x4000 * sizeof(u8));
 8004142:	6830      	ldr	r0, [r6, #0]
 8004144:	0380      	lsls	r0, r0, #14
 8004146:	f000 fd89 	bl	8004c5c <malloc>
 800414a:	4b38      	ldr	r3, [pc, #224]	; (800422c <loadRomFromSD+0x230>)
 800414c:	6018      	str	r0, [r3, #0]
 800414e:	4699      	mov	r9, r3
	for (int i = 0; i < prgSize * 0x4000; i++) {
 8004150:	6833      	ldr	r3, [r6, #0]
 8004152:	ebb5 3f83 	cmp.w	r5, r3, lsl #14
 8004156:	db28      	blt.n	80041aa <loadRomFromSD+0x1ae>
		f_read(&rom, &byte, 1, &r);
		*(prg + i) = byte;
	}
	// Load CHR data
	chr = malloc(chrSize * 0x2000 * sizeof(u8));
 8004158:	6838      	ldr	r0, [r7, #0]
 800415a:	4e35      	ldr	r6, [pc, #212]	; (8004230 <loadRomFromSD+0x234>)
 800415c:	0340      	lsls	r0, r0, #13
 800415e:	f000 fd7d 	bl	8004c5c <malloc>
	for (int i = 0; i < chrSize * 0x2000; i++) {
 8004162:	2500      	movs	r5, #0
	chr = malloc(chrSize * 0x2000 * sizeof(u8));
 8004164:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < chrSize * 0x2000; i++) {
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	ebb5 3f43 	cmp.w	r5, r3, lsl #13
 800416c:	db2b      	blt.n	80041c6 <loadRomFromSD+0x1ca>
		f_read(&rom, &byte, 1, &r);
		*(chr + i) = byte;
	}
	// Allocate PRG RAM
	if (hasPrgRam) prgRam = malloc(prgRamSize * 0x2000 * sizeof(u8));
 800416e:	4b2c      	ldr	r3, [pc, #176]	; (8004220 <loadRomFromSD+0x224>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	b133      	cbz	r3, 8004182 <loadRomFromSD+0x186>
 8004174:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <loadRomFromSD+0x22c>)
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	0340      	lsls	r0, r0, #13
 800417a:	f000 fd6f 	bl	8004c5c <malloc>
 800417e:	4b2d      	ldr	r3, [pc, #180]	; (8004234 <loadRomFromSD+0x238>)
 8004180:	6018      	str	r0, [r3, #0]

	f_close(&rom);
 8004182:	a804      	add	r0, sp, #16
 8004184:	f7fe fa8f 	bl	80026a6 <f_close>

	switch (mapper) {
 8004188:	f898 3000 	ldrb.w	r3, [r8]
 800418c:	bb43      	cbnz	r3, 80041e0 <loadRomFromSD+0x1e4>
		case 0:
			mapper0_init(&prgBank, &chrBank);
 800418e:	492a      	ldr	r1, [pc, #168]	; (8004238 <loadRomFromSD+0x23c>)
 8004190:	482a      	ldr	r0, [pc, #168]	; (800423c <loadRomFromSD+0x240>)
 8004192:	f000 f859 	bl	8004248 <mapper0_init>
		default:
			printf("Mapper not supported!\n");
			return -7;
	}
	return 0;
}
 8004196:	4620      	mov	r0, r4
 8004198:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800419c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		hasChrRam = true;
 80041a0:	4a27      	ldr	r2, [pc, #156]	; (8004240 <loadRomFromSD+0x244>)
		chrSize = 1;
 80041a2:	2301      	movs	r3, #1
 80041a4:	603b      	str	r3, [r7, #0]
		hasChrRam = true;
 80041a6:	7013      	strb	r3, [r2, #0]
 80041a8:	e765      	b.n	8004076 <loadRomFromSD+0x7a>
		f_read(&rom, &byte, 1, &r);
 80041aa:	ab01      	add	r3, sp, #4
 80041ac:	2201      	movs	r2, #1
 80041ae:	f10d 0103 	add.w	r1, sp, #3
 80041b2:	a804      	add	r0, sp, #16
 80041b4:	f7fe f982 	bl	80024bc <f_read>
		*(prg + i) = byte;
 80041b8:	f8d9 3000 	ldr.w	r3, [r9]
 80041bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80041c0:	555a      	strb	r2, [r3, r5]
	for (int i = 0; i < prgSize * 0x4000; i++) {
 80041c2:	3501      	adds	r5, #1
 80041c4:	e7c4      	b.n	8004150 <loadRomFromSD+0x154>
		f_read(&rom, &byte, 1, &r);
 80041c6:	ab01      	add	r3, sp, #4
 80041c8:	2201      	movs	r2, #1
 80041ca:	f10d 0103 	add.w	r1, sp, #3
 80041ce:	a804      	add	r0, sp, #16
 80041d0:	f7fe f974 	bl	80024bc <f_read>
		*(chr + i) = byte;
 80041d4:	6833      	ldr	r3, [r6, #0]
 80041d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80041da:	555a      	strb	r2, [r3, r5]
	for (int i = 0; i < chrSize * 0x2000; i++) {
 80041dc:	3501      	adds	r5, #1
 80041de:	e7c2      	b.n	8004166 <loadRomFromSD+0x16a>
			printf("Mapper not supported!\n");
 80041e0:	4818      	ldr	r0, [pc, #96]	; (8004244 <loadRomFromSD+0x248>)
 80041e2:	f000 f9af 	bl	8004544 <puts>
			return -7;
 80041e6:	f06f 0406 	mvn.w	r4, #6
 80041ea:	e7d4      	b.n	8004196 <loadRomFromSD+0x19a>
	if (f_mount(fs, "", 0) != FR_OK) return -1;
 80041ec:	f04f 34ff 	mov.w	r4, #4294967295
 80041f0:	e7d1      	b.n	8004196 <loadRomFromSD+0x19a>
	if (f_open(&rom, filename, FA_READ) != FR_OK) return -2;
 80041f2:	f06f 0401 	mvn.w	r4, #1
 80041f6:	e7ce      	b.n	8004196 <loadRomFromSD+0x19a>
	if (strcmp(magicNumber, "NES\x1a")) return -3;
 80041f8:	f06f 0402 	mvn.w	r4, #2
 80041fc:	e7cb      	b.n	8004196 <loadRomFromSD+0x19a>
	if (prgSize <= 0) return -4;
 80041fe:	f06f 0403 	mvn.w	r4, #3
 8004202:	e7c8      	b.n	8004196 <loadRomFromSD+0x19a>
	if ((byte & 0x04) >> 2) return -5;
 8004204:	f06f 0404 	mvn.w	r4, #4
 8004208:	e7c5      	b.n	8004196 <loadRomFromSD+0x19a>
	if (byte != 0) return -6;
 800420a:	f06f 0405 	mvn.w	r4, #5
 800420e:	e7c2      	b.n	8004196 <loadRomFromSD+0x19a>
 8004210:	08005209 	.word	0x08005209
 8004214:	080051d5 	.word	0x080051d5
 8004218:	20000b10 	.word	0x20000b10
 800421c:	20000af8 	.word	0x20000af8
 8004220:	20000afd 	.word	0x20000afd
 8004224:	20000afe 	.word	0x20000afe
 8004228:	20000b0c 	.word	0x20000b0c
 800422c:	20000b00 	.word	0x20000b00
 8004230:	20000af0 	.word	0x20000af0
 8004234:	20000b08 	.word	0x20000b08
 8004238:	20000af4 	.word	0x20000af4
 800423c:	20000b04 	.word	0x20000b04
 8004240:	20000afc 	.word	0x20000afc
 8004244:	080051da 	.word	0x080051da

08004248 <mapper0_init>:

void mapper0_init(u8* pBank, u8* cBank) {
	prgBank = pBank;
	chrBank = cBank;

	*prgBank = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	7003      	strb	r3, [r0, #0]
	*chrBank = 0;
 800424c:	700b      	strb	r3, [r1, #0]
 800424e:	4770      	bx	lr

08004250 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8004250:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004252:	4903      	ldr	r1, [pc, #12]	; (8004260 <MX_FATFS_Init+0x10>)
 8004254:	4803      	ldr	r0, [pc, #12]	; (8004264 <MX_FATFS_Init+0x14>)
 8004256:	f7fe fa7d 	bl	8002754 <FATFS_LinkDriver>
 800425a:	4b03      	ldr	r3, [pc, #12]	; (8004268 <MX_FATFS_Init+0x18>)
 800425c:	7018      	strb	r0, [r3, #0]
 800425e:	bd08      	pop	{r3, pc}
 8004260:	20000b28 	.word	0x20000b28
 8004264:	2000000c 	.word	0x2000000c
 8004268:	20000b2c 	.word	0x20000b2c

0800426c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 800426c:	2000      	movs	r0, #0
 800426e:	4770      	bx	lr

08004270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004270:	b530      	push	{r4, r5, lr}
 8004272:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004274:	2230      	movs	r2, #48	; 0x30
 8004276:	2100      	movs	r1, #0
 8004278:	a808      	add	r0, sp, #32
 800427a:	f000 fcf7 	bl	8004c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800427e:	2100      	movs	r1, #0
 8004280:	2214      	movs	r2, #20
 8004282:	a803      	add	r0, sp, #12
 8004284:	f000 fcf2 	bl	8004c6c <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004288:	2400      	movs	r4, #0
 800428a:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <SystemClock_Config+0x90>)
 800428c:	9401      	str	r4, [sp, #4]
 800428e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004290:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004294:	641a      	str	r2, [r3, #64]	; 0x40
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80042a0:	4b18      	ldr	r3, [pc, #96]	; (8004304 <SystemClock_Config+0x94>)
 80042a2:	9402      	str	r4, [sp, #8]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80042ae:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80042b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042b4:	9302      	str	r3, [sp, #8]
 80042b6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042b8:	2301      	movs	r3, #1
 80042ba:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80042bc:	2310      	movs	r3, #16
 80042be:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 80042c0:	2308      	movs	r3, #8
 80042c2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80042c4:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80042c6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 180;
 80042c8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042ca:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80042cc:	2304      	movs	r3, #4
 80042ce:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80042d0:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042d2:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042d4:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042d6:	f7fc fafd 	bl	80008d4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80042da:	f7fc fabf 	bl	800085c <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042de:	230f      	movs	r3, #15
 80042e0:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80042e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80042e6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80042e8:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80042ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80042ee:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042f0:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042f2:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80042f4:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80042f6:	f7fc fc9d 	bl	8000c34 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80042fa:	b015      	add	sp, #84	; 0x54
 80042fc:	bd30      	pop	{r4, r5, pc}
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800
 8004304:	40007000 	.word	0x40007000

08004308 <main>:
{
 8004308:	b530      	push	{r4, r5, lr}
 800430a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800430c:	f7fc f92c 	bl	8000568 <HAL_Init>
  SystemClock_Config();
 8004310:	f7ff ffae 	bl	8004270 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004314:	2214      	movs	r2, #20
 8004316:	2100      	movs	r1, #0
 8004318:	a803      	add	r0, sp, #12
 800431a:	f000 fca7 	bl	8004c6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800431e:	2400      	movs	r4, #0
 8004320:	4b2c      	ldr	r3, [pc, #176]	; (80043d4 <main+0xcc>)
 8004322:	9401      	str	r4, [sp, #4]
 8004324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHRG_LED_GPIO_Port, CHRG_LED_Pin, GPIO_PIN_SET);
 8004326:	482c      	ldr	r0, [pc, #176]	; (80043d8 <main+0xd0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
 800432e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004330:	f002 0201 	and.w	r2, r2, #1
 8004334:	9201      	str	r2, [sp, #4]
 8004336:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004338:	9402      	str	r4, [sp, #8]
 800433a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800433c:	f042 0202 	orr.w	r2, r2, #2
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(CHRG_LED_GPIO_Port, CHRG_LED_Pin, GPIO_PIN_SET);
 800434a:	2201      	movs	r2, #1
 800434c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800434e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(CHRG_LED_GPIO_Port, CHRG_LED_Pin, GPIO_PIN_SET);
 8004350:	f7fc fa7e 	bl	8000850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SPI_SS_GPIO_Port, SD_SPI_SS_Pin, GPIO_PIN_SET);
 8004354:	2201      	movs	r2, #1
 8004356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800435a:	4820      	ldr	r0, [pc, #128]	; (80043dc <main+0xd4>)
 800435c:	f7fc fa78 	bl	8000850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CHRG_LED_Pin */
  GPIO_InitStruct.Pin = CHRG_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004360:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CHRG_LED_Pin;
 8004362:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CHRG_LED_GPIO_Port, &GPIO_InitStruct);
 8004364:	a903      	add	r1, sp, #12
 8004366:	481c      	ldr	r0, [pc, #112]	; (80043d8 <main+0xd0>)
  GPIO_InitStruct.Pin = CHRG_LED_Pin;
 8004368:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800436a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800436e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(CHRG_LED_GPIO_Port, &GPIO_InitStruct);
 8004370:	f7fc f982 	bl	8000678 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SPI_SS_Pin */
  GPIO_InitStruct.Pin = SD_SPI_SS_Pin;
 8004374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SD_SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8004378:	a903      	add	r1, sp, #12
 800437a:	4818      	ldr	r0, [pc, #96]	; (80043dc <main+0xd4>)
  GPIO_InitStruct.Pin = SD_SPI_SS_Pin;
 800437c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800437e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004380:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004382:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(SD_SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8004384:	f7fc f978 	bl	8000678 <HAL_GPIO_Init>
  MX_FATFS_Init();
 8004388:	f7ff ff62 	bl	8004250 <MX_FATFS_Init>
  hspi2.Instance = SPI2;
 800438c:	4814      	ldr	r0, [pc, #80]	; (80043e0 <main+0xd8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800438e:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <main+0xdc>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004390:	6084      	str	r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004392:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004396:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800439a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800439e:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80043a0:	2308      	movs	r3, #8
 80043a2:	61c3      	str	r3, [r0, #28]
  hspi2.Init.CRCPolynomial = 10;
 80043a4:	230a      	movs	r3, #10
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80043a6:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043a8:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043aa:	6144      	str	r4, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043ac:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80043ae:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043b0:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80043b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80043b4:	f7fc fd2f 	bl	8000e16 <HAL_SPI_Init>
  if (loadRomFromSD(&fs, "smb.nes") != 0) return -1;
 80043b8:	490b      	ldr	r1, [pc, #44]	; (80043e8 <main+0xe0>)
 80043ba:	480c      	ldr	r0, [pc, #48]	; (80043ec <main+0xe4>)
 80043bc:	f7ff fe1e 	bl	8003ffc <loadRomFromSD>
 80043c0:	b920      	cbnz	r0, 80043cc <main+0xc4>
  cpu_init();
 80043c2:	f7ff f991 	bl	80036e8 <cpu_init>
	  cpu_run();
 80043c6:	f7ff fdd1 	bl	8003f6c <cpu_run>
 80043ca:	e7fc      	b.n	80043c6 <main+0xbe>
}
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295
 80043d0:	b009      	add	sp, #36	; 0x24
 80043d2:	bd30      	pop	{r4, r5, pc}
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40020000 	.word	0x40020000
 80043dc:	40020400 	.word	0x40020400
 80043e0:	20000f94 	.word	0x20000f94
 80043e4:	40003800 	.word	0x40003800
 80043e8:	080051f0 	.word	0x080051f0
 80043ec:	20000fec 	.word	0x20000fec

080043f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043f0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f2:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <HAL_MspInit+0x34>)
 80043f4:	2100      	movs	r1, #0
 80043f6:	9100      	str	r1, [sp, #0]
 80043f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043fe:	645a      	str	r2, [r3, #68]	; 0x44
 8004400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004402:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004406:	9200      	str	r2, [sp, #0]
 8004408:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800440a:	9101      	str	r1, [sp, #4]
 800440c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800440e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004412:	641a      	str	r2, [r3, #64]	; 0x40
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800441e:	b002      	add	sp, #8
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40023800 	.word	0x40023800

08004428 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004428:	b510      	push	{r4, lr}
 800442a:	4604      	mov	r4, r0
 800442c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800442e:	2214      	movs	r2, #20
 8004430:	2100      	movs	r1, #0
 8004432:	a803      	add	r0, sp, #12
 8004434:	f000 fc1a 	bl	8004c6c <memset>
  if(hspi->Instance==SPI2)
 8004438:	6822      	ldr	r2, [r4, #0]
 800443a:	4b14      	ldr	r3, [pc, #80]	; (800448c <HAL_SPI_MspInit+0x64>)
 800443c:	429a      	cmp	r2, r3
 800443e:	d123      	bne.n	8004488 <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004440:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004444:	2100      	movs	r1, #0
 8004446:	9101      	str	r1, [sp, #4]
 8004448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800444a:	4811      	ldr	r0, [pc, #68]	; (8004490 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800444c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004450:	641a      	str	r2, [r3, #64]	; 0x40
 8004452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004454:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004458:	9201      	str	r2, [sp, #4]
 800445a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800445c:	9102      	str	r1, [sp, #8]
 800445e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004460:	f042 0202 	orr.w	r2, r2, #2
 8004464:	631a      	str	r2, [r3, #48]	; 0x30
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	9302      	str	r3, [sp, #8]
 800446e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004470:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004474:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004476:	2302      	movs	r3, #2
 8004478:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800447a:	2303      	movs	r3, #3
 800447c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800447e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004480:	2305      	movs	r3, #5
 8004482:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004484:	f7fc f8f8 	bl	8000678 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004488:	b008      	add	sp, #32
 800448a:	bd10      	pop	{r4, pc}
 800448c:	40003800 	.word	0x40003800
 8004490:	40020400 	.word	0x40020400

08004494 <NMI_Handler>:
 8004494:	4770      	bx	lr

08004496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004496:	e7fe      	b.n	8004496 <HardFault_Handler>

08004498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004498:	e7fe      	b.n	8004498 <MemManage_Handler>

0800449a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800449a:	e7fe      	b.n	800449a <BusFault_Handler>

0800449c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800449c:	e7fe      	b.n	800449c <UsageFault_Handler>

0800449e <SVC_Handler>:
 800449e:	4770      	bx	lr

080044a0 <DebugMon_Handler>:
 80044a0:	4770      	bx	lr

080044a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044a2:	4770      	bx	lr

080044a4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044a4:	f7fc b87a 	b.w	800059c <HAL_IncTick>

080044a8 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80044a8:	b510      	push	{r4, lr}
	/* Implement your write code here, this is used by puts and printf for example */
	int i=0;
	for(i=0 ; i<len ; i++)
 80044aa:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80044ac:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 80044b0:	4293      	cmp	r3, r2
 80044b2:	db01      	blt.n	80044b8 <_write+0x10>
		ITM_SendChar((*ptr++));
	return len;
}
 80044b4:	4610      	mov	r0, r2
 80044b6:	bd10      	pop	{r4, pc}
 80044b8:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 80044bc:	07c0      	lsls	r0, r0, #31
 80044be:	d503      	bpl.n	80044c8 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80044c0:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80044c4:	07c0      	lsls	r0, r0, #31
 80044c6:	d402      	bmi.n	80044ce <_write+0x26>
	for(i=0 ; i<len ; i++)
 80044c8:	3301      	adds	r3, #1
 80044ca:	e7f1      	b.n	80044b0 <_write+0x8>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80044cc:	bf00      	nop
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80044ce:	6820      	ldr	r0, [r4, #0]
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d0fb      	beq.n	80044cc <_write+0x24>
		ITM_SendChar((*ptr++));
 80044d4:	5cc8      	ldrb	r0, [r1, r3]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80044d6:	7020      	strb	r0, [r4, #0]
 80044d8:	e7f6      	b.n	80044c8 <_write+0x20>
	...

080044dc <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <_sbrk+0x14>)
 80044de:	6819      	ldr	r1, [r3, #0]
{
 80044e0:	4602      	mov	r2, r0
	if (heap_end == 0) {
 80044e2:	b909      	cbnz	r1, 80044e8 <_sbrk+0xc>
		heap_end = & end;
 80044e4:	4903      	ldr	r1, [pc, #12]	; (80044f4 <_sbrk+0x18>)
 80044e6:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 80044e8:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 80044ea:	4402      	add	r2, r0
 80044ec:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 80044ee:	4770      	bx	lr
 80044f0:	20000b14 	.word	0x20000b14
 80044f4:	2000122c 	.word	0x2000122c

080044f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044f8:	490f      	ldr	r1, [pc, #60]	; (8004538 <SystemInit+0x40>)
 80044fa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80044fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004506:	4b0d      	ldr	r3, [pc, #52]	; (800453c <SystemInit+0x44>)
 8004508:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800450a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800450c:	f042 0201 	orr.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004512:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800451a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800451e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004520:	4a07      	ldr	r2, [pc, #28]	; (8004540 <SystemInit+0x48>)
 8004522:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800452a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800452c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800452e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004532:	608b      	str	r3, [r1, #8]
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	e000ed00 	.word	0xe000ed00
 800453c:	40023800 	.word	0x40023800
 8004540:	24003010 	.word	0x24003010

08004544 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8004544:	b538      	push	{r3, r4, r5, lr}
 8004546:	4605      	mov	r5, r0
	int length = strlen(s);
 8004548:	f7fb fe5a 	bl	8000200 <strlen>
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 800454c:	4629      	mov	r1, r5
 800454e:	4602      	mov	r2, r0
	int length = strlen(s);
 8004550:	4604      	mov	r4, r0
	numbytes = _write(1, (char*)s, length);
 8004552:	2001      	movs	r0, #1
 8004554:	f7ff ffa8 	bl	80044a8 <_write>
	numbytes += _write(1, "\n", 1);
 8004558:	2201      	movs	r2, #1
	numbytes = _write(1, (char*)s, length);
 800455a:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 800455c:	4905      	ldr	r1, [pc, #20]	; (8004574 <puts+0x30>)
 800455e:	4610      	mov	r0, r2
 8004560:	f7ff ffa2 	bl	80044a8 <_write>

	if (numbytes == (length+1))
 8004564:	3401      	adds	r4, #1
	numbytes += _write(1, "\n", 1);
 8004566:	4428      	add	r0, r5
	{
		res = EOF;
	}

	return res;
}
 8004568:	1b00      	subs	r0, r0, r4
 800456a:	bf18      	it	ne
 800456c:	f04f 30ff 	movne.w	r0, #4294967295
 8004570:	bd38      	pop	{r3, r4, r5, pc}
 8004572:	bf00      	nop
 8004574:	08005208 	.word	0x08005208

08004578 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8004578:	f000 b906 	b.w	8004788 <USER_SPI_initialize>

0800457c <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800457c:	f000 b99c 	b.w	80048b8 <USER_SPI_status>

08004580 <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8004580:	f000 b9a4 	b.w	80048cc <USER_SPI_read>

08004584 <USER_write>:
	UINT count          /* Number of sectors to write */
)
{ 
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8004584:	f000 b9e2 	b.w	800494c <USER_SPI_write>

08004588 <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004588:	f000 ba30 	b.w	80049ec <USER_SPI_ioctl>

0800458c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800458c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi2, &dat, &rxDat, 1, 50);
 800458e:	2332      	movs	r3, #50	; 0x32
{
 8004590:	f88d 000f 	strb.w	r0, [sp, #15]
    HAL_SPI_TransmitReceive(&hspi2, &dat, &rxDat, 1, 50);
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	f10d 0217 	add.w	r2, sp, #23
 800459a:	2301      	movs	r3, #1
 800459c:	f10d 010f 	add.w	r1, sp, #15
 80045a0:	4803      	ldr	r0, [pc, #12]	; (80045b0 <xchg_spi+0x24>)
 80045a2:	f7fc fc75 	bl	8000e90 <HAL_SPI_TransmitReceive>
    return rxDat;
}
 80045a6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80045aa:	b007      	add	sp, #28
 80045ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80045b0:	20000f94 	.word	0x20000f94

080045b4 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	4605      	mov	r5, r0
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80045b8:	f7fb fffc 	bl	80005b4 <HAL_GetTick>
 80045bc:	4606      	mov	r6, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
	do {
		d = xchg_spi(0xFF);
 80045be:	20ff      	movs	r0, #255	; 0xff
 80045c0:	f7ff ffe4 	bl	800458c <xchg_spi>
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80045c4:	28ff      	cmp	r0, #255	; 0xff
		d = xchg_spi(0xFF);
 80045c6:	4604      	mov	r4, r0
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80045c8:	d004      	beq.n	80045d4 <wait_ready+0x20>
 80045ca:	f7fb fff3 	bl	80005b4 <HAL_GetTick>
 80045ce:	1b80      	subs	r0, r0, r6
 80045d0:	4285      	cmp	r5, r0
 80045d2:	d8f4      	bhi.n	80045be <wait_ready+0xa>

	return (d == 0xFF) ? 1 : 0;
}
 80045d4:	f1a4 03ff 	sub.w	r3, r4, #255	; 0xff
 80045d8:	4258      	negs	r0, r3
 80045da:	4158      	adcs	r0, r3
 80045dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080045e0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80045e0:	b508      	push	{r3, lr}
	CS_HIGH();		/* Set CS# high */
 80045e2:	4805      	ldr	r0, [pc, #20]	; (80045f8 <despiselect+0x18>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045ea:	f7fc f931 	bl	8000850 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80045ee:	20ff      	movs	r0, #255	; 0xff

}
 80045f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80045f4:	f7ff bfca 	b.w	800458c <xchg_spi>
 80045f8:	40020400 	.word	0x40020400

080045fc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80045fc:	b510      	push	{r4, lr}
	CS_LOW();		/* Set CS# low */
 80045fe:	2200      	movs	r2, #0
 8004600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004604:	4808      	ldr	r0, [pc, #32]	; (8004628 <spiselect+0x2c>)
 8004606:	f7fc f923 	bl	8000850 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800460a:	20ff      	movs	r0, #255	; 0xff
 800460c:	f7ff ffbe 	bl	800458c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004610:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004614:	f7ff ffce 	bl	80045b4 <wait_ready>
 8004618:	4604      	mov	r4, r0
 800461a:	b918      	cbnz	r0, 8004624 <spiselect+0x28>

	despiselect();
 800461c:	f7ff ffe0 	bl	80045e0 <despiselect>
	return 0;	/* Timeout */
}
 8004620:	4620      	mov	r0, r4
 8004622:	bd10      	pop	{r4, pc}
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004624:	2401      	movs	r4, #1
 8004626:	e7fb      	b.n	8004620 <spiselect+0x24>
 8004628:	40020400 	.word	0x40020400

0800462c <send_cmd>:
)
{
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800462c:	0602      	lsls	r2, r0, #24
{
 800462e:	b538      	push	{r3, r4, r5, lr}
 8004630:	4604      	mov	r4, r0
 8004632:	460d      	mov	r5, r1
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004634:	d507      	bpl.n	8004646 <send_cmd+0x1a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
 8004636:	2100      	movs	r1, #0
 8004638:	2037      	movs	r0, #55	; 0x37
 800463a:	f7ff fff7 	bl	800462c <send_cmd>
		if (res > 1) return res;
 800463e:	2801      	cmp	r0, #1
 8004640:	d833      	bhi.n	80046aa <send_cmd+0x7e>
		cmd &= 0x7F;
 8004642:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004646:	2c0c      	cmp	r4, #12
 8004648:	d128      	bne.n	800469c <send_cmd+0x70>
		despiselect();
		if (!spiselect()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800464a:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 800464e:	f7ff ff9d 	bl	800458c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004652:	0e28      	lsrs	r0, r5, #24
 8004654:	f7ff ff9a 	bl	800458c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004658:	f3c5 4007 	ubfx	r0, r5, #16, #8
 800465c:	f7ff ff96 	bl	800458c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004660:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8004664:	f7ff ff92 	bl	800458c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004668:	b2e8      	uxtb	r0, r5
 800466a:	f7ff ff8f 	bl	800458c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800466e:	b1ec      	cbz	r4, 80046ac <send_cmd+0x80>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004670:	2c08      	cmp	r4, #8
 8004672:	bf14      	ite	ne
 8004674:	2001      	movne	r0, #1
 8004676:	2087      	moveq	r0, #135	; 0x87
	xchg_spi(n);
 8004678:	f7ff ff88 	bl	800458c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800467c:	2c0c      	cmp	r4, #12
 800467e:	d102      	bne.n	8004686 <send_cmd+0x5a>
 8004680:	20ff      	movs	r0, #255	; 0xff
 8004682:	f7ff ff83 	bl	800458c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004686:	240a      	movs	r4, #10
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
 8004688:	20ff      	movs	r0, #255	; 0xff
 800468a:	f7ff ff7f 	bl	800458c <xchg_spi>
	} while ((res & 0x80) && --n);
 800468e:	0603      	lsls	r3, r0, #24
 8004690:	d50b      	bpl.n	80046aa <send_cmd+0x7e>
 8004692:	3c01      	subs	r4, #1
 8004694:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004698:	d1f6      	bne.n	8004688 <send_cmd+0x5c>
 800469a:	bd38      	pop	{r3, r4, r5, pc}
		despiselect();
 800469c:	f7ff ffa0 	bl	80045e0 <despiselect>
		if (!spiselect()) return 0xFF;
 80046a0:	f7ff ffac 	bl	80045fc <spiselect>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d1d0      	bne.n	800464a <send_cmd+0x1e>
 80046a8:	20ff      	movs	r0, #255	; 0xff

	return res;							/* Return received response */
}
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80046ac:	2095      	movs	r0, #149	; 0x95
 80046ae:	e7e3      	b.n	8004678 <send_cmd+0x4c>

080046b0 <xmit_datablock>:
{
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4604      	mov	r4, r0
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80046b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
{
 80046b8:	460d      	mov	r5, r1
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80046ba:	f7ff ff7b 	bl	80045b4 <wait_ready>
 80046be:	b1e8      	cbz	r0, 80046fc <xmit_datablock+0x4c>
	xchg_spi(token);					/* Send token */
 80046c0:	4628      	mov	r0, r5
 80046c2:	f7ff ff63 	bl	800458c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80046c6:	2dfd      	cmp	r5, #253	; 0xfd
 80046c8:	d017      	beq.n	80046fa <xmit_datablock+0x4a>
 80046ca:	1e65      	subs	r5, r4, #1
 80046cc:	f204 14ff 	addw	r4, r4, #511	; 0x1ff
		xchg_spi(*(buff+i));
 80046d0:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80046d4:	f7ff ff5a 	bl	800458c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80046d8:	42a5      	cmp	r5, r4
 80046da:	d1f9      	bne.n	80046d0 <xmit_datablock+0x20>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80046dc:	20ff      	movs	r0, #255	; 0xff
 80046de:	f7ff ff55 	bl	800458c <xchg_spi>
 80046e2:	20ff      	movs	r0, #255	; 0xff
 80046e4:	f7ff ff52 	bl	800458c <xchg_spi>
		resp = xchg_spi(0xFF);				/* Receive data resp */
 80046e8:	20ff      	movs	r0, #255	; 0xff
 80046ea:	f7ff ff4f 	bl	800458c <xchg_spi>
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80046ee:	f000 001f 	and.w	r0, r0, #31
 80046f2:	1f43      	subs	r3, r0, #5
 80046f4:	4258      	negs	r0, r3
 80046f6:	4158      	adcs	r0, r3
 80046f8:	bd38      	pop	{r3, r4, r5, pc}
	return 1;
 80046fa:	2001      	movs	r0, #1
}
 80046fc:	bd38      	pop	{r3, r4, r5, pc}
	...

08004700 <SPI_Timer_On>:
void SPI_Timer_On(uint32_t waitTicks) {
 8004700:	b510      	push	{r4, lr}
 8004702:	4604      	mov	r4, r0
    spiTimerTickStart = HAL_GetTick();
 8004704:	f7fb ff56 	bl	80005b4 <HAL_GetTick>
 8004708:	4b02      	ldr	r3, [pc, #8]	; (8004714 <SPI_Timer_On+0x14>)
 800470a:	6018      	str	r0, [r3, #0]
    spiTimerTickDelay = waitTicks;
 800470c:	4b02      	ldr	r3, [pc, #8]	; (8004718 <SPI_Timer_On+0x18>)
 800470e:	601c      	str	r4, [r3, #0]
 8004710:	bd10      	pop	{r4, pc}
 8004712:	bf00      	nop
 8004714:	20001220 	.word	0x20001220
 8004718:	20001224 	.word	0x20001224

0800471c <SPI_Timer_Status>:
uint8_t SPI_Timer_Status() {
 800471c:	b508      	push	{r3, lr}
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800471e:	f7fb ff49 	bl	80005b4 <HAL_GetTick>
 8004722:	4b05      	ldr	r3, [pc, #20]	; (8004738 <SPI_Timer_Status+0x1c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	1ac0      	subs	r0, r0, r3
 8004728:	4b04      	ldr	r3, [pc, #16]	; (800473c <SPI_Timer_Status+0x20>)
 800472a:	681b      	ldr	r3, [r3, #0]
}
 800472c:	4298      	cmp	r0, r3
 800472e:	bf2c      	ite	cs
 8004730:	2000      	movcs	r0, #0
 8004732:	2001      	movcc	r0, #1
 8004734:	bd08      	pop	{r3, pc}
 8004736:	bf00      	nop
 8004738:	20001220 	.word	0x20001220
 800473c:	20001224 	.word	0x20001224

08004740 <rcvr_datablock>:
{
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4604      	mov	r4, r0
	SPI_Timer_On(200);
 8004744:	20c8      	movs	r0, #200	; 0xc8
{
 8004746:	460d      	mov	r5, r1
	SPI_Timer_On(200);
 8004748:	f7ff ffda 	bl	8004700 <SPI_Timer_On>
		token = xchg_spi(0xFF);
 800474c:	20ff      	movs	r0, #255	; 0xff
 800474e:	f7ff ff1d 	bl	800458c <xchg_spi>
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004752:	28ff      	cmp	r0, #255	; 0xff
 8004754:	d105      	bne.n	8004762 <rcvr_datablock+0x22>
 8004756:	f7ff ffe1 	bl	800471c <SPI_Timer_Status>
 800475a:	2800      	cmp	r0, #0
 800475c:	d1f6      	bne.n	800474c <rcvr_datablock+0xc>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800475e:	2000      	movs	r0, #0
 8004760:	bd38      	pop	{r3, r4, r5, pc}
 8004762:	28fe      	cmp	r0, #254	; 0xfe
 8004764:	d1fb      	bne.n	800475e <rcvr_datablock+0x1e>
 8004766:	4425      	add	r5, r4
	for(UINT i=0; i<btr; i++) {
 8004768:	42a5      	cmp	r5, r4
		*(buff+i) = xchg_spi(0xFF);
 800476a:	f04f 00ff 	mov.w	r0, #255	; 0xff
	for(UINT i=0; i<btr; i++) {
 800476e:	d106      	bne.n	800477e <rcvr_datablock+0x3e>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004770:	f7ff ff0c 	bl	800458c <xchg_spi>
 8004774:	20ff      	movs	r0, #255	; 0xff
 8004776:	f7ff ff09 	bl	800458c <xchg_spi>
 800477a:	2001      	movs	r0, #1
}
 800477c:	bd38      	pop	{r3, r4, r5, pc}
		*(buff+i) = xchg_spi(0xFF);
 800477e:	f7ff ff05 	bl	800458c <xchg_spi>
 8004782:	f804 0b01 	strb.w	r0, [r4], #1
 8004786:	e7ef      	b.n	8004768 <rcvr_datablock+0x28>

08004788 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800478a:	2800      	cmp	r0, #0
 800478c:	f040 808c 	bne.w	80048a8 <USER_SPI_initialize+0x120>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004790:	4b46      	ldr	r3, [pc, #280]	; (80048ac <USER_SPI_initialize+0x124>)
 8004792:	781a      	ldrb	r2, [r3, #0]
 8004794:	f012 0f02 	tst.w	r2, #2
 8004798:	461d      	mov	r5, r3
 800479a:	d003      	beq.n	80047a4 <USER_SPI_initialize+0x1c>
 800479c:	7818      	ldrb	r0, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
	} else {			/* Failed */
		Stat = STA_NOINIT;
	}

	return Stat;
 800479e:	b2c0      	uxtb	r0, r0
}
 80047a0:	b003      	add	sp, #12
 80047a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	FCLK_SLOW();
 80047a4:	4e42      	ldr	r6, [pc, #264]	; (80048b0 <USER_SPI_initialize+0x128>)
 80047a6:	6833      	ldr	r3, [r6, #0]
 80047a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ac:	621a      	str	r2, [r3, #32]
 80047ae:	240a      	movs	r4, #10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80047b0:	20ff      	movs	r0, #255	; 0xff
 80047b2:	3c01      	subs	r4, #1
 80047b4:	f7ff feea 	bl	800458c <xchg_spi>
 80047b8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80047bc:	d1f8      	bne.n	80047b0 <USER_SPI_initialize+0x28>
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80047be:	4621      	mov	r1, r4
 80047c0:	4620      	mov	r0, r4
 80047c2:	f7ff ff33 	bl	800462c <send_cmd>
 80047c6:	2801      	cmp	r0, #1
 80047c8:	4607      	mov	r7, r0
 80047ca:	d162      	bne.n	8004892 <USER_SPI_initialize+0x10a>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80047cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047d0:	f7ff ff96 	bl	8004700 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80047d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80047d8:	2008      	movs	r0, #8
 80047da:	f7ff ff27 	bl	800462c <send_cmd>
 80047de:	2801      	cmp	r0, #1
 80047e0:	d141      	bne.n	8004866 <USER_SPI_initialize+0xde>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80047e2:	af01      	add	r7, sp, #4
 80047e4:	20ff      	movs	r0, #255	; 0xff
 80047e6:	f7ff fed1 	bl	800458c <xchg_spi>
 80047ea:	5538      	strb	r0, [r7, r4]
 80047ec:	3401      	adds	r4, #1
 80047ee:	2c04      	cmp	r4, #4
 80047f0:	d1f8      	bne.n	80047e4 <USER_SPI_initialize+0x5c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80047f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d14b      	bne.n	8004892 <USER_SPI_initialize+0x10a>
 80047fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80047fe:	2baa      	cmp	r3, #170	; 0xaa
 8004800:	d147      	bne.n	8004892 <USER_SPI_initialize+0x10a>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004802:	f7ff ff8b 	bl	800471c <SPI_Timer_Status>
 8004806:	bb30      	cbnz	r0, 8004856 <USER_SPI_initialize+0xce>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004808:	f7ff ff88 	bl	800471c <SPI_Timer_Status>
 800480c:	2800      	cmp	r0, #0
 800480e:	d040      	beq.n	8004892 <USER_SPI_initialize+0x10a>
 8004810:	2100      	movs	r1, #0
 8004812:	203a      	movs	r0, #58	; 0x3a
 8004814:	f7ff ff0a 	bl	800462c <send_cmd>
 8004818:	2800      	cmp	r0, #0
 800481a:	d13a      	bne.n	8004892 <USER_SPI_initialize+0x10a>
 800481c:	4604      	mov	r4, r0
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800481e:	20ff      	movs	r0, #255	; 0xff
 8004820:	f7ff feb4 	bl	800458c <xchg_spi>
 8004824:	5538      	strb	r0, [r7, r4]
 8004826:	3401      	adds	r4, #1
 8004828:	2c04      	cmp	r4, #4
 800482a:	d1f8      	bne.n	800481e <USER_SPI_initialize+0x96>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800482c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004830:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004834:	bf14      	ite	ne
 8004836:	240c      	movne	r4, #12
 8004838:	2404      	moveq	r4, #4
	CardType = ty;	/* Card type */
 800483a:	4b1e      	ldr	r3, [pc, #120]	; (80048b4 <USER_SPI_initialize+0x12c>)
 800483c:	701c      	strb	r4, [r3, #0]
	despiselect();
 800483e:	f7ff fecf 	bl	80045e0 <despiselect>
	if (ty) {			/* OK */
 8004842:	b37c      	cbz	r4, 80048a4 <USER_SPI_initialize+0x11c>
		FCLK_FAST();			/* Set fast clock */
 8004844:	6833      	ldr	r3, [r6, #0]
 8004846:	2210      	movs	r2, #16
 8004848:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800484a:	782b      	ldrb	r3, [r5, #0]
 800484c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		Stat = STA_NOINIT;
 8004850:	702b      	strb	r3, [r5, #0]
	return Stat;
 8004852:	7828      	ldrb	r0, [r5, #0]
 8004854:	e7a3      	b.n	800479e <USER_SPI_initialize+0x16>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004856:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800485a:	20a9      	movs	r0, #169	; 0xa9
 800485c:	f7ff fee6 	bl	800462c <send_cmd>
 8004860:	2800      	cmp	r0, #0
 8004862:	d1ce      	bne.n	8004802 <USER_SPI_initialize+0x7a>
 8004864:	e7d0      	b.n	8004808 <USER_SPI_initialize+0x80>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004866:	4621      	mov	r1, r4
 8004868:	20a9      	movs	r0, #169	; 0xa9
 800486a:	f7ff fedf 	bl	800462c <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800486e:	2802      	cmp	r0, #2
 8004870:	bf36      	itet	cc
 8004872:	2402      	movcc	r4, #2
 8004874:	2401      	movcs	r4, #1
 8004876:	27a9      	movcc	r7, #169	; 0xa9
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004878:	f7ff ff50 	bl	800471c <SPI_Timer_Status>
 800487c:	b958      	cbnz	r0, 8004896 <USER_SPI_initialize+0x10e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800487e:	f7ff ff4d 	bl	800471c <SPI_Timer_Status>
 8004882:	b130      	cbz	r0, 8004892 <USER_SPI_initialize+0x10a>
 8004884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004888:	2010      	movs	r0, #16
 800488a:	f7ff fecf 	bl	800462c <send_cmd>
 800488e:	2800      	cmp	r0, #0
 8004890:	d0d3      	beq.n	800483a <USER_SPI_initialize+0xb2>
				ty = 0;
 8004892:	2400      	movs	r4, #0
 8004894:	e7d1      	b.n	800483a <USER_SPI_initialize+0xb2>
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004896:	2100      	movs	r1, #0
 8004898:	4638      	mov	r0, r7
 800489a:	f7ff fec7 	bl	800462c <send_cmd>
 800489e:	2800      	cmp	r0, #0
 80048a0:	d1ea      	bne.n	8004878 <USER_SPI_initialize+0xf0>
 80048a2:	e7ec      	b.n	800487e <USER_SPI_initialize+0xf6>
		Stat = STA_NOINIT;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e7d3      	b.n	8004850 <USER_SPI_initialize+0xc8>
	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80048a8:	2001      	movs	r0, #1
 80048aa:	e779      	b.n	80047a0 <USER_SPI_initialize+0x18>
 80048ac:	20000020 	.word	0x20000020
 80048b0:	20000f94 	.word	0x20000f94
 80048b4:	20000b18 	.word	0x20000b18

080048b8 <USER_SPI_status>:

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80048b8:	b918      	cbnz	r0, 80048c2 <USER_SPI_status+0xa>

	return Stat;	/* Return disk status */
 80048ba:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <USER_SPI_status+0x10>)
 80048bc:	7818      	ldrb	r0, [r3, #0]
 80048be:	b2c0      	uxtb	r0, r0
 80048c0:	4770      	bx	lr
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80048c2:	2001      	movs	r0, #1
}
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20000020 	.word	0x20000020

080048cc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	460d      	mov	r5, r1
 80048d0:	461c      	mov	r4, r3
 80048d2:	4611      	mov	r1, r2
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80048d4:	bb88      	cbnz	r0, 800493a <USER_SPI_read+0x6e>
 80048d6:	b383      	cbz	r3, 800493a <USER_SPI_read+0x6e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80048d8:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <USER_SPI_read+0x78>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	07da      	lsls	r2, r3, #31
 80048de:	d42e      	bmi.n	800493e <USER_SPI_read+0x72>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80048e0:	4b19      	ldr	r3, [pc, #100]	; (8004948 <USER_SPI_read+0x7c>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	071b      	lsls	r3, r3, #28
 80048e6:	bf58      	it	pl
 80048e8:	0249      	lslpl	r1, r1, #9

	if (count == 1) {	/* Single sector read */
 80048ea:	2c01      	cmp	r4, #1
 80048ec:	d111      	bne.n	8004912 <USER_SPI_read+0x46>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80048ee:	2011      	movs	r0, #17
 80048f0:	f7ff fe9c 	bl	800462c <send_cmd>
 80048f4:	b938      	cbnz	r0, 8004906 <USER_SPI_read+0x3a>
			&& rcvr_datablock(buff, 512)) {
 80048f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048fa:	4628      	mov	r0, r5
 80048fc:	f7ff ff20 	bl	8004740 <rcvr_datablock>
 8004900:	fab0 f480 	clz	r4, r0
 8004904:	0964      	lsrs	r4, r4, #5
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	despiselect();
 8004906:	f7ff fe6b 	bl	80045e0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800490a:	1c20      	adds	r0, r4, #0
 800490c:	bf18      	it	ne
 800490e:	2001      	movne	r0, #1
 8004910:	bd38      	pop	{r3, r4, r5, pc}
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004912:	2012      	movs	r0, #18
 8004914:	f7ff fe8a 	bl	800462c <send_cmd>
 8004918:	2800      	cmp	r0, #0
 800491a:	d1f4      	bne.n	8004906 <USER_SPI_read+0x3a>
				if (!rcvr_datablock(buff, 512)) break;
 800491c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004920:	4628      	mov	r0, r5
 8004922:	f7ff ff0d 	bl	8004740 <rcvr_datablock>
 8004926:	b118      	cbz	r0, 8004930 <USER_SPI_read+0x64>
			} while (--count);
 8004928:	3c01      	subs	r4, #1
				buff += 512;
 800492a:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 800492e:	d1f5      	bne.n	800491c <USER_SPI_read+0x50>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004930:	2100      	movs	r1, #0
 8004932:	200c      	movs	r0, #12
 8004934:	f7ff fe7a 	bl	800462c <send_cmd>
 8004938:	e7e5      	b.n	8004906 <USER_SPI_read+0x3a>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800493a:	2004      	movs	r0, #4
 800493c:	bd38      	pop	{r3, r4, r5, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800493e:	2003      	movs	r0, #3
}
 8004940:	bd38      	pop	{r3, r4, r5, pc}
 8004942:	bf00      	nop
 8004944:	20000020 	.word	0x20000020
 8004948:	20000b18 	.word	0x20000b18

0800494c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	460d      	mov	r5, r1
 8004950:	4616      	mov	r6, r2
 8004952:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004954:	2800      	cmp	r0, #0
 8004956:	d13f      	bne.n	80049d8 <USER_SPI_write+0x8c>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d03d      	beq.n	80049d8 <USER_SPI_write+0x8c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800495c:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <USER_SPI_write+0x98>)
 800495e:	781a      	ldrb	r2, [r3, #0]
 8004960:	07d0      	lsls	r0, r2, #31
 8004962:	d43b      	bmi.n	80049dc <USER_SPI_write+0x90>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	0759      	lsls	r1, r3, #29
 8004968:	d43a      	bmi.n	80049e0 <USER_SPI_write+0x94>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800496a:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <USER_SPI_write+0x9c>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	071a      	lsls	r2, r3, #28
 8004970:	bf58      	it	pl
 8004972:	0276      	lslpl	r6, r6, #9

	if (count == 1) {	/* Single sector write */
 8004974:	2c01      	cmp	r4, #1
 8004976:	d111      	bne.n	800499c <USER_SPI_write+0x50>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004978:	4631      	mov	r1, r6
 800497a:	2018      	movs	r0, #24
 800497c:	f7ff fe56 	bl	800462c <send_cmd>
 8004980:	bb40      	cbnz	r0, 80049d4 <USER_SPI_write+0x88>
			&& xmit_datablock(buff, 0xFE)) {
 8004982:	21fe      	movs	r1, #254	; 0xfe
 8004984:	4628      	mov	r0, r5
 8004986:	f7ff fe93 	bl	80046b0 <xmit_datablock>
 800498a:	fab0 f480 	clz	r4, r0
 800498e:	0964      	lsrs	r4, r4, #5
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
		}
	}
	despiselect();
 8004990:	f7ff fe26 	bl	80045e0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004994:	1c20      	adds	r0, r4, #0
 8004996:	bf18      	it	ne
 8004998:	2001      	movne	r0, #1
 800499a:	bd70      	pop	{r4, r5, r6, pc}
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800499c:	f013 0f06 	tst.w	r3, #6
 80049a0:	d003      	beq.n	80049aa <USER_SPI_write+0x5e>
 80049a2:	4621      	mov	r1, r4
 80049a4:	2097      	movs	r0, #151	; 0x97
 80049a6:	f7ff fe41 	bl	800462c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80049aa:	4631      	mov	r1, r6
 80049ac:	2019      	movs	r0, #25
 80049ae:	f7ff fe3d 	bl	800462c <send_cmd>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d1ec      	bne.n	8004990 <USER_SPI_write+0x44>
				if (!xmit_datablock(buff, 0xFC)) break;
 80049b6:	21fc      	movs	r1, #252	; 0xfc
 80049b8:	4628      	mov	r0, r5
 80049ba:	f7ff fe79 	bl	80046b0 <xmit_datablock>
 80049be:	b118      	cbz	r0, 80049c8 <USER_SPI_write+0x7c>
			} while (--count);
 80049c0:	3c01      	subs	r4, #1
				buff += 512;
 80049c2:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 80049c6:	d1f6      	bne.n	80049b6 <USER_SPI_write+0x6a>
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80049c8:	21fd      	movs	r1, #253	; 0xfd
 80049ca:	2000      	movs	r0, #0
 80049cc:	f7ff fe70 	bl	80046b0 <xmit_datablock>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	d1dd      	bne.n	8004990 <USER_SPI_write+0x44>
 80049d4:	2401      	movs	r4, #1
 80049d6:	e7db      	b.n	8004990 <USER_SPI_write+0x44>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80049d8:	2004      	movs	r0, #4
 80049da:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80049dc:	2003      	movs	r0, #3
 80049de:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80049e0:	2002      	movs	r0, #2
}
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	20000020 	.word	0x20000020
 80049e8:	20000b18 	.word	0x20000b18

080049ec <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80049ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80049ee:	4615      	mov	r5, r2
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80049f0:	2800      	cmp	r0, #0
 80049f2:	f040 80dd 	bne.w	8004bb0 <USER_SPI_ioctl+0x1c4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80049f6:	4b70      	ldr	r3, [pc, #448]	; (8004bb8 <USER_SPI_ioctl+0x1cc>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	07d8      	lsls	r0, r3, #31
 80049fc:	f100 80da 	bmi.w	8004bb4 <USER_SPI_ioctl+0x1c8>

	res = RES_ERROR;

	switch (cmd) {
 8004a00:	2904      	cmp	r1, #4
 8004a02:	f200 80d3 	bhi.w	8004bac <USER_SPI_ioctl+0x1c0>
 8004a06:	e8df f001 	tbb	[pc, r1]
 8004a0a:	0903      	.short	0x0903
 8004a0c:	4bd1      	.short	0x4bd1
 8004a0e:	99          	.byte	0x99
 8004a0f:	00          	.byte	0x00
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004a10:	f7ff fdf4 	bl	80045fc <spiselect>
 8004a14:	fab0 f480 	clz	r4, r0
 8004a18:	0964      	lsrs	r4, r4, #5
 8004a1a:	e006      	b.n	8004a2a <USER_SPI_ioctl+0x3e>
		break;

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	2009      	movs	r0, #9
 8004a20:	f7ff fe04 	bl	800462c <send_cmd>
 8004a24:	4604      	mov	r4, r0
 8004a26:	b128      	cbz	r0, 8004a34 <USER_SPI_ioctl+0x48>
	res = RES_ERROR;
 8004a28:	2401      	movs	r4, #1

	default:
		res = RES_PARERR;
	}

	despiselect();
 8004a2a:	f7ff fdd9 	bl	80045e0 <despiselect>

	return res;
}
 8004a2e:	4620      	mov	r0, r4
 8004a30:	b004      	add	sp, #16
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004a34:	2110      	movs	r1, #16
 8004a36:	4668      	mov	r0, sp
 8004a38:	f7ff fe82 	bl	8004740 <rcvr_datablock>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d0f3      	beq.n	8004a28 <USER_SPI_ioctl+0x3c>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004a40:	f89d 3000 	ldrb.w	r3, [sp]
 8004a44:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004a48:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8004a4c:	099b      	lsrs	r3, r3, #6
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004a54:	d109      	bne.n	8004a6a <USER_SPI_ioctl+0x7e>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004a56:	041a      	lsls	r2, r3, #16
 8004a58:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8004a5c:	3201      	adds	r2, #1
 8004a5e:	eb01 2300 	add.w	r3, r1, r0, lsl #8
 8004a62:	4413      	add	r3, r2
				*(DWORD*)buff = csize << 10;
 8004a64:	029b      	lsls	r3, r3, #10
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004a66:	602b      	str	r3, [r5, #0]
 8004a68:	e7df      	b.n	8004a2a <USER_SPI_ioctl+0x3e>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004a6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	0292      	lsls	r2, r2, #10
 8004a72:	eb03 1390 	add.w	r3, r3, r0, lsr #6
 8004a76:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8004a7a:	4413      	add	r3, r2
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004a7c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004a80:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8004a84:	f002 020f 	and.w	r2, r2, #15
 8004a88:	eb02 12d0 	add.w	r2, r2, r0, lsr #7
 8004a8c:	0049      	lsls	r1, r1, #1
 8004a8e:	3202      	adds	r2, #2
 8004a90:	f001 0106 	and.w	r1, r1, #6
 8004a94:	440a      	add	r2, r1
				*(DWORD*)buff = csize << (n - 9);
 8004a96:	b2d2      	uxtb	r2, r2
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004a98:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << (n - 9);
 8004a9a:	3a09      	subs	r2, #9
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004a9c:	4093      	lsls	r3, r2
 8004a9e:	e7e2      	b.n	8004a66 <USER_SPI_ioctl+0x7a>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004aa0:	4c46      	ldr	r4, [pc, #280]	; (8004bbc <USER_SPI_ioctl+0x1d0>)
 8004aa2:	7821      	ldrb	r1, [r4, #0]
 8004aa4:	f011 0104 	ands.w	r1, r1, #4
 8004aa8:	d01b      	beq.n	8004ae2 <USER_SPI_ioctl+0xf6>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004aaa:	2100      	movs	r1, #0
 8004aac:	208d      	movs	r0, #141	; 0x8d
 8004aae:	f7ff fdbd 	bl	800462c <send_cmd>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d1b8      	bne.n	8004a28 <USER_SPI_ioctl+0x3c>
				xchg_spi(0xFF);
 8004ab6:	20ff      	movs	r0, #255	; 0xff
 8004ab8:	f7ff fd68 	bl	800458c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004abc:	2110      	movs	r1, #16
 8004abe:	4668      	mov	r0, sp
 8004ac0:	f7ff fe3e 	bl	8004740 <rcvr_datablock>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d0af      	beq.n	8004a28 <USER_SPI_ioctl+0x3c>
 8004ac8:	2430      	movs	r4, #48	; 0x30
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004aca:	20ff      	movs	r0, #255	; 0xff
 8004acc:	3c01      	subs	r4, #1
 8004ace:	f7ff fd5d 	bl	800458c <xchg_spi>
 8004ad2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004ad6:	d1f8      	bne.n	8004aca <USER_SPI_ioctl+0xde>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004ad8:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004adc:	091a      	lsrs	r2, r3, #4
 8004ade:	2310      	movs	r3, #16
 8004ae0:	e7dc      	b.n	8004a9c <USER_SPI_ioctl+0xb0>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004ae2:	2009      	movs	r0, #9
 8004ae4:	f7ff fda2 	bl	800462c <send_cmd>
 8004ae8:	4606      	mov	r6, r0
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d19c      	bne.n	8004a28 <USER_SPI_ioctl+0x3c>
 8004aee:	2110      	movs	r1, #16
 8004af0:	4668      	mov	r0, sp
 8004af2:	f7ff fe25 	bl	8004740 <rcvr_datablock>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d096      	beq.n	8004a28 <USER_SPI_ioctl+0x3c>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004afa:	7820      	ldrb	r0, [r4, #0]
 8004afc:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004b00:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8004b04:	f010 0402 	ands.w	r4, r0, #2
 8004b08:	d00d      	beq.n	8004b26 <USER_SPI_ioctl+0x13a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8004b10:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004b14:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 8004b18:	0992      	lsrs	r2, r2, #6
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	3a01      	subs	r2, #1
 8004b1e:	4093      	lsls	r3, r2
 8004b20:	602b      	str	r3, [r5, #0]
				res = RES_OK;
 8004b22:	4634      	mov	r4, r6
 8004b24:	e781      	b.n	8004a2a <USER_SPI_ioctl+0x3e>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004b26:	00ca      	lsls	r2, r1, #3
 8004b28:	f002 0218 	and.w	r2, r2, #24
 8004b2c:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8004b30:	eb02 1251 	add.w	r2, r2, r1, lsr #5
 8004b34:	3301      	adds	r3, #1
 8004b36:	fb02 3303 	mla	r3, r2, r3, r3
 8004b3a:	e794      	b.n	8004a66 <USER_SPI_ioctl+0x7a>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004b3c:	4c1f      	ldr	r4, [pc, #124]	; (8004bbc <USER_SPI_ioctl+0x1d0>)
 8004b3e:	7822      	ldrb	r2, [r4, #0]
 8004b40:	f012 0f06 	tst.w	r2, #6
 8004b44:	f43f af70 	beq.w	8004a28 <USER_SPI_ioctl+0x3c>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004b48:	466a      	mov	r2, sp
 8004b4a:	210b      	movs	r1, #11
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	f7ff ff4d 	bl	80049ec <USER_SPI_ioctl>
 8004b52:	2800      	cmp	r0, #0
 8004b54:	f47f af68 	bne.w	8004a28 <USER_SPI_ioctl+0x3c>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004b58:	f89d 3000 	ldrb.w	r3, [sp]
 8004b5c:	099b      	lsrs	r3, r3, #6
 8004b5e:	d104      	bne.n	8004b6a <USER_SPI_ioctl+0x17e>
 8004b60:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004b64:	065a      	lsls	r2, r3, #25
 8004b66:	f57f af5f 	bpl.w	8004a28 <USER_SPI_ioctl+0x3c>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004b6a:	cd22      	ldmia	r5, {r1, r5}
		if (!(CardType & CT_BLOCK)) {
 8004b6c:	7823      	ldrb	r3, [r4, #0]
 8004b6e:	071b      	lsls	r3, r3, #28
			st *= 512; ed *= 512;
 8004b70:	bf58      	it	pl
 8004b72:	0249      	lslpl	r1, r1, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004b74:	f04f 0020 	mov.w	r0, #32
			st *= 512; ed *= 512;
 8004b78:	bf58      	it	pl
 8004b7a:	026d      	lslpl	r5, r5, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004b7c:	f7ff fd56 	bl	800462c <send_cmd>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	f47f af51 	bne.w	8004a28 <USER_SPI_ioctl+0x3c>
 8004b86:	4629      	mov	r1, r5
 8004b88:	2021      	movs	r0, #33	; 0x21
 8004b8a:	f7ff fd4f 	bl	800462c <send_cmd>
 8004b8e:	4601      	mov	r1, r0
 8004b90:	2800      	cmp	r0, #0
 8004b92:	f47f af49 	bne.w	8004a28 <USER_SPI_ioctl+0x3c>
 8004b96:	2026      	movs	r0, #38	; 0x26
 8004b98:	f7ff fd48 	bl	800462c <send_cmd>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	f47f af43 	bne.w	8004a28 <USER_SPI_ioctl+0x3c>
 8004ba2:	f247 5030 	movw	r0, #30000	; 0x7530
 8004ba6:	f7ff fd05 	bl	80045b4 <wait_ready>
 8004baa:	e733      	b.n	8004a14 <USER_SPI_ioctl+0x28>
		res = RES_PARERR;
 8004bac:	2404      	movs	r4, #4
 8004bae:	e73c      	b.n	8004a2a <USER_SPI_ioctl+0x3e>
	if (drv) return RES_PARERR;					/* Check parameter */
 8004bb0:	2404      	movs	r4, #4
 8004bb2:	e73c      	b.n	8004a2e <USER_SPI_ioctl+0x42>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004bb4:	2403      	movs	r4, #3
 8004bb6:	e73a      	b.n	8004a2e <USER_SPI_ioctl+0x42>
 8004bb8:	20000020 	.word	0x20000020
 8004bbc:	20000b18 	.word	0x20000b18

08004bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bf8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004bc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004bc6:	e003      	b.n	8004bd0 <LoopCopyDataInit>

08004bc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004bca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004bcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004bce:	3104      	adds	r1, #4

08004bd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004bd0:	480b      	ldr	r0, [pc, #44]	; (8004c00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004bd2:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004bd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004bd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004bd8:	d3f6      	bcc.n	8004bc8 <CopyDataInit>
  ldr  r2, =_sbss
 8004bda:	4a0b      	ldr	r2, [pc, #44]	; (8004c08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004bdc:	e002      	b.n	8004be4 <LoopFillZerobss>

08004bde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004bde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004be0:	f842 3b04 	str.w	r3, [r2], #4

08004be4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004be4:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004be6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004be8:	d3f9      	bcc.n	8004bde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004bea:	f7ff fc85 	bl	80044f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bee:	f000 f811 	bl	8004c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bf2:	f7ff fb89 	bl	8004308 <main>
  bx  lr    
 8004bf6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004bf8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004bfc:	0800521c 	.word	0x0800521c
  ldr  r0, =_sdata
 8004c00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c04:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8004c08:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8004c0c:	2000122c 	.word	0x2000122c

08004c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c10:	e7fe      	b.n	8004c10 <ADC_IRQHandler>
	...

08004c14 <__libc_init_array>:
 8004c14:	b570      	push	{r4, r5, r6, lr}
 8004c16:	4e0d      	ldr	r6, [pc, #52]	; (8004c4c <__libc_init_array+0x38>)
 8004c18:	4c0d      	ldr	r4, [pc, #52]	; (8004c50 <__libc_init_array+0x3c>)
 8004c1a:	1ba4      	subs	r4, r4, r6
 8004c1c:	10a4      	asrs	r4, r4, #2
 8004c1e:	2500      	movs	r5, #0
 8004c20:	42a5      	cmp	r5, r4
 8004c22:	d109      	bne.n	8004c38 <__libc_init_array+0x24>
 8004c24:	4e0b      	ldr	r6, [pc, #44]	; (8004c54 <__libc_init_array+0x40>)
 8004c26:	4c0c      	ldr	r4, [pc, #48]	; (8004c58 <__libc_init_array+0x44>)
 8004c28:	f000 f898 	bl	8004d5c <_init>
 8004c2c:	1ba4      	subs	r4, r4, r6
 8004c2e:	10a4      	asrs	r4, r4, #2
 8004c30:	2500      	movs	r5, #0
 8004c32:	42a5      	cmp	r5, r4
 8004c34:	d105      	bne.n	8004c42 <__libc_init_array+0x2e>
 8004c36:	bd70      	pop	{r4, r5, r6, pc}
 8004c38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c3c:	4798      	blx	r3
 8004c3e:	3501      	adds	r5, #1
 8004c40:	e7ee      	b.n	8004c20 <__libc_init_array+0xc>
 8004c42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c46:	4798      	blx	r3
 8004c48:	3501      	adds	r5, #1
 8004c4a:	e7f2      	b.n	8004c32 <__libc_init_array+0x1e>
 8004c4c:	08005214 	.word	0x08005214
 8004c50:	08005214 	.word	0x08005214
 8004c54:	08005214 	.word	0x08005214
 8004c58:	08005218 	.word	0x08005218

08004c5c <malloc>:
 8004c5c:	4b02      	ldr	r3, [pc, #8]	; (8004c68 <malloc+0xc>)
 8004c5e:	4601      	mov	r1, r0
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	f000 b80b 	b.w	8004c7c <_malloc_r>
 8004c66:	bf00      	nop
 8004c68:	20000024 	.word	0x20000024

08004c6c <memset>:
 8004c6c:	4402      	add	r2, r0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d100      	bne.n	8004c76 <memset+0xa>
 8004c74:	4770      	bx	lr
 8004c76:	f803 1b01 	strb.w	r1, [r3], #1
 8004c7a:	e7f9      	b.n	8004c70 <memset+0x4>

08004c7c <_malloc_r>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	1ccd      	adds	r5, r1, #3
 8004c80:	f025 0503 	bic.w	r5, r5, #3
 8004c84:	3508      	adds	r5, #8
 8004c86:	2d0c      	cmp	r5, #12
 8004c88:	bf38      	it	cc
 8004c8a:	250c      	movcc	r5, #12
 8004c8c:	2d00      	cmp	r5, #0
 8004c8e:	4606      	mov	r6, r0
 8004c90:	db01      	blt.n	8004c96 <_malloc_r+0x1a>
 8004c92:	42a9      	cmp	r1, r5
 8004c94:	d903      	bls.n	8004c9e <_malloc_r+0x22>
 8004c96:	230c      	movs	r3, #12
 8004c98:	6033      	str	r3, [r6, #0]
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	bd70      	pop	{r4, r5, r6, pc}
 8004c9e:	f000 f85b 	bl	8004d58 <__malloc_lock>
 8004ca2:	4a23      	ldr	r2, [pc, #140]	; (8004d30 <_malloc_r+0xb4>)
 8004ca4:	6814      	ldr	r4, [r2, #0]
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	b991      	cbnz	r1, 8004cd0 <_malloc_r+0x54>
 8004caa:	4c22      	ldr	r4, [pc, #136]	; (8004d34 <_malloc_r+0xb8>)
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	b91b      	cbnz	r3, 8004cb8 <_malloc_r+0x3c>
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	f000 f841 	bl	8004d38 <_sbrk_r>
 8004cb6:	6020      	str	r0, [r4, #0]
 8004cb8:	4629      	mov	r1, r5
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f000 f83c 	bl	8004d38 <_sbrk_r>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d126      	bne.n	8004d12 <_malloc_r+0x96>
 8004cc4:	230c      	movs	r3, #12
 8004cc6:	6033      	str	r3, [r6, #0]
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f000 f846 	bl	8004d5a <__malloc_unlock>
 8004cce:	e7e4      	b.n	8004c9a <_malloc_r+0x1e>
 8004cd0:	680b      	ldr	r3, [r1, #0]
 8004cd2:	1b5b      	subs	r3, r3, r5
 8004cd4:	d41a      	bmi.n	8004d0c <_malloc_r+0x90>
 8004cd6:	2b0b      	cmp	r3, #11
 8004cd8:	d90f      	bls.n	8004cfa <_malloc_r+0x7e>
 8004cda:	600b      	str	r3, [r1, #0]
 8004cdc:	50cd      	str	r5, [r1, r3]
 8004cde:	18cc      	adds	r4, r1, r3
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f000 f83a 	bl	8004d5a <__malloc_unlock>
 8004ce6:	f104 000b 	add.w	r0, r4, #11
 8004cea:	1d23      	adds	r3, r4, #4
 8004cec:	f020 0007 	bic.w	r0, r0, #7
 8004cf0:	1ac3      	subs	r3, r0, r3
 8004cf2:	d01b      	beq.n	8004d2c <_malloc_r+0xb0>
 8004cf4:	425a      	negs	r2, r3
 8004cf6:	50e2      	str	r2, [r4, r3]
 8004cf8:	bd70      	pop	{r4, r5, r6, pc}
 8004cfa:	428c      	cmp	r4, r1
 8004cfc:	bf0d      	iteet	eq
 8004cfe:	6863      	ldreq	r3, [r4, #4]
 8004d00:	684b      	ldrne	r3, [r1, #4]
 8004d02:	6063      	strne	r3, [r4, #4]
 8004d04:	6013      	streq	r3, [r2, #0]
 8004d06:	bf18      	it	ne
 8004d08:	460c      	movne	r4, r1
 8004d0a:	e7e9      	b.n	8004ce0 <_malloc_r+0x64>
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	6849      	ldr	r1, [r1, #4]
 8004d10:	e7ca      	b.n	8004ca8 <_malloc_r+0x2c>
 8004d12:	1cc4      	adds	r4, r0, #3
 8004d14:	f024 0403 	bic.w	r4, r4, #3
 8004d18:	42a0      	cmp	r0, r4
 8004d1a:	d005      	beq.n	8004d28 <_malloc_r+0xac>
 8004d1c:	1a21      	subs	r1, r4, r0
 8004d1e:	4630      	mov	r0, r6
 8004d20:	f000 f80a 	bl	8004d38 <_sbrk_r>
 8004d24:	3001      	adds	r0, #1
 8004d26:	d0cd      	beq.n	8004cc4 <_malloc_r+0x48>
 8004d28:	6025      	str	r5, [r4, #0]
 8004d2a:	e7d9      	b.n	8004ce0 <_malloc_r+0x64>
 8004d2c:	bd70      	pop	{r4, r5, r6, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000b1c 	.word	0x20000b1c
 8004d34:	20000b20 	.word	0x20000b20

08004d38 <_sbrk_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	4c06      	ldr	r4, [pc, #24]	; (8004d54 <_sbrk_r+0x1c>)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4605      	mov	r5, r0
 8004d40:	4608      	mov	r0, r1
 8004d42:	6023      	str	r3, [r4, #0]
 8004d44:	f7ff fbca 	bl	80044dc <_sbrk>
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	d102      	bne.n	8004d52 <_sbrk_r+0x1a>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	b103      	cbz	r3, 8004d52 <_sbrk_r+0x1a>
 8004d50:	602b      	str	r3, [r5, #0]
 8004d52:	bd38      	pop	{r3, r4, r5, pc}
 8004d54:	20001228 	.word	0x20001228

08004d58 <__malloc_lock>:
 8004d58:	4770      	bx	lr

08004d5a <__malloc_unlock>:
 8004d5a:	4770      	bx	lr

08004d5c <_init>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	bf00      	nop
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr

08004d68 <_fini>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr
